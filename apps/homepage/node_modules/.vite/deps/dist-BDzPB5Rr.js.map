{"version":3,"file":"dist-BDzPB5Rr.js","names":["SaverDef","tensor","util.toNestedArray","contextId","pad","json","json","json","json","json","json","json","json","json","json","json","json","json","json","json","json","json","json","arithmetic","basicMath","control","convolution","creation","dynamic","evaluation","graph","hashTable","image","logical","matrices","normalization","reduction","sliceJoin","sparse","spectral","string","transformation","op","functions","tensorflow.DataType","executeOp","tfOps","executeOp","tfOps","tensor","tensor","indices","tensor","tensors","executeOp","tensor","condResult","pad","executeOp","tfOps","executeOp","tfOps","step","mean","executeOp","tfOps","executeOp","tfOps","executeOp","tfOps","data","tfOps.scalar","executeOp","executeOp","tfOps","image","executeOp","tfOps","executeOp","tfOps","executeOp","tfOps","executeOp","tfOps","executeOp","tfOps","reverse","x","weights","size","executeOp","tfOps","tensor","util.arraysEqual","executeOp","tfOps","executeOp","tfOps","executeOp","tfOps","executeOp","tfOps","tfc.tidy","node","tidy","arithmetic.executeOp","tensorMap","context","basicMath.executeOp","control.executeOp","convolution.executeOp","creation.executeOp","dynamic.executeOp","evaluation.executeOp","image.executeOp","graph.executeOp","logical.executeOp","matrices.executeOp","normalization.executeOp","ragged.executeOp","reduction.executeOp","sliceJoin.executeOp","sparse.executeOp","spectral.executeOp","string.executeOp","transformation.executeOp","hashTable.executeOp","tfc.util.isPromise","unique","stack","tensor","clone","util.isPromise","node","stack","io","util.isPromise","tensor","_a","io.getWeightSpecs","io.getModelArtifactsForJSONSync","io.fromMemorySync"],"sources":["../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/flags.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/data/compiled_api.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/register.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/arithmetic.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/basic_math.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/control.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/convolution.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/creation.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/dynamic.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/evaluation.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/graph.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/hash_table.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/image.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/logical.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/matrices.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/normalization.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/reduction.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/slice_join.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/sparse.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/spectral.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/string.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/transformation.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/operation_mapper.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/node_value_impl.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/arithmetic_executor.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/basic_math_executor.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_utils.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_array.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_list.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/control_executor.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/dynamic_executor.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/evaluation_executor.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/graph_executor.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/executor/hash_table.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/hash_table_executor.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/image_executor.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/logical_executor.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/matrices_executor.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/ragged_executor.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/reduction_executor.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/sparse_executor.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/spectral_executor.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/string_executor.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/transformation_executor.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/operations/operation_executor.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/executor/execution_context.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/executor/model_analysis.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/executor/graph_executor.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/executor/resource_manager.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/executor/graph_model.js","../../../../../node_modules/.pnpm/@tensorflow+tfjs-converter@4.22.0_@tensorflow+tfjs-core@4.22.0/node_modules/@tensorflow/tfjs-converter/dist/version.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nconst ENV = env();\n/** Whether to keep intermediate tensors. */\nENV.registerFlag('KEEP_INTERMEDIATE_TENSORS', () => false, debugValue => {\n    if (debugValue) {\n        console.warn('Keep intermediate tensors is ON. This will print the values of all ' +\n            'intermediate tensors during model inference. Not all models ' +\n            'support this mode. For details, check e2e/benchmarks/ ' +\n            'model_config.js. This significantly impacts performance.');\n    }\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhZ3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90ZmpzLWNvbnZlcnRlci9zcmMvZmxhZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBRUgsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBRTFDLE1BQU0sR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDO0FBRWxCLDRDQUE0QztBQUM1QyxHQUFHLENBQUMsWUFBWSxDQUFDLDJCQUEyQixFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsRUFBRTtJQUN0RSxJQUFJLFVBQVUsRUFBRTtRQUNkLE9BQU8sQ0FBQyxJQUFJLENBQ1IscUVBQXFFO1lBQ3JFLDhEQUE4RDtZQUM5RCx3REFBd0Q7WUFDeEQsMERBQTBELENBQUMsQ0FBQztLQUNqRTtBQUNILENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge2Vudn0gZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcblxuY29uc3QgRU5WID0gZW52KCk7XG5cbi8qKiBXaGV0aGVyIHRvIGtlZXAgaW50ZXJtZWRpYXRlIHRlbnNvcnMuICovXG5FTlYucmVnaXN0ZXJGbGFnKCdLRUVQX0lOVEVSTUVESUFURV9URU5TT1JTJywgKCkgPT4gZmFsc2UsIGRlYnVnVmFsdWUgPT4ge1xuICBpZiAoZGVidWdWYWx1ZSkge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ0tlZXAgaW50ZXJtZWRpYXRlIHRlbnNvcnMgaXMgT04uIFRoaXMgd2lsbCBwcmludCB0aGUgdmFsdWVzIG9mIGFsbCAnICtcbiAgICAgICAgJ2ludGVybWVkaWF0ZSB0ZW5zb3JzIGR1cmluZyBtb2RlbCBpbmZlcmVuY2UuIE5vdCBhbGwgbW9kZWxzICcgK1xuICAgICAgICAnc3VwcG9ydCB0aGlzIG1vZGUuIEZvciBkZXRhaWxzLCBjaGVjayBlMmUvYmVuY2htYXJrcy8gJyArXG4gICAgICAgICdtb2RlbF9jb25maWcuanMuIFRoaXMgc2lnbmlmaWNhbnRseSBpbXBhY3RzIHBlcmZvcm1hbmNlLicpO1xuICB9XG59KTtcbiJdfQ==","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n/** DataType enum. */\nexport var DataType;\n(function (DataType) {\n    // These properties must be quoted since they are used by parseDtypeParam\n    // in tfjs-converter/src/operations/operation_mapper.ts to look up dtypes\n    // by string name. If they are not quoted, Closure will mangle their names.\n    // Not a legal value for DataType.  Used to indicate a DataType field\n    // has not been set.\n    DataType[DataType[\"DT_INVALID\"] = 0] = \"DT_INVALID\";\n    // Data types that all computation devices are expected to be\n    // capable to support.\n    DataType[DataType[\"DT_FLOAT\"] = 1] = \"DT_FLOAT\";\n    DataType[DataType[\"DT_DOUBLE\"] = 2] = \"DT_DOUBLE\";\n    DataType[DataType[\"DT_INT32\"] = 3] = \"DT_INT32\";\n    DataType[DataType[\"DT_UINT8\"] = 4] = \"DT_UINT8\";\n    DataType[DataType[\"DT_INT16\"] = 5] = \"DT_INT16\";\n    DataType[DataType[\"DT_INT8\"] = 6] = \"DT_INT8\";\n    DataType[DataType[\"DT_STRING\"] = 7] = \"DT_STRING\";\n    DataType[DataType[\"DT_COMPLEX64\"] = 8] = \"DT_COMPLEX64\";\n    DataType[DataType[\"DT_INT64\"] = 9] = \"DT_INT64\";\n    DataType[DataType[\"DT_BOOL\"] = 10] = \"DT_BOOL\";\n    DataType[DataType[\"DT_QINT8\"] = 11] = \"DT_QINT8\";\n    DataType[DataType[\"DT_QUINT8\"] = 12] = \"DT_QUINT8\";\n    DataType[DataType[\"DT_QINT32\"] = 13] = \"DT_QINT32\";\n    DataType[DataType[\"DT_BFLOAT16\"] = 14] = \"DT_BFLOAT16\";\n    DataType[DataType[\"DT_QINT16\"] = 15] = \"DT_QINT16\";\n    DataType[DataType[\"DT_QUINT16\"] = 16] = \"DT_QUINT16\";\n    DataType[DataType[\"DT_UINT16\"] = 17] = \"DT_UINT16\";\n    DataType[DataType[\"DT_COMPLEX128\"] = 18] = \"DT_COMPLEX128\";\n    DataType[DataType[\"DT_HALF\"] = 19] = \"DT_HALF\";\n    DataType[DataType[\"DT_RESOURCE\"] = 20] = \"DT_RESOURCE\";\n    DataType[DataType[\"DT_VARIANT\"] = 21] = \"DT_VARIANT\";\n    DataType[DataType[\"DT_UINT32\"] = 22] = \"DT_UINT32\";\n    DataType[DataType[\"DT_UINT64\"] = 23] = \"DT_UINT64\";\n    // Do not use!  These are only for parameters.  Every enum above\n    // should have a corresponding value below (verified by types_test).\n    DataType[DataType[\"DT_FLOAT_REF\"] = 101] = \"DT_FLOAT_REF\";\n    DataType[DataType[\"DT_DOUBLE_REF\"] = 102] = \"DT_DOUBLE_REF\";\n    DataType[DataType[\"DT_INT32_REF\"] = 103] = \"DT_INT32_REF\";\n    DataType[DataType[\"DT_UINT8_REF\"] = 104] = \"DT_UINT8_REF\";\n    DataType[DataType[\"DT_INT16_REF\"] = 105] = \"DT_INT16_REF\";\n    DataType[DataType[\"DT_INT8_REF\"] = 106] = \"DT_INT8_REF\";\n    DataType[DataType[\"DT_STRING_REF\"] = 107] = \"DT_STRING_REF\";\n    DataType[DataType[\"DT_COMPLEX64_REF\"] = 108] = \"DT_COMPLEX64_REF\";\n    DataType[DataType[\"DT_INT64_REF\"] = 109] = \"DT_INT64_REF\";\n    DataType[DataType[\"DT_BOOL_REF\"] = 110] = \"DT_BOOL_REF\";\n    DataType[DataType[\"DT_QINT8_REF\"] = 111] = \"DT_QINT8_REF\";\n    DataType[DataType[\"DT_QUINT8_REF\"] = 112] = \"DT_QUINT8_REF\";\n    DataType[DataType[\"DT_QINT32_REF\"] = 113] = \"DT_QINT32_REF\";\n    DataType[DataType[\"DT_BFLOAT16_REF\"] = 114] = \"DT_BFLOAT16_REF\";\n    DataType[DataType[\"DT_QINT16_REF\"] = 115] = \"DT_QINT16_REF\";\n    DataType[DataType[\"DT_QUINT16_REF\"] = 116] = \"DT_QUINT16_REF\";\n    DataType[DataType[\"DT_UINT16_REF\"] = 117] = \"DT_UINT16_REF\";\n    DataType[DataType[\"DT_COMPLEX128_REF\"] = 118] = \"DT_COMPLEX128_REF\";\n    DataType[DataType[\"DT_HALF_REF\"] = 119] = \"DT_HALF_REF\";\n    DataType[DataType[\"DT_RESOURCE_REF\"] = 120] = \"DT_RESOURCE_REF\";\n    DataType[DataType[\"DT_VARIANT_REF\"] = 121] = \"DT_VARIANT_REF\";\n    DataType[DataType[\"DT_UINT32_REF\"] = 122] = \"DT_UINT32_REF\";\n    DataType[DataType[\"DT_UINT64_REF\"] = 123] = \"DT_UINT64_REF\";\n})(DataType || (DataType = {}));\nexport var SaverDef;\n(function (SaverDef) {\n    /** CheckpointFormatVersion enum. */\n    let CheckpointFormatVersion;\n    (function (CheckpointFormatVersion) {\n        CheckpointFormatVersion[CheckpointFormatVersion[\"LEGACY\"] = 0] = \"LEGACY\";\n        CheckpointFormatVersion[CheckpointFormatVersion[\"V1\"] = 1] = \"V1\";\n        CheckpointFormatVersion[CheckpointFormatVersion[\"V2\"] = 2] = \"V2\";\n    })(CheckpointFormatVersion = SaverDef.CheckpointFormatVersion || (SaverDef.CheckpointFormatVersion = {}));\n})(SaverDef || (SaverDef = {}));\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nconst CUSTOM_OPS = {};\n/**\n * Register an Op for graph model executor. This allows you to register\n * TensorFlow custom op or override existing op.\n *\n * Here is an example of registering a new MatMul Op.\n * ```js\n * const customMatmul = (node) =>\n *    tf.matMul(\n *        node.inputs[0], node.inputs[1],\n *        node.attrs['transpose_a'], node.attrs['transpose_b']);\n *\n * tf.registerOp('MatMul', customMatmul);\n * ```\n * The inputs and attrs of the node object are based on the TensorFlow op\n * registry.\n *\n * @param name The Tensorflow Op name.\n * @param opFunc An op function which is called with the current graph node\n * during execution and needs to return a tensor or a list of tensors. The node\n * has the following attributes:\n *    - attr: A map from attribute name to its value\n *    - inputs: A list of input tensors\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function registerOp(name, opFunc) {\n    const opMapper = {\n        tfOpName: name,\n        category: 'custom',\n        inputs: [],\n        attrs: [],\n        customExecutor: opFunc\n    };\n    CUSTOM_OPS[name] = opMapper;\n}\n/**\n * Retrieve the OpMapper object for the registered op.\n *\n * @param name The Tensorflow Op name.\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function getRegisteredOp(name) {\n    return CUSTOM_OPS[name];\n}\n/**\n * Deregister the Op for graph model executor.\n *\n * @param name The Tensorflow Op name.\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function deregisterOp(name) {\n    delete CUSTOM_OPS[name];\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvbnZlcnRlci9zcmMvb3BlcmF0aW9ucy9jdXN0b21fb3AvcmVnaXN0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBSUgsTUFBTSxVQUFVLEdBQThCLEVBQUUsQ0FBQztBQUVqRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBd0JHO0FBQ0gsTUFBTSxVQUFVLFVBQVUsQ0FBQyxJQUFZLEVBQUUsTUFBa0I7SUFDekQsTUFBTSxRQUFRLEdBQWE7UUFDekIsUUFBUSxFQUFFLElBQUk7UUFDZCxRQUFRLEVBQUUsUUFBUTtRQUNsQixNQUFNLEVBQUUsRUFBRTtRQUNWLEtBQUssRUFBRSxFQUFFO1FBQ1QsY0FBYyxFQUFFLE1BQU07S0FDdkIsQ0FBQztJQUVGLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUM7QUFDOUIsQ0FBQztBQUVEOzs7Ozs7R0FNRztBQUNILE1BQU0sVUFBVSxlQUFlLENBQUMsSUFBWTtJQUMxQyxPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMxQixDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLFlBQVksQ0FBQyxJQUFZO0lBQ3ZDLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzFCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtPcEV4ZWN1dG9yLCBPcE1hcHBlcn0gZnJvbSAnLi4vdHlwZXMnO1xuXG5jb25zdCBDVVNUT01fT1BTOiB7W2tleTogc3RyaW5nXTogT3BNYXBwZXJ9ID0ge307XG5cbi8qKlxuICogUmVnaXN0ZXIgYW4gT3AgZm9yIGdyYXBoIG1vZGVsIGV4ZWN1dG9yLiBUaGlzIGFsbG93cyB5b3UgdG8gcmVnaXN0ZXJcbiAqIFRlbnNvckZsb3cgY3VzdG9tIG9wIG9yIG92ZXJyaWRlIGV4aXN0aW5nIG9wLlxuICpcbiAqIEhlcmUgaXMgYW4gZXhhbXBsZSBvZiByZWdpc3RlcmluZyBhIG5ldyBNYXRNdWwgT3AuXG4gKiBgYGBqc1xuICogY29uc3QgY3VzdG9tTWF0bXVsID0gKG5vZGUpID0+XG4gKiAgICB0Zi5tYXRNdWwoXG4gKiAgICAgICAgbm9kZS5pbnB1dHNbMF0sIG5vZGUuaW5wdXRzWzFdLFxuICogICAgICAgIG5vZGUuYXR0cnNbJ3RyYW5zcG9zZV9hJ10sIG5vZGUuYXR0cnNbJ3RyYW5zcG9zZV9iJ10pO1xuICpcbiAqIHRmLnJlZ2lzdGVyT3AoJ01hdE11bCcsIGN1c3RvbU1hdG11bCk7XG4gKiBgYGBcbiAqIFRoZSBpbnB1dHMgYW5kIGF0dHJzIG9mIHRoZSBub2RlIG9iamVjdCBhcmUgYmFzZWQgb24gdGhlIFRlbnNvckZsb3cgb3BcbiAqIHJlZ2lzdHJ5LlxuICpcbiAqIEBwYXJhbSBuYW1lIFRoZSBUZW5zb3JmbG93IE9wIG5hbWUuXG4gKiBAcGFyYW0gb3BGdW5jIEFuIG9wIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCB3aXRoIHRoZSBjdXJyZW50IGdyYXBoIG5vZGVcbiAqIGR1cmluZyBleGVjdXRpb24gYW5kIG5lZWRzIHRvIHJldHVybiBhIHRlbnNvciBvciBhIGxpc3Qgb2YgdGVuc29ycy4gVGhlIG5vZGVcbiAqIGhhcyB0aGUgZm9sbG93aW5nIGF0dHJpYnV0ZXM6XG4gKiAgICAtIGF0dHI6IEEgbWFwIGZyb20gYXR0cmlidXRlIG5hbWUgdG8gaXRzIHZhbHVlXG4gKiAgICAtIGlucHV0czogQSBsaXN0IG9mIGlucHV0IHRlbnNvcnNcbiAqXG4gKiBAZG9jIHtoZWFkaW5nOiAnTW9kZWxzJywgc3ViaGVhZGluZzogJ09wIFJlZ2lzdHJ5J31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyT3AobmFtZTogc3RyaW5nLCBvcEZ1bmM6IE9wRXhlY3V0b3IpIHtcbiAgY29uc3Qgb3BNYXBwZXI6IE9wTWFwcGVyID0ge1xuICAgIHRmT3BOYW1lOiBuYW1lLFxuICAgIGNhdGVnb3J5OiAnY3VzdG9tJyxcbiAgICBpbnB1dHM6IFtdLFxuICAgIGF0dHJzOiBbXSxcbiAgICBjdXN0b21FeGVjdXRvcjogb3BGdW5jXG4gIH07XG5cbiAgQ1VTVE9NX09QU1tuYW1lXSA9IG9wTWFwcGVyO1xufVxuXG4vKipcbiAqIFJldHJpZXZlIHRoZSBPcE1hcHBlciBvYmplY3QgZm9yIHRoZSByZWdpc3RlcmVkIG9wLlxuICpcbiAqIEBwYXJhbSBuYW1lIFRoZSBUZW5zb3JmbG93IE9wIG5hbWUuXG4gKlxuICogQGRvYyB7aGVhZGluZzogJ01vZGVscycsIHN1YmhlYWRpbmc6ICdPcCBSZWdpc3RyeSd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZWdpc3RlcmVkT3AobmFtZTogc3RyaW5nKTogT3BNYXBwZXIge1xuICByZXR1cm4gQ1VTVE9NX09QU1tuYW1lXTtcbn1cblxuLyoqXG4gKiBEZXJlZ2lzdGVyIHRoZSBPcCBmb3IgZ3JhcGggbW9kZWwgZXhlY3V0b3IuXG4gKlxuICogQHBhcmFtIG5hbWUgVGhlIFRlbnNvcmZsb3cgT3AgbmFtZS5cbiAqXG4gKiBAZG9jIHtoZWFkaW5nOiAnTW9kZWxzJywgc3ViaGVhZGluZzogJ09wIFJlZ2lzdHJ5J31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlcmVnaXN0ZXJPcChuYW1lOiBzdHJpbmcpIHtcbiAgZGVsZXRlIENVU1RPTV9PUFNbbmFtZV07XG59XG4iXX0=","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { clone, util } from '@tensorflow/tfjs-core';\nexport function getParamValue(paramName, node, tensorMap, context, resourceManager) {\n    const inputParam = node.inputParams[paramName];\n    if (inputParam && inputParam.inputIndexStart !== undefined) {\n        const start = inputParam.inputIndexStart;\n        const end = inputParam.inputIndexEnd === 0 ?\n            undefined :\n            (inputParam.inputIndexEnd === undefined ? start + 1 :\n                inputParam.inputIndexEnd);\n        const shiftedStart = start < 0 ? node.inputNames.length + start : start;\n        if (inputParam.type === 'tensor') {\n            return getTensor(node.inputNames[shiftedStart], tensorMap, context, resourceManager);\n        }\n        if (inputParam.type === 'tensors') {\n            // TODO(mattSoulanille): This filters out NoOp nodes during execution, but\n            // these should really never be in the execution graph in the first place.\n            // They're necessary for ordering the graph, but should not be visible\n            // during execution. Perhaps have different sets of children, one for\n            // control dependencies and another for real dependencies.\n            const inputs = node.inputs.slice(start, end);\n            const inputNames = node.inputNames.slice(start, end)\n                .filter((_name, index) => { var _a; return ((_a = inputs[index]) === null || _a === void 0 ? void 0 : _a.op) !== 'NoOp'; });\n            return inputNames.map(name => getTensor(name, tensorMap, context, resourceManager));\n        }\n        const tensor = getTensor(node.inputNames[shiftedStart], tensorMap, context, resourceManager);\n        const data = tensor.dataSync();\n        return inputParam.type === 'number' ?\n            data[0] :\n            util.toNestedArray(tensor.shape, data);\n    }\n    const attrParam = node.attrParams[paramName];\n    return attrParam && attrParam.value;\n}\n/**\n * Retrieve the tensor from tensorsMap based on input name.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function getTensor(name, tensorsMap, context, resourceManager) {\n    const [nodeName, index] = parseNodeName(name, context);\n    if (resourceManager != null) {\n        const tensor = resourceManager.getHashTableHandleByName(nodeName);\n        if (tensor != null) {\n            return tensor;\n        }\n    }\n    const contextId = context.currentContextIds.find(contextId => {\n        return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];\n    });\n    return contextId !== undefined ?\n        tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] :\n        undefined;\n}\n/**\n * Retrieve the tensors based on input name for current context.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensorsForCurrentContext(name, tensorsMap, context) {\n    return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];\n}\n/**\n * Returns the node name, outputName and index from the Node input name.\n * @param inputName The input name of the node, in format of\n * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is\n * default to 0.\n * If the input name contains output name i.e. StringSplit:indices:0, it will\n * return ['StringSplit', 0, 'indices'].\n */\nexport function getNodeNameAndIndex(inputName, context) {\n    const [nodeName, index, outputName] = parseNodeName(inputName, context);\n    return [\n        getNodeNameWithContextId(nodeName, context && context.currentContextId),\n        index, outputName\n    ];\n}\nfunction getNodeNameWithContextId(name, contextId) {\n    return !!contextId ? `${name}-${contextId}` : name;\n}\nexport function parseNodeName(name, context) {\n    if (name === '') {\n        return ['', 0, undefined];\n    }\n    const isCacheEnabled = context != null && context.parseNodeNameCache != null;\n    if (isCacheEnabled) {\n        const cachedResult = context.parseNodeNameCache.get(name);\n        if (cachedResult != null) {\n            return cachedResult;\n        }\n    }\n    const parts = name.split(':');\n    let result;\n    if (parts.length === 1) {\n        result = [name, 0, undefined];\n    }\n    else {\n        const nodeName = parts[0];\n        const outputName = parts.length === 3 ? parts[1] : undefined;\n        const index = Number(parts[parts.length - 1]);\n        result = [nodeName, index, outputName];\n    }\n    if (isCacheEnabled) {\n        context.parseNodeNameCache.set(name, result);\n    }\n    return result;\n}\nexport function split(arr, size) {\n    const res = [];\n    for (let i = 0; i < arr.length; i += size) {\n        res.push(arr.slice(i, i + size));\n    }\n    return res;\n}\nexport function getPadding(node, tensorMap, context) {\n    let pad = getParamValue('pad', node, tensorMap, context);\n    if (pad === 'explicit') {\n        // This is 1d array, we need to convert it to 2d array\n        pad = getParamValue('explicitPaddings', node, tensorMap, context);\n        const explicitPadding = [[0, 0], [0, 0], [0, 0], [0, 0]];\n        for (let i = 0; i < 4; i++) {\n            explicitPadding[i][0] = pad[i * 2];\n            explicitPadding[i][1] = pad[i * 2 + 1];\n        }\n        return explicitPadding;\n    }\n    return pad;\n}\n/**\n *  Reuse the tensor if it is marked as keep, otherwise clone the tensor to\n *  avoid disposal. This is important for TensorArray and TensorList ops, since\n *  internally they use a tensor as the id for TensorArray and TensorList, and\n * to simplify lookup, they also use Tensor.id as the key to the internal map.\n * These id tensors have been marked as kept in the backend, we need avoid clone\n * them in order to create new Tensor.id.\n * @param tensor\n */\nexport function cloneTensor(tensor) {\n    return tensor.kept ? tensor : clone(tensor);\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'Add',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'AddV2',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'AddN',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'end': 0,\n                'name': 'tensors',\n                'type': 'tensors'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'BiasAdd',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Sub',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'RealDiv',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Div',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'DivNoNan',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'FloorDiv',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Mul',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Maximum',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Minimum',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Pow',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'SquaredDifference',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Mod',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'FloorMod',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'Abs',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Acos',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Asin',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Atan',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Atan2',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'y',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Ceil',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'ClipByValue',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'clipValueMin',\n                'type': 'number'\n            },\n            {\n                'start': 2,\n                'name': 'clipValueMax',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Complex',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'real',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'imag',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'ComplexAbs',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Cos',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Cosh',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Elu',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Exp',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Floor',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Log',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Imag',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'Tout',\n                'name': 'outputType',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Neg',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Real',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'Tout',\n                'name': 'outputType',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Prelu',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'alpha',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Relu',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Relu6',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Selu',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Sigmoid',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Sin',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Sinh',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Sqrt',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Rsqrt',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Square',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Tan',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Tanh',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Sign',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Round',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Expm1',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Log1p',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Reciprocal',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Softplus',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Asinh',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Acosh',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Atanh',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Erf',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LeakyRelu',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'alpha',\n                'name': 'alpha',\n                'type': 'number',\n                'defaultValue': 0.2\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'IsNan',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'IsFinite',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'IsInf',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'EmptyTensorList',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'elementShape',\n                'type': 'shape'\n            },\n            {\n                'start': 1,\n                'name': 'maxNumElements',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'element_dtype',\n                'name': 'elementDType',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LoopCond',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'pred',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Switch',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'data',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'pred',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Merge',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'end': 0,\n                'name': 'tensors',\n                'type': 'tensors'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Enter',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensor',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'frame_name',\n                'name': 'frameName',\n                'type': 'string'\n            },\n            {\n                'tfName': 'is_constant',\n                'name': 'isConstant',\n                'type': 'bool'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Exit',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensor',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'NextIteration',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensor',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorArrayV3',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'size',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'dtype',\n                'name': 'dtype',\n                'type': 'dtype'\n            },\n            {\n                'tfName': 'element_shape',\n                'name': 'elementShape',\n                'type': 'shape'\n            },\n            {\n                'tfName': 'dynamic_size',\n                'name': 'dynamicSize',\n                'type': 'bool'\n            },\n            {\n                'tfName': 'clear_after_read',\n                'name': 'clearAfterRead',\n                'type': 'bool'\n            },\n            {\n                'tfName': 'identical_element_shapes',\n                'name': 'identicalElementShapes',\n                'type': 'bool'\n            },\n            {\n                'tfName': 'tensor_array_name',\n                'name': 'name',\n                'type': 'string'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorArrayWriteV3',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorArrayId',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'index',\n                'type': 'number'\n            },\n            {\n                'start': 2,\n                'name': 'tensor',\n                'type': 'tensor'\n            },\n            {\n                'start': 3,\n                'name': 'flowIn',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorArrayReadV3',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorArrayId',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'index',\n                'type': 'number'\n            },\n            {\n                'start': 2,\n                'name': 'flowIn',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'dtype',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorArrayGatherV3',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorArrayId',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'indices',\n                'type': 'number[]'\n            },\n            {\n                'start': 2,\n                'name': 'flowIn',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'dtype',\n                'name': 'dtype',\n                'type': 'dtype'\n            },\n            {\n                'tfName': 'element_shape',\n                'name': 'elementShape',\n                'type': 'shape'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorArrayScatterV3',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorArrayId',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'indices',\n                'type': 'number[]'\n            },\n            {\n                'start': 2,\n                'name': 'tensor',\n                'type': 'tensor'\n            },\n            {\n                'start': 3,\n                'name': 'flowIn',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorArrayConcatV3',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorArrayId',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'flowIn',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'dtype',\n                'name': 'dtype',\n                'type': 'dtype'\n            },\n            {\n                'tfName': 'element_shape_except0',\n                'name': 'elementShapeExcept0',\n                'type': 'shape',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorArraySplitV3',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorArrayId',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'tensor',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'lengths',\n                'type': 'number[]'\n            },\n            {\n                'start': 3,\n                'name': 'flowIn',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorArraySizeV3',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorArrayId',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'flowIn',\n                'type': 'number'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorArrayCloseV3',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorArrayId',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'StatelessIf',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'cond',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'end': 0,\n                'name': 'args',\n                'type': 'tensors'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'then_branch',\n                'name': 'thenBranch',\n                'type': 'func'\n            },\n            {\n                'tfName': 'else_branch',\n                'name': 'elseBranch',\n                'type': 'func'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'If',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'cond',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'end': 0,\n                'name': 'args',\n                'type': 'tensors'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'then_branch',\n                'name': 'thenBranch',\n                'type': 'func'\n            },\n            {\n                'tfName': 'else_branch',\n                'name': 'elseBranch',\n                'type': 'func'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'StatelessWhile',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'end': 0,\n                'name': 'args',\n                'type': 'tensors'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'cond',\n                'name': 'cond',\n                'type': 'func'\n            },\n            {\n                'tfName': 'body',\n                'name': 'body',\n                'type': 'func'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'While',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'end': 0,\n                'name': 'args',\n                'type': 'tensors'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'cond',\n                'name': 'cond',\n                'type': 'func'\n            },\n            {\n                'tfName': 'body',\n                'name': 'body',\n                'type': 'func'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListScatter',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensor',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'indices',\n                'type': 'number[]'\n            },\n            {\n                'start': 2,\n                'name': 'elementShape',\n                'type': 'shape'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'element_dtype',\n                'name': 'elementDType',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListScatterV2',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensor',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'indices',\n                'type': 'number[]'\n            },\n            {\n                'start': 2,\n                'name': 'elementShape',\n                'type': 'shape'\n            },\n            {\n                'start': 3,\n                'name': 'numElements',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'element_dtype',\n                'name': 'elementDType',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListGather',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorListId',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'indices',\n                'type': 'number[]'\n            },\n            {\n                'start': 2,\n                'name': 'elementShape',\n                'type': 'shape'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'element_dtype',\n                'name': 'elementDType',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListGetItem',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorListId',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'index',\n                'type': 'number'\n            },\n            {\n                'start': 2,\n                'name': 'elementShape',\n                'type': 'shape'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'element_dtype',\n                'name': 'elementDType',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListSetItem',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorListId',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'index',\n                'type': 'number'\n            },\n            {\n                'start': 2,\n                'name': 'tensor',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'element_dtype',\n                'name': 'elementDType',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListReserve',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'elementShape',\n                'type': 'shape'\n            },\n            {\n                'start': 1,\n                'name': 'numElements',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'element_dtype',\n                'name': 'elementDType',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListFromTensor',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensor',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'elementShape',\n                'type': 'shape'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'element_dtype',\n                'name': 'elementDType',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListStack',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorListId',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'elementShape',\n                'type': 'shape'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'element_dtype',\n                'name': 'elementDType',\n                'type': 'dtype'\n            },\n            {\n                'tfName': 'num_elements',\n                'name': 'numElements',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListSplit',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensor',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'elementShape',\n                'type': 'shape'\n            },\n            {\n                'start': 2,\n                'name': 'lengths',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'element_dtype',\n                'name': 'elementDType',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListConcat',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorListId',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'element_shape',\n                'name': 'elementShape',\n                'type': 'shape'\n            },\n            {\n                'tfName': 'element_dtype',\n                'name': 'elementDType',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListConcatV2',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorListId',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'element_shape',\n                'name': 'elementShape',\n                'type': 'shape'\n            },\n            {\n                'tfName': 'element_dtype',\n                'name': 'elementDType',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListPopBack',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorListId',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'elementShape',\n                'type': 'shape'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'element_dtype',\n                'name': 'elementDType',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListPushBack',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorListId',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'tensor',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'element_dtype',\n                'name': 'elementDType',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListLength',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorListId',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListResize',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorListId',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'size',\n                'type': 'number'\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'AvgPool',\n        'category': 'convolution',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'strides',\n                'name': 'strides',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'padding',\n                'name': 'pad',\n                'type': 'string'\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'notSupported': true\n            },\n            {\n                'tfName': 'ksize',\n                'name': 'kernelSize',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'MaxPool',\n        'category': 'convolution',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'strides',\n                'name': 'strides',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'padding',\n                'name': 'pad',\n                'type': 'string'\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'notSupported': true\n            },\n            {\n                'tfName': 'ksize',\n                'name': 'kernelSize',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'explicit_paddings',\n                'name': 'explicitPaddings',\n                'type': 'number[]',\n                'defaultValue': [],\n                'notSupported': true\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'MaxPoolWithArgmax',\n        'category': 'convolution',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'strides',\n                'name': 'strides',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'padding',\n                'name': 'pad',\n                'type': 'string'\n            },\n            {\n                'tfName': 'ksize',\n                'name': 'kernelSize',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'include_batch_in_index',\n                'name': 'includeBatchInIndex',\n                'type': 'bool'\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'AvgPool3D',\n        'category': 'convolution',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'strides',\n                'name': 'strides',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'padding',\n                'name': 'pad',\n                'type': 'string'\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'notSupported': true\n            },\n            {\n                'tfName': 'ksize',\n                'name': 'kernelSize',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'MaxPool3D',\n        'category': 'convolution',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'strides',\n                'name': 'strides',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'padding',\n                'name': 'pad',\n                'type': 'string'\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'notSupported': true\n            },\n            {\n                'tfName': 'ksize',\n                'name': 'kernelSize',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Conv1D',\n        'category': 'convolution',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'filter',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'stride',\n                'name': 'stride',\n                'type': 'number'\n            },\n            {\n                'tfName': 'padding',\n                'name': 'pad',\n                'type': 'string'\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'defaultValue': 'NWC'\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'dilation',\n                'name': 'dilation',\n                'type': 'number',\n                'defaultValue': 1\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Conv2D',\n        'category': 'convolution',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'filter',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'strides',\n                'name': 'strides',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'padding',\n                'name': 'pad',\n                'type': 'string'\n            },\n            {\n                'tfName': 'useCudnnOnGpu',\n                'name': 'useCudnnOnGpu',\n                'type': 'bool'\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'defaultValue': 'NHWC'\n            },\n            {\n                'tfName': 'explicit_paddings',\n                'name': 'explicitPaddings',\n                'type': 'number[]',\n                'defaultValue': []\n            },\n            {\n                'tfName': 'dilations',\n                'name': 'dilations',\n                'type': 'number[]'\n            }\n        ]\n    },\n    {\n        'tfOpName': '_FusedConv2D',\n        'category': 'convolution',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'filter',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'end': 0,\n                'name': 'args',\n                'type': 'tensors'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'num_args',\n                'name': 'numArgs',\n                'type': 'number'\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'strides',\n                'name': 'strides',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'padding',\n                'name': 'pad',\n                'type': 'string'\n            },\n            {\n                'tfName': 'explicit_paddings',\n                'name': 'explicitPaddings',\n                'type': 'number[]',\n                'defaultValue': []\n            },\n            {\n                'tfName': 'use_cudnn_on_gpu',\n                'name': 'useCudnnOnGpu',\n                'type': 'bool',\n                'defaultValue': true\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'defaultValue': 'NHWC'\n            },\n            {\n                'tfName': 'dilations',\n                'name': 'dilations',\n                'type': 'number[]',\n                'defaultValue': [\n                    1,\n                    1,\n                    1,\n                    1\n                ]\n            },\n            {\n                'tfName': 'fused_ops',\n                'name': 'fusedOps',\n                'type': 'string[]',\n                'defaultValue': []\n            },\n            {\n                'tfName': 'epsilon',\n                'name': 'epsilon',\n                'type': 'number',\n                'defaultValue': 0.0001\n            },\n            {\n                'tfName': 'leakyrelu_alpha',\n                'name': 'leakyreluAlpha',\n                'type': 'number',\n                'defaultValue': 0.2\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Conv2DBackpropInput',\n        'category': 'convolution',\n        'inputs': [\n            {\n                'start': 2,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'filter',\n                'type': 'tensor'\n            },\n            {\n                'start': 0,\n                'name': 'outputShape',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'strides',\n                'name': 'strides',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'padding',\n                'name': 'pad',\n                'type': 'string'\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'notSupported': true\n            },\n            {\n                'tfName': 'explicit_paddings',\n                'name': 'explicitPaddings',\n                'type': 'number[]',\n                'defaultValue': []\n            },\n            {\n                'tfName': 'dilations',\n                'name': 'dilations',\n                'type': 'number[]',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'DepthwiseConv2d',\n        'category': 'convolution',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'input',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'filter',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'strides',\n                'name': 'strides',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'padding',\n                'name': 'pad',\n                'type': 'string'\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'defaultValue': 'NHWC'\n            },\n            {\n                'tfName': 'explicit_paddings',\n                'name': 'explicitPaddings',\n                'type': 'number[]',\n                'defaultValue': []\n            },\n            {\n                'tfName': 'dilations',\n                'name': 'dilations',\n                'type': 'number[]'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'DepthwiseConv2dNative',\n        'category': 'convolution',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'input',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'filter',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'strides',\n                'name': 'strides',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'padding',\n                'name': 'pad',\n                'type': 'string'\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'defaultValue': 'NHWC'\n            },\n            {\n                'tfName': 'explicit_paddings',\n                'name': 'explicitPaddings',\n                'type': 'number[]',\n                'defaultValue': []\n            },\n            {\n                'tfName': 'dilations',\n                'name': 'dilations',\n                'type': 'number[]'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'FusedDepthwiseConv2dNative',\n        'category': 'convolution',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'filter',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'end': 0,\n                'name': 'args',\n                'type': 'tensors'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'num_args',\n                'name': 'numArgs',\n                'type': 'number'\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'strides',\n                'name': 'strides',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'padding',\n                'name': 'pad',\n                'type': 'string'\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'defaultValue': 'NHWC'\n            },\n            {\n                'tfName': 'dilations',\n                'name': 'dilations',\n                'type': 'number[]',\n                'defaultValue': [\n                    1,\n                    1,\n                    1,\n                    1\n                ]\n            },\n            {\n                'tfName': 'fused_ops',\n                'name': 'fusedOps',\n                'type': 'string[]',\n                'defaultValue': []\n            },\n            {\n                'tfName': 'explicit_paddings',\n                'name': 'explicitPaddings',\n                'type': 'number[]',\n                'defaultValue': []\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Conv3D',\n        'category': 'convolution',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'filter',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'strides',\n                'name': 'strides',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'padding',\n                'name': 'pad',\n                'type': 'string'\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'defaultValue': 'NHWC'\n            },\n            {\n                'tfName': 'dilations',\n                'name': 'dilations',\n                'type': 'number[]'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Dilation2D',\n        'category': 'convolution',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'filter',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'strides',\n                'name': 'strides',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'rates',\n                'name': 'dilations',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'padding',\n                'name': 'pad',\n                'type': 'string'\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'Fill',\n        'category': 'creation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'shape',\n                'type': 'number[]'\n            },\n            {\n                'start': 1,\n                'name': 'value',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LinSpace',\n        'category': 'creation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'start',\n                'type': 'number'\n            },\n            {\n                'start': 1,\n                'name': 'stop',\n                'type': 'number'\n            },\n            {\n                'start': 2,\n                'name': 'num',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'OneHot',\n        'category': 'creation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'indices',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'depth',\n                'type': 'number'\n            },\n            {\n                'start': 2,\n                'name': 'onValue',\n                'type': 'number',\n                'defaultValue': 1\n            },\n            {\n                'start': 3,\n                'name': 'offValue',\n                'type': 'number',\n                'defaultValue': 0\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'axis',\n                'name': 'axis',\n                'type': 'number',\n                'notSupported': true\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Ones',\n        'category': 'creation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'shape',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'OnesLike',\n        'category': 'creation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'dtype',\n                'name': 'dtype',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'RandomStandardNormal',\n        'category': 'creation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'shape',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'seed',\n                'name': 'seed',\n                'type': 'number',\n                'defaultValue': 0\n            },\n            {\n                'tfName': 'seed2',\n                'name': 'seed2',\n                'type': 'number',\n                'defaultValue': 0,\n                'notSupported': true\n            },\n            {\n                'tfName': 'dtype',\n                'name': 'dtype',\n                'type': 'dtype'\n            },\n            {\n                'tfName': 'T',\n                'name': 'T',\n                'type': 'number',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'RandomUniform',\n        'category': 'creation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'shape',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'minval',\n                'name': 'minval',\n                'type': 'number',\n                'defaultValue': 0\n            },\n            {\n                'tfName': 'maxval',\n                'name': 'maxval',\n                'type': 'number',\n                'defaultValue': 1\n            },\n            {\n                'tfName': 'dtype',\n                'name': 'dtype',\n                'type': 'dtype'\n            },\n            {\n                'tfName': 'seed',\n                'name': 'seed',\n                'type': 'number',\n                'defaultValue': 0\n            },\n            {\n                'tfName': 'seed2',\n                'name': 'seed2',\n                'type': 'number',\n                'defaultValue': 0,\n                'notSupported': true\n            },\n            {\n                'tfName': 'T',\n                'name': 'T',\n                'type': 'number',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'RandomUniformInt',\n        'category': 'creation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'shape',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'minval',\n                'name': 'minval',\n                'type': 'number'\n            },\n            {\n                'tfName': 'maxval',\n                'name': 'maxval',\n                'type': 'number'\n            },\n            {\n                'tfName': 'seed',\n                'name': 'seed',\n                'type': 'number',\n                'defaultValue': 0\n            },\n            {\n                'tfName': 'seed2',\n                'name': 'seed2',\n                'type': 'number',\n                'defaultValue': 0,\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Range',\n        'category': 'creation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'start',\n                'type': 'number'\n            },\n            {\n                'start': 1,\n                'name': 'stop',\n                'type': 'number'\n            },\n            {\n                'start': 2,\n                'name': 'step',\n                'type': 'number',\n                'defaultValue': 0\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'Tidx',\n                'name': 'dtype',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TruncatedNormal',\n        'category': 'creation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'shape',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'means',\n                'name': 'mean',\n                'type': 'number',\n                'defaultValue': 0\n            },\n            {\n                'tfName': 'stddev',\n                'name': 'stdDev',\n                'type': 'number',\n                'defaultValue': 1\n            },\n            {\n                'tfName': 'seed',\n                'name': 'seed',\n                'type': 'number'\n            },\n            {\n                'tfName': 'seed2',\n                'name': 'seed2',\n                'type': 'number',\n                'defaultValue': 0,\n                'notSupported': true\n            },\n            {\n                'tfName': 'dtype',\n                'name': 'dtype',\n                'type': 'dtype'\n            },\n            {\n                'tfName': 'T',\n                'name': 'T',\n                'type': 'number',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Zeros',\n        'category': 'creation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'shape',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'ZerosLike',\n        'category': 'creation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Multinomial',\n        'category': 'creation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'logits',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'numSamples',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'seed',\n                'name': 'seed',\n                'type': 'number'\n            },\n            {\n                'tfName': 'seed2',\n                'name': 'seed2',\n                'type': 'number'\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype'\n            },\n            {\n                'tfName': 'output_dtype',\n                'name': 'output_dtype',\n                'type': 'dtype'\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'NonMaxSuppressionV2',\n        'category': 'dynamic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'boxes',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'scores',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'maxOutputSize',\n                'type': 'number'\n            },\n            {\n                'start': 3,\n                'name': 'iouThreshold',\n                'type': 'number'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'NonMaxSuppressionV3',\n        'category': 'dynamic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'boxes',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'scores',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'maxOutputSize',\n                'type': 'number'\n            },\n            {\n                'start': 3,\n                'name': 'iouThreshold',\n                'type': 'number'\n            },\n            {\n                'start': 4,\n                'name': 'scoreThreshold',\n                'type': 'number'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'NonMaxSuppressionV4',\n        'category': 'dynamic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'boxes',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'scores',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'maxOutputSize',\n                'type': 'number'\n            },\n            {\n                'start': 3,\n                'name': 'iouThreshold',\n                'type': 'number'\n            },\n            {\n                'start': 4,\n                'name': 'scoreThreshold',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'T_threshold',\n                'name': 'threshold',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'pad_to_max_output_size',\n                'name': 'padToMaxOutputSize',\n                'type': 'bool'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'NonMaxSuppressionV5',\n        'category': 'dynamic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'boxes',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'scores',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'maxOutputSize',\n                'type': 'number'\n            },\n            {\n                'start': 3,\n                'name': 'iouThreshold',\n                'type': 'number'\n            },\n            {\n                'start': 4,\n                'name': 'scoreThreshold',\n                'type': 'number'\n            },\n            {\n                'start': 5,\n                'name': 'softNmsSigma',\n                'type': 'number'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Where',\n        'category': 'dynamic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'condition',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'ListDiff',\n        'category': 'dynamic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'y',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'LowerBound',\n        'category': 'evaluation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'sortedSequence',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'values',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TopKV2',\n        'category': 'evaluation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'k',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'sorted',\n                'name': 'sorted',\n                'type': 'bool'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'UpperBound',\n        'category': 'evaluation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'sortedSequence',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'values',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Unique',\n        'category': 'evaluation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'UniqueV2',\n        'category': 'evaluation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'axis',\n                'type': 'number'\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZhbHVhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29udmVydGVyL3NyYy9vcGVyYXRpb25zL29wX2xpc3QvZXZhbHVhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFJSCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQWU7SUFDOUI7UUFDRSxVQUFVLEVBQUUsWUFBWTtRQUN4QixVQUFVLEVBQUUsWUFBWTtRQUN4QixRQUFRLEVBQUU7WUFDUjtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsZ0JBQWdCO2dCQUN4QixNQUFNLEVBQUUsUUFBUTthQUNqQjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxRQUFRO2dCQUNoQixNQUFNLEVBQUUsUUFBUTthQUNqQjtTQUNGO0tBQ0Y7SUFDRDtRQUNFLFVBQVUsRUFBRSxRQUFRO1FBQ3BCLFVBQVUsRUFBRSxZQUFZO1FBQ3hCLFFBQVEsRUFBRTtZQUNSO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxHQUFHO2dCQUNYLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtRQUNELE9BQU8sRUFBRTtZQUNQO2dCQUNFLFFBQVEsRUFBRSxRQUFRO2dCQUNsQixNQUFNLEVBQUUsUUFBUTtnQkFDaEIsTUFBTSxFQUFFLE1BQU07YUFDZjtTQUNGO0tBQ0Y7SUFDRDtRQUNFLFVBQVUsRUFBRSxZQUFZO1FBQ3hCLFVBQVUsRUFBRSxZQUFZO1FBQ3hCLFFBQVEsRUFBRTtZQUNSO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxnQkFBZ0I7Z0JBQ3hCLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLFFBQVE7Z0JBQ2hCLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1NBQ0Y7S0FDRjtJQUNEO1FBQ0UsVUFBVSxFQUFFLFFBQVE7UUFDcEIsVUFBVSxFQUFFLFlBQVk7UUFDeEIsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtLQUNGO0lBQ0Q7UUFDRSxVQUFVLEVBQUUsVUFBVTtRQUN0QixVQUFVLEVBQUUsWUFBWTtRQUN4QixRQUFRLEVBQUU7WUFDUjtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsR0FBRztnQkFDWCxNQUFNLEVBQUUsUUFBUTthQUNqQjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxNQUFNO2dCQUNkLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1NBQ0Y7S0FDRjtDQUNGLENBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIzIEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtPcE1hcHBlcn0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgY29uc3QganNvbjogT3BNYXBwZXJbXSA9IFtcbiAge1xuICAgICd0Zk9wTmFtZSc6ICdMb3dlckJvdW5kJyxcbiAgICAnY2F0ZWdvcnknOiAnZXZhbHVhdGlvbicsXG4gICAgJ2lucHV0cyc6IFtcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMCxcbiAgICAgICAgJ25hbWUnOiAnc29ydGVkU2VxdWVuY2UnLFxuICAgICAgICAndHlwZSc6ICd0ZW5zb3InXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAxLFxuICAgICAgICAnbmFtZSc6ICd2YWx1ZXMnLFxuICAgICAgICAndHlwZSc6ICd0ZW5zb3InXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgJ3RmT3BOYW1lJzogJ1RvcEtWMicsXG4gICAgJ2NhdGVnb3J5JzogJ2V2YWx1YXRpb24nLFxuICAgICdpbnB1dHMnOiBbXG4gICAgICB7XG4gICAgICAgICdzdGFydCc6IDAsXG4gICAgICAgICduYW1lJzogJ3gnLFxuICAgICAgICAndHlwZSc6ICd0ZW5zb3InXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAxLFxuICAgICAgICAnbmFtZSc6ICdrJyxcbiAgICAgICAgJ3R5cGUnOiAnbnVtYmVyJ1xuICAgICAgfVxuICAgIF0sXG4gICAgJ2F0dHJzJzogW1xuICAgICAge1xuICAgICAgICAndGZOYW1lJzogJ3NvcnRlZCcsXG4gICAgICAgICduYW1lJzogJ3NvcnRlZCcsXG4gICAgICAgICd0eXBlJzogJ2Jvb2wnXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgJ3RmT3BOYW1lJzogJ1VwcGVyQm91bmQnLFxuICAgICdjYXRlZ29yeSc6ICdldmFsdWF0aW9uJyxcbiAgICAnaW5wdXRzJzogW1xuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAwLFxuICAgICAgICAnbmFtZSc6ICdzb3J0ZWRTZXF1ZW5jZScsXG4gICAgICAgICd0eXBlJzogJ3RlbnNvcidcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICdzdGFydCc6IDEsXG4gICAgICAgICduYW1lJzogJ3ZhbHVlcycsXG4gICAgICAgICd0eXBlJzogJ3RlbnNvcidcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICAndGZPcE5hbWUnOiAnVW5pcXVlJyxcbiAgICAnY2F0ZWdvcnknOiAnZXZhbHVhdGlvbicsXG4gICAgJ2lucHV0cyc6IFtcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMCxcbiAgICAgICAgJ25hbWUnOiAneCcsXG4gICAgICAgICd0eXBlJzogJ3RlbnNvcidcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICAndGZPcE5hbWUnOiAnVW5pcXVlVjInLFxuICAgICdjYXRlZ29yeSc6ICdldmFsdWF0aW9uJyxcbiAgICAnaW5wdXRzJzogW1xuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAwLFxuICAgICAgICAnbmFtZSc6ICd4JyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMSxcbiAgICAgICAgJ25hbWUnOiAnYXhpcycsXG4gICAgICAgICd0eXBlJzogJ251bWJlcidcbiAgICAgIH1cbiAgICBdXG4gIH1cbl1cbjtcbiJdfQ==","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'PlaceholderWithDefault',\n        'category': 'graph',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'default',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'shape',\n                'name': 'shape',\n                'type': 'shape'\n            },\n            {\n                'tfName': 'dtype',\n                'name': 'dtype',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Placeholder',\n        'category': 'graph',\n        'attrs': [\n            {\n                'tfName': 'shape',\n                'name': 'shape',\n                'type': 'shape'\n            },\n            {\n                'tfName': 'dtype',\n                'name': 'dtype',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Const',\n        'category': 'graph'\n    },\n    {\n        'tfOpName': 'Identity',\n        'category': 'graph',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'IdentityN',\n        'category': 'graph',\n        'inputs': [\n            {\n                'start': 0,\n                'end': 0,\n                'name': 'x',\n                'type': 'tensors'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Snapshot',\n        'category': 'graph',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Rank',\n        'category': 'graph',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Size',\n        'category': 'graph',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Shape',\n        'category': 'graph',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'ShapeN',\n        'category': 'graph',\n        'inputs': [\n            {\n                'start': 0,\n                'end': 0,\n                'name': 'x',\n                'type': 'tensors'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Print',\n        'category': 'graph',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'data',\n                'type': 'tensors'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'message',\n                'name': 'message',\n                'type': 'string'\n            },\n            {\n                'tfName': 'first_n',\n                'name': 'firstN',\n                'type': 'number',\n                'notSupported': true\n            },\n            {\n                'tfName': 'summarize',\n                'name': 'summarize',\n                'type': 'number',\n                'defaultValue': 3\n            }\n        ]\n    },\n    {\n        'tfOpName': 'NoOp',\n        'category': 'graph',\n        'inputs': []\n    },\n    {\n        'tfOpName': 'StopGradient',\n        'category': 'graph',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'FakeQuantWithMinMaxVars',\n        'category': 'graph',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'min',\n                'name': 'min',\n                'type': 'number'\n            },\n            {\n                'tfName': 'max',\n                'name': 'max',\n                'type': 'number'\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'HashTable',\n        'category': 'hash_table',\n        'inputs': [],\n        'attrs': [\n            {\n                'tfName': 'shared_name',\n                'name': 'sharedName',\n                'type': 'string'\n            },\n            {\n                'tfName': 'use_node_name_sharing',\n                'name': 'useNodeNameSharing',\n                'type': 'bool'\n            },\n            {\n                'tfName': 'key_dtype',\n                'name': 'keyDType',\n                'type': 'dtype'\n            },\n            {\n                'tfName': 'value_dtype',\n                'name': 'valueDType',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'HashTableV2',\n        'category': 'hash_table',\n        'inputs': [],\n        'attrs': [\n            {\n                'tfName': 'shared_name',\n                'name': 'sharedName',\n                'type': 'string'\n            },\n            {\n                'tfName': 'use_node_name_sharing',\n                'name': 'useNodeNameSharing',\n                'type': 'bool'\n            },\n            {\n                'tfName': 'key_dtype',\n                'name': 'keyDType',\n                'type': 'dtype'\n            },\n            {\n                'tfName': 'value_dtype',\n                'name': 'valueDType',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LookupTableImport',\n        'category': 'hash_table',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tableHandle',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'keys',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'values',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'Tin',\n                'name': 'tIn',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'Tout',\n                'name': 'tOut',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LookupTableImportV2',\n        'category': 'hash_table',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tableHandle',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'keys',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'values',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'Tin',\n                'name': 'tIn',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'Tout',\n                'name': 'tOut',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LookupTableFind',\n        'category': 'hash_table',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tableHandle',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'keys',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'defaultValue',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'Tin',\n                'name': 'tIn',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'Tout',\n                'name': 'tOut',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LookupTableFindV2',\n        'category': 'hash_table',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tableHandle',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'keys',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'defaultValue',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'Tin',\n                'name': 'tIn',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'Tout',\n                'name': 'tOut',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LookupTableSize',\n        'category': 'hash_table',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tableHandle',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LookupTableSizeV2',\n        'category': 'hash_table',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tableHandle',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'InitializeTable',\n        'category': 'hash_table',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tableHandle',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'keys',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'values',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'InitializeTableV2',\n        'category': 'hash_table',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tableHandle',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'keys',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'values',\n                'type': 'tensor'\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'ResizeBilinear',\n        'category': 'image',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'images',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'size',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'align_corners',\n                'name': 'alignCorners',\n                'type': 'bool'\n            },\n            {\n                'tfName': 'half_pixel_centers',\n                'name': 'halfPixelCenters',\n                'type': 'bool'\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'ResizeNearestNeighbor',\n        'category': 'image',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'images',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'size',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'align_corners',\n                'name': 'alignCorners',\n                'type': 'bool'\n            },\n            {\n                'tfName': 'half_pixel_centers',\n                'name': 'halfPixelCenters',\n                'type': 'bool'\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'CropAndResize',\n        'category': 'image',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'image',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'boxes',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'boxInd',\n                'type': 'tensor'\n            },\n            {\n                'start': 3,\n                'name': 'cropSize',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'method',\n                'name': 'method',\n                'type': 'string'\n            },\n            {\n                'tfName': 'extrapolation_value',\n                'name': 'extrapolationValue',\n                'type': 'number'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'ImageProjectiveTransformV3',\n        'category': 'image',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'images',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'transforms',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'outputShape',\n                'type': 'number[]'\n            },\n            {\n                'start': 3,\n                'name': 'fillValue',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'interpolation',\n                'name': 'interpolation',\n                'type': 'string'\n            },\n            {\n                'tfName': 'fill_mode',\n                'name': 'fillMode',\n                'type': 'string'\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvbnZlcnRlci9zcmMvb3BlcmF0aW9ucy9vcF9saXN0L2ltYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUlILE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBZTtJQUM5QjtRQUNFLFVBQVUsRUFBRSxnQkFBZ0I7UUFDNUIsVUFBVSxFQUFFLE9BQU87UUFDbkIsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLFFBQVE7Z0JBQ2hCLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsTUFBTSxFQUFFLFVBQVU7YUFDbkI7U0FDRjtRQUNELE9BQU8sRUFBRTtZQUNQO2dCQUNFLFFBQVEsRUFBRSxlQUFlO2dCQUN6QixNQUFNLEVBQUUsY0FBYztnQkFDdEIsTUFBTSxFQUFFLE1BQU07YUFDZjtZQUNEO2dCQUNFLFFBQVEsRUFBRSxvQkFBb0I7Z0JBQzlCLE1BQU0sRUFBRSxrQkFBa0I7Z0JBQzFCLE1BQU0sRUFBRSxNQUFNO2FBQ2Y7WUFDRDtnQkFDRSxRQUFRLEVBQUUsR0FBRztnQkFDYixNQUFNLEVBQUUsT0FBTztnQkFDZixNQUFNLEVBQUUsT0FBTztnQkFDZixjQUFjLEVBQUUsSUFBSTthQUNyQjtTQUNGO0tBQ0Y7SUFDRDtRQUNFLFVBQVUsRUFBRSx1QkFBdUI7UUFDbkMsVUFBVSxFQUFFLE9BQU87UUFDbkIsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLFFBQVE7Z0JBQ2hCLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsTUFBTSxFQUFFLFVBQVU7YUFDbkI7U0FDRjtRQUNELE9BQU8sRUFBRTtZQUNQO2dCQUNFLFFBQVEsRUFBRSxlQUFlO2dCQUN6QixNQUFNLEVBQUUsY0FBYztnQkFDdEIsTUFBTSxFQUFFLE1BQU07YUFDZjtZQUNEO2dCQUNFLFFBQVEsRUFBRSxvQkFBb0I7Z0JBQzlCLE1BQU0sRUFBRSxrQkFBa0I7Z0JBQzFCLE1BQU0sRUFBRSxNQUFNO2FBQ2Y7WUFDRDtnQkFDRSxRQUFRLEVBQUUsR0FBRztnQkFDYixNQUFNLEVBQUUsT0FBTztnQkFDZixNQUFNLEVBQUUsT0FBTztnQkFDZixjQUFjLEVBQUUsSUFBSTthQUNyQjtTQUNGO0tBQ0Y7SUFDRDtRQUNFLFVBQVUsRUFBRSxlQUFlO1FBQzNCLFVBQVUsRUFBRSxPQUFPO1FBQ25CLFFBQVEsRUFBRTtZQUNSO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxPQUFPO2dCQUNmLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLE9BQU87Z0JBQ2YsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsUUFBUTtnQkFDaEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsVUFBVTtnQkFDbEIsTUFBTSxFQUFFLFVBQVU7YUFDbkI7U0FDRjtRQUNELE9BQU8sRUFBRTtZQUNQO2dCQUNFLFFBQVEsRUFBRSxRQUFRO2dCQUNsQixNQUFNLEVBQUUsUUFBUTtnQkFDaEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxRQUFRLEVBQUUscUJBQXFCO2dCQUMvQixNQUFNLEVBQUUsb0JBQW9CO2dCQUM1QixNQUFNLEVBQUUsUUFBUTthQUNqQjtTQUNGO0tBQ0Y7SUFDRDtRQUNFLFVBQVUsRUFBRSw0QkFBNEI7UUFDeEMsVUFBVSxFQUFFLE9BQU87UUFDbkIsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLFFBQVE7Z0JBQ2hCLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLFlBQVk7Z0JBQ3BCLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLGFBQWE7Z0JBQ3JCLE1BQU0sRUFBRSxVQUFVO2FBQ25CO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLFdBQVc7Z0JBQ25CLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1NBQ0Y7UUFDRCxPQUFPLEVBQUU7WUFDUDtnQkFDRSxRQUFRLEVBQUUsZUFBZTtnQkFDekIsTUFBTSxFQUFFLGVBQWU7Z0JBQ3ZCLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLE1BQU0sRUFBRSxVQUFVO2dCQUNsQixNQUFNLEVBQUUsUUFBUTthQUNqQjtTQUNGO0tBQ0Y7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMyBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7T3BNYXBwZXJ9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IGpzb246IE9wTWFwcGVyW10gPSBbXG4gIHtcbiAgICAndGZPcE5hbWUnOiAnUmVzaXplQmlsaW5lYXInLFxuICAgICdjYXRlZ29yeSc6ICdpbWFnZScsXG4gICAgJ2lucHV0cyc6IFtcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMCxcbiAgICAgICAgJ25hbWUnOiAnaW1hZ2VzJyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMSxcbiAgICAgICAgJ25hbWUnOiAnc2l6ZScsXG4gICAgICAgICd0eXBlJzogJ251bWJlcltdJ1xuICAgICAgfVxuICAgIF0sXG4gICAgJ2F0dHJzJzogW1xuICAgICAge1xuICAgICAgICAndGZOYW1lJzogJ2FsaWduX2Nvcm5lcnMnLFxuICAgICAgICAnbmFtZSc6ICdhbGlnbkNvcm5lcnMnLFxuICAgICAgICAndHlwZSc6ICdib29sJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ3RmTmFtZSc6ICdoYWxmX3BpeGVsX2NlbnRlcnMnLFxuICAgICAgICAnbmFtZSc6ICdoYWxmUGl4ZWxDZW50ZXJzJyxcbiAgICAgICAgJ3R5cGUnOiAnYm9vbCdcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICd0Zk5hbWUnOiAnVCcsXG4gICAgICAgICduYW1lJzogJ2R0eXBlJyxcbiAgICAgICAgJ3R5cGUnOiAnZHR5cGUnLFxuICAgICAgICAnbm90U3VwcG9ydGVkJzogdHJ1ZVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgICd0Zk9wTmFtZSc6ICdSZXNpemVOZWFyZXN0TmVpZ2hib3InLFxuICAgICdjYXRlZ29yeSc6ICdpbWFnZScsXG4gICAgJ2lucHV0cyc6IFtcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMCxcbiAgICAgICAgJ25hbWUnOiAnaW1hZ2VzJyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMSxcbiAgICAgICAgJ25hbWUnOiAnc2l6ZScsXG4gICAgICAgICd0eXBlJzogJ251bWJlcltdJ1xuICAgICAgfVxuICAgIF0sXG4gICAgJ2F0dHJzJzogW1xuICAgICAge1xuICAgICAgICAndGZOYW1lJzogJ2FsaWduX2Nvcm5lcnMnLFxuICAgICAgICAnbmFtZSc6ICdhbGlnbkNvcm5lcnMnLFxuICAgICAgICAndHlwZSc6ICdib29sJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ3RmTmFtZSc6ICdoYWxmX3BpeGVsX2NlbnRlcnMnLFxuICAgICAgICAnbmFtZSc6ICdoYWxmUGl4ZWxDZW50ZXJzJyxcbiAgICAgICAgJ3R5cGUnOiAnYm9vbCdcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICd0Zk5hbWUnOiAnVCcsXG4gICAgICAgICduYW1lJzogJ2R0eXBlJyxcbiAgICAgICAgJ3R5cGUnOiAnZHR5cGUnLFxuICAgICAgICAnbm90U3VwcG9ydGVkJzogdHJ1ZVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgICd0Zk9wTmFtZSc6ICdDcm9wQW5kUmVzaXplJyxcbiAgICAnY2F0ZWdvcnknOiAnaW1hZ2UnLFxuICAgICdpbnB1dHMnOiBbXG4gICAgICB7XG4gICAgICAgICdzdGFydCc6IDAsXG4gICAgICAgICduYW1lJzogJ2ltYWdlJyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMSxcbiAgICAgICAgJ25hbWUnOiAnYm94ZXMnLFxuICAgICAgICAndHlwZSc6ICd0ZW5zb3InXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAyLFxuICAgICAgICAnbmFtZSc6ICdib3hJbmQnLFxuICAgICAgICAndHlwZSc6ICd0ZW5zb3InXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAzLFxuICAgICAgICAnbmFtZSc6ICdjcm9wU2l6ZScsXG4gICAgICAgICd0eXBlJzogJ251bWJlcltdJ1xuICAgICAgfVxuICAgIF0sXG4gICAgJ2F0dHJzJzogW1xuICAgICAge1xuICAgICAgICAndGZOYW1lJzogJ21ldGhvZCcsXG4gICAgICAgICduYW1lJzogJ21ldGhvZCcsXG4gICAgICAgICd0eXBlJzogJ3N0cmluZydcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICd0Zk5hbWUnOiAnZXh0cmFwb2xhdGlvbl92YWx1ZScsXG4gICAgICAgICduYW1lJzogJ2V4dHJhcG9sYXRpb25WYWx1ZScsXG4gICAgICAgICd0eXBlJzogJ251bWJlcidcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICAndGZPcE5hbWUnOiAnSW1hZ2VQcm9qZWN0aXZlVHJhbnNmb3JtVjMnLFxuICAgICdjYXRlZ29yeSc6ICdpbWFnZScsXG4gICAgJ2lucHV0cyc6IFtcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMCxcbiAgICAgICAgJ25hbWUnOiAnaW1hZ2VzJyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMSxcbiAgICAgICAgJ25hbWUnOiAndHJhbnNmb3JtcycsXG4gICAgICAgICd0eXBlJzogJ3RlbnNvcidcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICdzdGFydCc6IDIsXG4gICAgICAgICduYW1lJzogJ291dHB1dFNoYXBlJyxcbiAgICAgICAgJ3R5cGUnOiAnbnVtYmVyW10nXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAzLFxuICAgICAgICAnbmFtZSc6ICdmaWxsVmFsdWUnLFxuICAgICAgICAndHlwZSc6ICdudW1iZXInXG4gICAgICB9XG4gICAgXSxcbiAgICAnYXR0cnMnOiBbXG4gICAgICB7XG4gICAgICAgICd0Zk5hbWUnOiAnaW50ZXJwb2xhdGlvbicsXG4gICAgICAgICduYW1lJzogJ2ludGVycG9sYXRpb24nLFxuICAgICAgICAndHlwZSc6ICdzdHJpbmcnXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAndGZOYW1lJzogJ2ZpbGxfbW9kZScsXG4gICAgICAgICduYW1lJzogJ2ZpbGxNb2RlJyxcbiAgICAgICAgJ3R5cGUnOiAnc3RyaW5nJ1xuICAgICAgfVxuICAgIF1cbiAgfVxuXTtcbiJdfQ==","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'Equal',\n        'category': 'logical',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'NotEqual',\n        'category': 'logical',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Greater',\n        'category': 'logical',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'GreaterEqual',\n        'category': 'logical',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Less',\n        'category': 'logical',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LessEqual',\n        'category': 'logical',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LogicalAnd',\n        'category': 'logical',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LogicalNot',\n        'category': 'logical',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LogicalOr',\n        'category': 'logical',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Select',\n        'category': 'logical',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'condition',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'SelectV2',\n        'category': 'logical',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'condition',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'BitwiseAnd',\n        'category': 'logical',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'y',\n                'type': 'tensor'\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': '_FusedMatMul',\n        'category': 'matrices',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'end': 0,\n                'name': 'args',\n                'type': 'tensors'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'num_args',\n                'name': 'numArgs',\n                'type': 'number'\n            },\n            {\n                'tfName': 'fused_ops',\n                'name': 'fusedOps',\n                'type': 'string[]',\n                'defaultValue': []\n            },\n            {\n                'tfName': 'epsilon',\n                'name': 'epsilon',\n                'type': 'number',\n                'defaultValue': 0.0001\n            },\n            {\n                'tfName': 'transpose_a',\n                'name': 'transposeA',\n                'type': 'bool',\n                'defaultValue': false\n            },\n            {\n                'tfName': 'transpose_b',\n                'name': 'transposeB',\n                'type': 'bool',\n                'defaultValue': false\n            },\n            {\n                'tfName': 'leakyrelu_alpha',\n                'name': 'leakyreluAlpha',\n                'type': 'number',\n                'defaultValue': 0.2\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'MatMul',\n        'category': 'matrices',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'transpose_a',\n                'name': 'transposeA',\n                'type': 'bool',\n                'defaultValue': false\n            },\n            {\n                'tfName': 'transpose_b',\n                'name': 'transposeB',\n                'type': 'bool',\n                'defaultValue': false\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'BatchMatMul',\n        'category': 'matrices',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'adj_x',\n                'name': 'transposeA',\n                'type': 'bool',\n                'defaultValue': false\n            },\n            {\n                'tfName': 'adj_y',\n                'name': 'transposeB',\n                'type': 'bool',\n                'defaultValue': false\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'BatchMatMulV2',\n        'category': 'matrices',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'adj_x',\n                'name': 'transposeA',\n                'type': 'bool',\n                'defaultValue': false\n            },\n            {\n                'tfName': 'adj_y',\n                'name': 'transposeB',\n                'type': 'bool',\n                'defaultValue': false\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Transpose',\n        'category': 'matrices',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'perm',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Einsum',\n        'category': 'matrices',\n        'inputs': [\n            {\n                'start': 0,\n                'end': 0,\n                'name': 'tensors',\n                'type': 'tensors'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'equation',\n                'name': 'equation',\n                'type': 'string'\n            },\n            {\n                'tfName': 'N',\n                'name': 'n',\n                'type': 'number',\n                'defaultValue': 2\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'MatrixBandPart',\n        'category': 'matrices',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'numLower',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'numUpper',\n                'type': 'tensor'\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'EuclideanNorm',\n        'category': 'normalization',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'axis',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'keep_dims',\n                'name': 'keepDims',\n                'type': 'bool',\n                'defaultValue': false\n            }\n        ]\n    },\n    {\n        'tfOpName': 'FusedBatchNorm',\n        'category': 'normalization',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'scale',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'offset',\n                'type': 'tensor'\n            },\n            {\n                'start': 3,\n                'name': 'mean',\n                'type': 'tensor'\n            },\n            {\n                'start': 4,\n                'name': 'variance',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'epsilon',\n                'name': 'epsilon',\n                'type': 'number',\n                'defaultValue': 0.001\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'FusedBatchNormV2',\n        'category': 'normalization',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'scale',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'offset',\n                'type': 'tensor'\n            },\n            {\n                'start': 3,\n                'name': 'mean',\n                'type': 'tensor'\n            },\n            {\n                'start': 4,\n                'name': 'variance',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'epsilon',\n                'name': 'epsilon',\n                'type': 'number',\n                'defaultValue': 0.001\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'FusedBatchNormV3',\n        'category': 'normalization',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'scale',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'offset',\n                'type': 'tensor'\n            },\n            {\n                'start': 3,\n                'name': 'mean',\n                'type': 'tensor'\n            },\n            {\n                'start': 4,\n                'name': 'variance',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'epsilon',\n                'name': 'epsilon',\n                'type': 'number',\n                'defaultValue': 0.001\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LRN',\n        'category': 'normalization',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'depth_radius',\n                'name': 'radius',\n                'type': 'number',\n                'defaultValue': 5\n            },\n            {\n                'tfName': 'bias',\n                'name': 'bias',\n                'type': 'number',\n                'defaultValue': 1\n            },\n            {\n                'tfName': 'alpha',\n                'name': 'alpha',\n                'type': 'number',\n                'defaultValue': 1\n            },\n            {\n                'tfName': 'beta',\n                'name': 'beta',\n                'type': 'number',\n                'defaultValue': 0.5\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Softmax',\n        'category': 'normalization',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LogSoftmax',\n        'category': 'normalization',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'Bincount',\n        'category': 'reduction',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'size',\n                'type': 'number'\n            },\n            {\n                'start': 2,\n                'name': 'weights',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'DenseBincount',\n        'category': 'reduction',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'size',\n                'type': 'number'\n            },\n            {\n                'start': 2,\n                'name': 'weights',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'binary_output',\n                'name': 'binaryOutput',\n                'type': 'bool'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Max',\n        'category': 'reduction',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'axis',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'keep_dims',\n                'name': 'keepDims',\n                'type': 'bool'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Mean',\n        'category': 'reduction',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'axis',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'keep_dims',\n                'name': 'keepDims',\n                'type': 'bool'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Min',\n        'category': 'reduction',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'axis',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'keep_dims',\n                'name': 'keepDims',\n                'type': 'bool'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Sum',\n        'category': 'reduction',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'axis',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'keep_dims',\n                'name': 'keepDims',\n                'type': 'bool'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'All',\n        'category': 'reduction',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'axis',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'keep_dims',\n                'name': 'keepDims',\n                'type': 'bool'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Any',\n        'category': 'reduction',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'axis',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'keep_dims',\n                'name': 'keepDims',\n                'type': 'bool'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'ArgMax',\n        'category': 'reduction',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'axis',\n                'type': 'number'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'ArgMin',\n        'category': 'reduction',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'axis',\n                'type': 'number'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Prod',\n        'category': 'reduction',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'axis',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'keep_dims',\n                'name': 'keepDims',\n                'type': 'bool'\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Cumprod',\n        'category': 'reduction',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'axis',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'exclusive',\n                'name': 'exclusive',\n                'type': 'bool'\n            },\n            {\n                'tfName': 'reverse',\n                'name': 'reverse',\n                'type': 'bool'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Cumsum',\n        'category': 'reduction',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'axis',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'exclusive',\n                'name': 'exclusive',\n                'type': 'bool'\n            },\n            {\n                'tfName': 'reverse',\n                'name': 'reverse',\n                'type': 'bool'\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'ConcatV2',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'end': -1,\n                'name': 'tensors',\n                'type': 'tensors'\n            },\n            {\n                'start': -1,\n                'name': 'axis',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'N',\n                'name': 'n',\n                'type': 'number',\n                'defaultValue': 2\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Concat',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 1,\n                'end': 0,\n                'name': 'tensors',\n                'type': 'tensors'\n            },\n            {\n                'start': 0,\n                'name': 'axis',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'N',\n                'name': 'n',\n                'type': 'number',\n                'defaultValue': 2\n            }\n        ]\n    },\n    {\n        'tfOpName': 'GatherV2',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'indices',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'axis',\n                'type': 'number',\n                'defaultValue': 0\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'batch_dims',\n                'name': 'batchDims',\n                'type': 'number',\n                'defaultValue': 0\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Gather',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'indices',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'validate_indices',\n                'name': 'validateIndices',\n                'type': 'bool',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Reverse',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'dims',\n                'type': 'bool[]'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'ReverseV2',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'axis',\n                'type': 'number[]'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Slice',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'begin',\n                'type': 'number[]'\n            },\n            {\n                'start': 2,\n                'name': 'size',\n                'type': 'number[]'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'StridedSlice',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'begin',\n                'type': 'number[]'\n            },\n            {\n                'start': 2,\n                'name': 'end',\n                'type': 'number[]'\n            },\n            {\n                'start': 3,\n                'name': 'strides',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'begin_mask',\n                'name': 'beginMask',\n                'type': 'number',\n                'defaultValue': 0\n            },\n            {\n                'tfName': 'end_mask',\n                'name': 'endMask',\n                'type': 'number',\n                'defaultValue': 0\n            },\n            {\n                'tfName': 'new_axis_mask',\n                'name': 'newAxisMask',\n                'type': 'number',\n                'defaultValue': 0\n            },\n            {\n                'tfName': 'ellipsis_mask',\n                'name': 'ellipsisMask',\n                'type': 'number',\n                'defaultValue': 0\n            },\n            {\n                'tfName': 'shrink_axis_mask',\n                'name': 'shrinkAxisMask',\n                'type': 'number',\n                'defaultValue': 0\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Pack',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'end': 0,\n                'name': 'tensors',\n                'type': 'tensors'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'axis',\n                'name': 'axis',\n                'type': 'number',\n                'defaultValue': 0\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Unpack',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensor',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'axis',\n                'name': 'axis',\n                'type': 'number',\n                'defaultValue': 0\n            },\n            {\n                'tfName': 'num',\n                'name': 'num',\n                'type': 'number',\n                'defaultValue': 0,\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Tile',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'reps',\n                'type': 'number[]'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Split',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'axis',\n                'type': 'number',\n                'defaultValue': 0\n            },\n            {\n                'start': 1,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'num_split',\n                'name': 'numOrSizeSplits',\n                'type': 'number',\n                'defaultValue': 1\n            }\n        ]\n    },\n    {\n        'tfOpName': 'SplitV',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'numOrSizeSplits',\n                'type': 'number[]'\n            },\n            {\n                'start': 2,\n                'name': 'axis',\n                'type': 'number',\n                'defaultValue': 0\n            }\n        ]\n    },\n    {\n        'tfOpName': 'ScatterNd',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'indices',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'values',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'shape',\n                'type': 'number[]'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'GatherNd',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'indices',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'SparseToDense',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'sparseIndices',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'outputShape',\n                'type': 'number[]'\n            },\n            {\n                'start': 2,\n                'name': 'sparseValues',\n                'type': 'tensor'\n            },\n            {\n                'start': 3,\n                'name': 'defaultValue',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'validate_indices',\n                'name': 'validateIndices',\n                'type': 'bool',\n                'defaultValue': false,\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorScatterUpdate',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensor',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'indices',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'values',\n                'type': 'tensor'\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'SparseFillEmptyRows',\n        'category': 'sparse',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'indices',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'values',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'denseShape',\n                'type': 'tensor'\n            },\n            {\n                'start': 3,\n                'name': 'defaultValue',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'SparseReshape',\n        'category': 'sparse',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'inputIndices',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'inputShape',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'newShape',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'SparseSegmentMean',\n        'category': 'sparse',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'data',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'indices',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'segmentIds',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'SparseSegmentSum',\n        'category': 'sparse',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'data',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'indices',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'segmentIds',\n                'type': 'tensor'\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BhcnNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1jb252ZXJ0ZXIvc3JjL29wZXJhdGlvbnMvb3BfbGlzdC9zcGFyc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBSUgsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFlO0lBQzlCO1FBQ0UsVUFBVSxFQUFFLHFCQUFxQjtRQUNqQyxVQUFVLEVBQUUsUUFBUTtRQUNwQixRQUFRLEVBQUU7WUFDUjtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsU0FBUztnQkFDakIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsUUFBUTtnQkFDaEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsWUFBWTtnQkFDcEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsY0FBYztnQkFDdEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtLQUNGO0lBQ0Q7UUFDRSxVQUFVLEVBQUUsZUFBZTtRQUMzQixVQUFVLEVBQUUsUUFBUTtRQUNwQixRQUFRLEVBQUU7WUFDUjtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsY0FBYztnQkFDdEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsWUFBWTtnQkFDcEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsVUFBVTtnQkFDbEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtRQUNELE9BQU8sRUFBRTtZQUNQO2dCQUNFLFFBQVEsRUFBRSxHQUFHO2dCQUNiLE1BQU0sRUFBRSxPQUFPO2dCQUNmLE1BQU0sRUFBRSxPQUFPO2dCQUNmLGNBQWMsRUFBRSxJQUFJO2FBQ3JCO1NBQ0Y7S0FDRjtJQUNEO1FBQ0UsVUFBVSxFQUFFLG1CQUFtQjtRQUMvQixVQUFVLEVBQUUsUUFBUTtRQUNwQixRQUFRLEVBQUU7WUFDUjtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsTUFBTTtnQkFDZCxNQUFNLEVBQUUsUUFBUTthQUNqQjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxTQUFTO2dCQUNqQixNQUFNLEVBQUUsUUFBUTthQUNqQjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxZQUFZO2dCQUNwQixNQUFNLEVBQUUsUUFBUTthQUNqQjtTQUNGO0tBQ0Y7SUFDRDtRQUNFLFVBQVUsRUFBRSxrQkFBa0I7UUFDOUIsVUFBVSxFQUFFLFFBQVE7UUFDcEIsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsU0FBUztnQkFDakIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsWUFBWTtnQkFDcEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtLQUNGO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjMgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge09wTWFwcGVyfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBqc29uOiBPcE1hcHBlcltdID0gW1xuICB7XG4gICAgJ3RmT3BOYW1lJzogJ1NwYXJzZUZpbGxFbXB0eVJvd3MnLFxuICAgICdjYXRlZ29yeSc6ICdzcGFyc2UnLFxuICAgICdpbnB1dHMnOiBbXG4gICAgICB7XG4gICAgICAgICdzdGFydCc6IDAsXG4gICAgICAgICduYW1lJzogJ2luZGljZXMnLFxuICAgICAgICAndHlwZSc6ICd0ZW5zb3InXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAxLFxuICAgICAgICAnbmFtZSc6ICd2YWx1ZXMnLFxuICAgICAgICAndHlwZSc6ICd0ZW5zb3InXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAyLFxuICAgICAgICAnbmFtZSc6ICdkZW5zZVNoYXBlJyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMyxcbiAgICAgICAgJ25hbWUnOiAnZGVmYXVsdFZhbHVlJyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgICd0Zk9wTmFtZSc6ICdTcGFyc2VSZXNoYXBlJyxcbiAgICAnY2F0ZWdvcnknOiAnc3BhcnNlJyxcbiAgICAnaW5wdXRzJzogW1xuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAwLFxuICAgICAgICAnbmFtZSc6ICdpbnB1dEluZGljZXMnLFxuICAgICAgICAndHlwZSc6ICd0ZW5zb3InXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAxLFxuICAgICAgICAnbmFtZSc6ICdpbnB1dFNoYXBlJyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMixcbiAgICAgICAgJ25hbWUnOiAnbmV3U2hhcGUnLFxuICAgICAgICAndHlwZSc6ICd0ZW5zb3InXG4gICAgICB9XG4gICAgXSxcbiAgICAnYXR0cnMnOiBbXG4gICAgICB7XG4gICAgICAgICd0Zk5hbWUnOiAnVCcsXG4gICAgICAgICduYW1lJzogJ2R0eXBlJyxcbiAgICAgICAgJ3R5cGUnOiAnZHR5cGUnLFxuICAgICAgICAnbm90U3VwcG9ydGVkJzogdHJ1ZVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgICd0Zk9wTmFtZSc6ICdTcGFyc2VTZWdtZW50TWVhbicsXG4gICAgJ2NhdGVnb3J5JzogJ3NwYXJzZScsXG4gICAgJ2lucHV0cyc6IFtcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMCxcbiAgICAgICAgJ25hbWUnOiAnZGF0YScsXG4gICAgICAgICd0eXBlJzogJ3RlbnNvcidcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICdzdGFydCc6IDEsXG4gICAgICAgICduYW1lJzogJ2luZGljZXMnLFxuICAgICAgICAndHlwZSc6ICd0ZW5zb3InXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAyLFxuICAgICAgICAnbmFtZSc6ICdzZWdtZW50SWRzJyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgICd0Zk9wTmFtZSc6ICdTcGFyc2VTZWdtZW50U3VtJyxcbiAgICAnY2F0ZWdvcnknOiAnc3BhcnNlJyxcbiAgICAnaW5wdXRzJzogW1xuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAwLFxuICAgICAgICAnbmFtZSc6ICdkYXRhJyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMSxcbiAgICAgICAgJ25hbWUnOiAnaW5kaWNlcycsXG4gICAgICAgICd0eXBlJzogJ3RlbnNvcidcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICdzdGFydCc6IDIsXG4gICAgICAgICduYW1lJzogJ3NlZ21lbnRJZHMnLFxuICAgICAgICAndHlwZSc6ICd0ZW5zb3InXG4gICAgICB9XG4gICAgXVxuICB9XG5dO1xuIl19","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'FFT',\n        'category': 'spectral',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'IFFT',\n        'category': 'spectral',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'RFFT',\n        'category': 'spectral',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'fft_length',\n                'type': 'number',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'IRFFT',\n        'category': 'spectral',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'fft_length',\n                'type': 'number',\n                'notSupported': true\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlY3RyYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvbnZlcnRlci9zcmMvb3BlcmF0aW9ucy9vcF9saXN0L3NwZWN0cmFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUlILE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBZTtJQUM5QjtRQUNFLFVBQVUsRUFBRSxLQUFLO1FBQ2pCLFVBQVUsRUFBRSxVQUFVO1FBQ3RCLFFBQVEsRUFBRTtZQUNSO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxHQUFHO2dCQUNYLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1NBQ0Y7S0FDRjtJQUNEO1FBQ0UsVUFBVSxFQUFFLE1BQU07UUFDbEIsVUFBVSxFQUFFLFVBQVU7UUFDdEIsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtLQUNGO0lBQ0Q7UUFDRSxVQUFVLEVBQUUsTUFBTTtRQUNsQixVQUFVLEVBQUUsVUFBVTtRQUN0QixRQUFRLEVBQUU7WUFDUjtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsR0FBRztnQkFDWCxNQUFNLEVBQUUsUUFBUTthQUNqQjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxZQUFZO2dCQUNwQixNQUFNLEVBQUUsUUFBUTtnQkFDaEIsY0FBYyxFQUFFLElBQUk7YUFDckI7U0FDRjtLQUNGO0lBQ0Q7UUFDRSxVQUFVLEVBQUUsT0FBTztRQUNuQixVQUFVLEVBQUUsVUFBVTtRQUN0QixRQUFRLEVBQUU7WUFDUjtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsR0FBRztnQkFDWCxNQUFNLEVBQUUsUUFBUTthQUNqQjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxZQUFZO2dCQUNwQixNQUFNLEVBQUUsUUFBUTtnQkFDaEIsY0FBYyxFQUFFLElBQUk7YUFDckI7U0FDRjtLQUNGO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjMgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge09wTWFwcGVyfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBqc29uOiBPcE1hcHBlcltdID0gW1xuICB7XG4gICAgJ3RmT3BOYW1lJzogJ0ZGVCcsXG4gICAgJ2NhdGVnb3J5JzogJ3NwZWN0cmFsJyxcbiAgICAnaW5wdXRzJzogW1xuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAwLFxuICAgICAgICAnbmFtZSc6ICd4JyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgICd0Zk9wTmFtZSc6ICdJRkZUJyxcbiAgICAnY2F0ZWdvcnknOiAnc3BlY3RyYWwnLFxuICAgICdpbnB1dHMnOiBbXG4gICAgICB7XG4gICAgICAgICdzdGFydCc6IDAsXG4gICAgICAgICduYW1lJzogJ3gnLFxuICAgICAgICAndHlwZSc6ICd0ZW5zb3InXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgJ3RmT3BOYW1lJzogJ1JGRlQnLFxuICAgICdjYXRlZ29yeSc6ICdzcGVjdHJhbCcsXG4gICAgJ2lucHV0cyc6IFtcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMCxcbiAgICAgICAgJ25hbWUnOiAneCcsXG4gICAgICAgICd0eXBlJzogJ3RlbnNvcidcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICdzdGFydCc6IDEsXG4gICAgICAgICduYW1lJzogJ2ZmdF9sZW5ndGgnLFxuICAgICAgICAndHlwZSc6ICdudW1iZXInLFxuICAgICAgICAnbm90U3VwcG9ydGVkJzogdHJ1ZVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgICd0Zk9wTmFtZSc6ICdJUkZGVCcsXG4gICAgJ2NhdGVnb3J5JzogJ3NwZWN0cmFsJyxcbiAgICAnaW5wdXRzJzogW1xuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAwLFxuICAgICAgICAnbmFtZSc6ICd4JyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMSxcbiAgICAgICAgJ25hbWUnOiAnZmZ0X2xlbmd0aCcsXG4gICAgICAgICd0eXBlJzogJ251bWJlcicsXG4gICAgICAgICdub3RTdXBwb3J0ZWQnOiB0cnVlXG4gICAgICB9XG4gICAgXVxuICB9XG5dO1xuIl19","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'StaticRegexReplace',\n        'category': 'string',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'input',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'pattern',\n                'name': 'pattern',\n                'type': 'string'\n            },\n            {\n                'tfName': 'rewrite',\n                'name': 'rewrite',\n                'type': 'string'\n            },\n            {\n                'tfName': 'replace_global',\n                'name': 'replaceGlobal',\n                'type': 'bool'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'StringNGrams',\n        'category': 'string',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'data',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'dataSplits',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'separator',\n                'name': 'separator',\n                'type': 'string'\n            },\n            {\n                'tfName': 'ngram_widths',\n                'name': 'nGramWidths',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'left_pad',\n                'name': 'leftPad',\n                'type': 'string'\n            },\n            {\n                'tfName': 'right_pad',\n                'name': 'rightPad',\n                'type': 'string'\n            },\n            {\n                'tfName': 'pad_width',\n                'name': 'padWidth',\n                'type': 'number'\n            },\n            {\n                'tfName': 'preserve_short_sequences',\n                'name': 'preserveShortSequences',\n                'type': 'bool'\n            }\n        ],\n        'outputs': [\n            'ngrams',\n            'ngrams_splits'\n        ]\n    },\n    {\n        'tfOpName': 'StringSplit',\n        'category': 'string',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'input',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'delimiter',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'skip_empty',\n                'name': 'skipEmpty',\n                'type': 'bool'\n            }\n        ],\n        'outputs': [\n            'indices',\n            'values',\n            'shape'\n        ]\n    },\n    {\n        'tfOpName': 'StringToHashBucketFast',\n        'category': 'string',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'input',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'num_buckets',\n                'name': 'numBuckets',\n                'type': 'number'\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1jb252ZXJ0ZXIvc3JjL29wZXJhdGlvbnMvb3BfbGlzdC9zdHJpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBSUgsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFlO0lBQzlCO1FBQ0UsVUFBVSxFQUFFLG9CQUFvQjtRQUNoQyxVQUFVLEVBQUUsUUFBUTtRQUNwQixRQUFRLEVBQUU7WUFDUjtnQkFDQSxPQUFPLEVBQUUsQ0FBQztnQkFDUixNQUFNLEVBQUUsT0FBTztnQkFDZixNQUFNLEVBQUUsUUFBUTthQUNqQjtTQUNGO1FBQ0QsT0FBTyxFQUFFO1lBQ1A7Z0JBQ0UsUUFBUSxFQUFFLFNBQVM7Z0JBQ25CLE1BQU0sRUFBRSxTQUFTO2dCQUNqQixNQUFNLEVBQUUsUUFBUTthQUNqQjtZQUNEO2dCQUNFLFFBQVEsRUFBRSxTQUFTO2dCQUNuQixNQUFNLEVBQUUsU0FBUztnQkFDakIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxRQUFRLEVBQUUsZ0JBQWdCO2dCQUMxQixNQUFNLEVBQUUsZUFBZTtnQkFDdkIsTUFBTSxFQUFFLE1BQU07YUFDZjtTQUNGO0tBQ0Y7SUFDRDtRQUNFLFVBQVUsRUFBRSxjQUFjO1FBQzFCLFVBQVUsRUFBRSxRQUFRO1FBQ3BCLFFBQVEsRUFBRTtZQUNSO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxNQUFNO2dCQUNkLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLFlBQVk7Z0JBQ3BCLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1NBQ0Y7UUFDRCxPQUFPLEVBQUU7WUFDUDtnQkFDRSxRQUFRLEVBQUUsV0FBVztnQkFDckIsTUFBTSxFQUFFLFdBQVc7Z0JBQ25CLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsUUFBUSxFQUFFLGNBQWM7Z0JBQ3hCLE1BQU0sRUFBRSxhQUFhO2dCQUNyQixNQUFNLEVBQUUsVUFBVTthQUNuQjtZQUNEO2dCQUNFLFFBQVEsRUFBRSxVQUFVO2dCQUNwQixNQUFNLEVBQUUsU0FBUztnQkFDakIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxRQUFRLEVBQUUsV0FBVztnQkFDckIsTUFBTSxFQUFFLFVBQVU7Z0JBQ2xCLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLE1BQU0sRUFBRSxVQUFVO2dCQUNsQixNQUFNLEVBQUUsUUFBUTthQUNqQjtZQUNEO2dCQUNFLFFBQVEsRUFBRSwwQkFBMEI7Z0JBQ3BDLE1BQU0sRUFBRSx3QkFBd0I7Z0JBQ2hDLE1BQU0sRUFBRSxNQUFNO2FBQ2Y7U0FDRjtRQUNELFNBQVMsRUFBRTtZQUNULFFBQVE7WUFDUixlQUFlO1NBQ2hCO0tBQ0Y7SUFDRDtRQUNFLFVBQVUsRUFBRSxhQUFhO1FBQ3pCLFVBQVUsRUFBRSxRQUFRO1FBQ3BCLFFBQVEsRUFBRTtZQUNSO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxPQUFPO2dCQUNmLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLFdBQVc7Z0JBQ25CLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1NBQ0Y7UUFDRCxPQUFPLEVBQUU7WUFDUDtnQkFDRSxRQUFRLEVBQUUsWUFBWTtnQkFDdEIsTUFBTSxFQUFFLFdBQVc7Z0JBQ25CLE1BQU0sRUFBRSxNQUFNO2FBQ2Y7U0FDRjtRQUNELFNBQVMsRUFBRTtZQUNULFNBQVM7WUFDVCxRQUFRO1lBQ1IsT0FBTztTQUNSO0tBQ0Y7SUFDRDtRQUNFLFVBQVUsRUFBRSx3QkFBd0I7UUFDcEMsVUFBVSxFQUFFLFFBQVE7UUFDcEIsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLE9BQU87Z0JBQ2YsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtRQUNELE9BQU8sRUFBRTtZQUNQO2dCQUNFLFFBQVEsRUFBRSxhQUFhO2dCQUN2QixNQUFNLEVBQUUsWUFBWTtnQkFDcEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtLQUNGO0NBQ0YsQ0FDQSIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjMgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge09wTWFwcGVyfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBqc29uOiBPcE1hcHBlcltdID0gW1xuICB7XG4gICAgJ3RmT3BOYW1lJzogJ1N0YXRpY1JlZ2V4UmVwbGFjZScsXG4gICAgJ2NhdGVnb3J5JzogJ3N0cmluZycsXG4gICAgJ2lucHV0cyc6IFtcbiAgICAgIHtcbiAgICAgICdzdGFydCc6IDAsXG4gICAgICAgICduYW1lJzogJ2lucHV0JyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfVxuICAgIF0sXG4gICAgJ2F0dHJzJzogW1xuICAgICAge1xuICAgICAgICAndGZOYW1lJzogJ3BhdHRlcm4nLFxuICAgICAgICAnbmFtZSc6ICdwYXR0ZXJuJyxcbiAgICAgICAgJ3R5cGUnOiAnc3RyaW5nJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ3RmTmFtZSc6ICdyZXdyaXRlJyxcbiAgICAgICAgJ25hbWUnOiAncmV3cml0ZScsXG4gICAgICAgICd0eXBlJzogJ3N0cmluZydcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICd0Zk5hbWUnOiAncmVwbGFjZV9nbG9iYWwnLFxuICAgICAgICAnbmFtZSc6ICdyZXBsYWNlR2xvYmFsJyxcbiAgICAgICAgJ3R5cGUnOiAnYm9vbCdcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICAndGZPcE5hbWUnOiAnU3RyaW5nTkdyYW1zJyxcbiAgICAnY2F0ZWdvcnknOiAnc3RyaW5nJyxcbiAgICAnaW5wdXRzJzogW1xuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAwLFxuICAgICAgICAnbmFtZSc6ICdkYXRhJyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMSxcbiAgICAgICAgJ25hbWUnOiAnZGF0YVNwbGl0cycsXG4gICAgICAgICd0eXBlJzogJ3RlbnNvcidcbiAgICAgIH1cbiAgICBdLFxuICAgICdhdHRycyc6IFtcbiAgICAgIHtcbiAgICAgICAgJ3RmTmFtZSc6ICdzZXBhcmF0b3InLFxuICAgICAgICAnbmFtZSc6ICdzZXBhcmF0b3InLFxuICAgICAgICAndHlwZSc6ICdzdHJpbmcnXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAndGZOYW1lJzogJ25ncmFtX3dpZHRocycsXG4gICAgICAgICduYW1lJzogJ25HcmFtV2lkdGhzJyxcbiAgICAgICAgJ3R5cGUnOiAnbnVtYmVyW10nXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAndGZOYW1lJzogJ2xlZnRfcGFkJyxcbiAgICAgICAgJ25hbWUnOiAnbGVmdFBhZCcsXG4gICAgICAgICd0eXBlJzogJ3N0cmluZydcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICd0Zk5hbWUnOiAncmlnaHRfcGFkJyxcbiAgICAgICAgJ25hbWUnOiAncmlnaHRQYWQnLFxuICAgICAgICAndHlwZSc6ICdzdHJpbmcnXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAndGZOYW1lJzogJ3BhZF93aWR0aCcsXG4gICAgICAgICduYW1lJzogJ3BhZFdpZHRoJyxcbiAgICAgICAgJ3R5cGUnOiAnbnVtYmVyJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ3RmTmFtZSc6ICdwcmVzZXJ2ZV9zaG9ydF9zZXF1ZW5jZXMnLFxuICAgICAgICAnbmFtZSc6ICdwcmVzZXJ2ZVNob3J0U2VxdWVuY2VzJyxcbiAgICAgICAgJ3R5cGUnOiAnYm9vbCdcbiAgICAgIH1cbiAgICBdLFxuICAgICdvdXRwdXRzJzogW1xuICAgICAgJ25ncmFtcycsXG4gICAgICAnbmdyYW1zX3NwbGl0cydcbiAgICBdXG4gIH0sXG4gIHtcbiAgICAndGZPcE5hbWUnOiAnU3RyaW5nU3BsaXQnLFxuICAgICdjYXRlZ29yeSc6ICdzdHJpbmcnLFxuICAgICdpbnB1dHMnOiBbXG4gICAgICB7XG4gICAgICAgICdzdGFydCc6IDAsXG4gICAgICAgICduYW1lJzogJ2lucHV0JyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMSxcbiAgICAgICAgJ25hbWUnOiAnZGVsaW1pdGVyJyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfVxuICAgIF0sXG4gICAgJ2F0dHJzJzogW1xuICAgICAge1xuICAgICAgICAndGZOYW1lJzogJ3NraXBfZW1wdHknLFxuICAgICAgICAnbmFtZSc6ICdza2lwRW1wdHknLFxuICAgICAgICAndHlwZSc6ICdib29sJ1xuICAgICAgfVxuICAgIF0sXG4gICAgJ291dHB1dHMnOiBbXG4gICAgICAnaW5kaWNlcycsXG4gICAgICAndmFsdWVzJyxcbiAgICAgICdzaGFwZSdcbiAgICBdXG4gIH0sXG4gIHtcbiAgICAndGZPcE5hbWUnOiAnU3RyaW5nVG9IYXNoQnVja2V0RmFzdCcsXG4gICAgJ2NhdGVnb3J5JzogJ3N0cmluZycsXG4gICAgJ2lucHV0cyc6IFtcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMCxcbiAgICAgICAgJ25hbWUnOiAnaW5wdXQnLFxuICAgICAgICAndHlwZSc6ICd0ZW5zb3InXG4gICAgICB9XG4gICAgXSxcbiAgICAnYXR0cnMnOiBbXG4gICAgICB7XG4gICAgICAgICd0Zk5hbWUnOiAnbnVtX2J1Y2tldHMnLFxuICAgICAgICAnbmFtZSc6ICdudW1CdWNrZXRzJyxcbiAgICAgICAgJ3R5cGUnOiAnbnVtYmVyJ1xuICAgICAgfVxuICAgIF1cbiAgfVxuXVxuO1xuIl19","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'Cast',\n        'category': 'transformation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'SrcT',\n                'name': 'sdtype',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'DstT',\n                'name': 'dtype',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'ExpandDims',\n        'category': 'transformation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'axis',\n                'type': 'number'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'MirrorPad',\n        'category': 'transformation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'padding',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'mode',\n                'name': 'mode',\n                'type': 'string'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Pad',\n        'category': 'transformation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'padding',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'constant_value',\n                'name': 'constantValue',\n                'type': 'number',\n                'defaultValue': 0\n            }\n        ]\n    },\n    {\n        'tfOpName': 'PadV2',\n        'category': 'transformation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'padding',\n                'type': 'number[]'\n            },\n            {\n                'start': 2,\n                'name': 'constantValue',\n                'type': 'number',\n                'defaultValue': 0\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Reshape',\n        'category': 'transformation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'shape',\n                'type': 'number[]'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'EnsureShape',\n        'category': 'transformation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'shape',\n                'type': 'number[]'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Squeeze',\n        'category': 'transformation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'axis',\n                'tfDeprecatedName': 'squeeze_dims',\n                'name': 'axis',\n                'type': 'number[]'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'SpaceToBatchND',\n        'category': 'transformation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'blockShape',\n                'type': 'number[]'\n            },\n            {\n                'start': 2,\n                'name': 'paddings',\n                'type': 'number[]'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'BatchToSpaceND',\n        'category': 'transformation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'blockShape',\n                'type': 'number[]'\n            },\n            {\n                'start': 2,\n                'name': 'crops',\n                'type': 'number[]'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'DepthToSpace',\n        'category': 'transformation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'block_size',\n                'name': 'blockSize',\n                'type': 'number'\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'BroadcastTo',\n        'category': 'transformation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'shape',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': []\n    },\n    {\n        'tfOpName': 'BroadcastArgs',\n        'category': 'transformation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 's0',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 's1',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': []\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport * as tensorflow from '../data/compiled_api';\nimport { getRegisteredOp } from './custom_op/register';\nimport { getNodeNameAndIndex } from './executors/utils';\nimport * as arithmetic from './op_list/arithmetic';\nimport * as basicMath from './op_list/basic_math';\nimport * as control from './op_list/control';\nimport * as convolution from './op_list/convolution';\nimport * as creation from './op_list/creation';\nimport * as dynamic from './op_list/dynamic';\nimport * as evaluation from './op_list/evaluation';\nimport * as graph from './op_list/graph';\nimport * as hashTable from './op_list/hash_table';\nimport * as image from './op_list/image';\nimport * as logical from './op_list/logical';\nimport * as matrices from './op_list/matrices';\nimport * as normalization from './op_list/normalization';\nimport * as reduction from './op_list/reduction';\nimport * as sliceJoin from './op_list/slice_join';\nimport * as sparse from './op_list/sparse';\nimport * as spectral from './op_list/spectral';\nimport * as string from './op_list/string';\nimport * as transformation from './op_list/transformation';\nexport class OperationMapper {\n    // Singleton instance for the mapper\n    static get Instance() {\n        return this._instance || (this._instance = new this());\n    }\n    // Loads the op mapping from the JSON file.\n    constructor() {\n        const ops = [\n            arithmetic, basicMath, control, convolution, creation, dynamic,\n            evaluation, graph, hashTable, image, logical, matrices, normalization,\n            reduction, sliceJoin, sparse, spectral, string, transformation\n        ];\n        const mappersJson = [].concat(...ops.map(op => op.json));\n        this.opMappers = mappersJson.reduce((map, mapper) => {\n            map[mapper.tfOpName] = mapper;\n            return map;\n        }, {});\n    }\n    // Converts the model inference graph from Tensorflow GraphDef to local\n    // representation for TensorFlow.js API\n    transformGraph(graph, signature = {}) {\n        const tfNodes = graph.node;\n        const placeholders = [];\n        const weights = [];\n        const initNodes = [];\n        const nodes = tfNodes.reduce((map, node) => {\n            map[node.name] = this.mapNode(node);\n            if (node.op.startsWith('Placeholder')) {\n                placeholders.push(map[node.name]);\n            }\n            else if (node.op === 'Const') {\n                weights.push(map[node.name]);\n            }\n            else if (node.input == null || node.input.length === 0) {\n                initNodes.push(map[node.name]);\n            }\n            return map;\n        }, {});\n        let inputs = [];\n        const outputs = [];\n        let inputNodeNameToKey = {};\n        let outputNodeNameToKey = {};\n        if (signature != null) {\n            inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);\n            outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);\n        }\n        const allNodes = Object.keys(nodes);\n        allNodes.forEach(key => {\n            const node = nodes[key];\n            node.inputNames.forEach((name, index) => {\n                const [nodeName, , outputName] = getNodeNameAndIndex(name);\n                const inputNode = nodes[nodeName];\n                if (inputNode.outputs != null) {\n                    const outputIndex = inputNode.outputs.indexOf(outputName);\n                    if (outputIndex !== -1) {\n                        const inputName = `${nodeName}:${outputIndex}`;\n                        // update the input name to use the mapped output index directly.\n                        node.inputNames[index] = inputName;\n                    }\n                }\n                node.inputs.push(inputNode);\n                inputNode.children.push(node);\n            });\n        });\n        // if signature has not outputs set, add any node that does not have\n        // outputs.\n        if (Object.keys(outputNodeNameToKey).length === 0) {\n            allNodes.forEach(key => {\n                const node = nodes[key];\n                if (node.children.length === 0) {\n                    outputs.push(node);\n                }\n            });\n        }\n        else {\n            Object.keys(outputNodeNameToKey).forEach(name => {\n                const [nodeName,] = getNodeNameAndIndex(name);\n                const node = nodes[nodeName];\n                if (node != null) {\n                    node.signatureKey = outputNodeNameToKey[name];\n                    outputs.push(node);\n                }\n            });\n        }\n        if (Object.keys(inputNodeNameToKey).length > 0) {\n            Object.keys(inputNodeNameToKey).forEach(name => {\n                const [nodeName,] = getNodeNameAndIndex(name);\n                const node = nodes[nodeName];\n                if (node) {\n                    node.signatureKey = inputNodeNameToKey[name];\n                    inputs.push(node);\n                }\n            });\n        }\n        else {\n            inputs = placeholders;\n        }\n        let functions = {};\n        if (graph.library != null && graph.library.function != null) {\n            functions = graph.library.function.reduce((functions, func) => {\n                functions[func.signature.name] = this.mapFunction(func);\n                return functions;\n            }, {});\n        }\n        const result = { nodes, inputs, outputs, weights, placeholders, signature, functions };\n        if (initNodes.length > 0) {\n            result.initNodes = initNodes;\n        }\n        return result;\n    }\n    mapSignatureEntries(entries) {\n        return Object.keys(entries || {})\n            .reduce((prev, curr) => {\n            prev[entries[curr].name] = curr;\n            return prev;\n        }, {});\n    }\n    mapNode(node) {\n        // Unsupported ops will cause an error at run-time (not parse time), since\n        // they may not be used by the actual execution subgraph.\n        const mapper = getRegisteredOp(node.op) || this.opMappers[node.op] || {};\n        if (node.attr == null) {\n            node.attr = {};\n        }\n        const newNode = {\n            name: node.name,\n            op: node.op,\n            category: mapper.category,\n            inputNames: (node.input ||\n                []).map(input => input.startsWith('^') ? input.slice(1) : input),\n            inputs: [],\n            children: [],\n            inputParams: {},\n            attrParams: {},\n            rawAttrs: node.attr,\n            outputs: mapper.outputs\n        };\n        if (mapper.inputs != null) {\n            newNode.inputParams =\n                mapper.inputs.reduce((map, param) => {\n                    map[param.name] = {\n                        type: param.type,\n                        inputIndexStart: param.start,\n                        inputIndexEnd: param.end\n                    };\n                    return map;\n                }, {});\n        }\n        if (mapper.attrs != null) {\n            newNode.attrParams =\n                mapper.attrs.reduce((map, param) => {\n                    const type = param.type;\n                    let value = undefined;\n                    switch (param.type) {\n                        case 'string':\n                            value = getStringParam(node.attr, param.tfName, param.defaultValue);\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getStringParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'string[]':\n                            value = getStringArrayParam(node.attr, param.tfName, param.defaultValue);\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getStringArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'number':\n                            value = getNumberParam(node.attr, param.tfName, (param.defaultValue || 0));\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getNumberParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'number[]':\n                            value = getNumericArrayParam(node.attr, param.tfName, param.defaultValue);\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getNumericArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'bool':\n                            value = getBoolParam(node.attr, param.tfName, param.defaultValue);\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getBoolParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'bool[]':\n                            value = getBoolArrayParam(node.attr, param.tfName, param.defaultValue);\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getBoolArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'shape':\n                            value = getTensorShapeParam(node.attr, param.tfName, param.defaultValue);\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getTensorShapeParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'shape[]':\n                            value = getTensorShapeArrayParam(node.attr, param.tfName, param.defaultValue);\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getTensorShapeArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'dtype':\n                            value = getDtypeParam(node.attr, param.tfName, param.defaultValue);\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getDtypeParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'dtype[]':\n                            value = getDtypeArrayParam(node.attr, param.tfName, param.defaultValue);\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getDtypeArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'func':\n                            value = getFuncParam(node.attr, param.tfName, param.defaultValue);\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getFuncParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'tensor':\n                        case 'tensors':\n                            break;\n                        default:\n                            throw new Error(`Unsupported param type: ${param.type} for op: ${node.op}`);\n                    }\n                    map[param.name] = { value, type };\n                    return map;\n                }, {});\n        }\n        return newNode;\n    }\n    // map the TFunctionDef to TFJS graph object\n    mapFunction(functionDef) {\n        const tfNodes = functionDef.nodeDef;\n        const placeholders = [];\n        const weights = [];\n        let nodes = {};\n        if (tfNodes != null) {\n            nodes = tfNodes.reduce((map, node) => {\n                map[node.name] = this.mapNode(node);\n                if (node.op === 'Const') {\n                    weights.push(map[node.name]);\n                }\n                return map;\n            }, {});\n        }\n        const inputs = [];\n        const outputs = [];\n        functionDef.signature.inputArg.forEach(arg => {\n            const [nodeName,] = getNodeNameAndIndex(arg.name);\n            const node = {\n                name: nodeName,\n                op: 'Placeholder',\n                inputs: [],\n                inputNames: [],\n                category: 'graph',\n                inputParams: {},\n                attrParams: { dtype: { value: parseDtypeParam(arg.type), type: 'dtype' } },\n                children: []\n            };\n            node.signatureKey = arg.name;\n            inputs.push(node);\n            nodes[nodeName] = node;\n        });\n        const allNodes = Object.keys(nodes);\n        allNodes.forEach(key => {\n            const node = nodes[key];\n            node.inputNames.forEach((name, index) => {\n                const [nodeName, , outputName] = getNodeNameAndIndex(name);\n                const inputNode = nodes[nodeName];\n                if (inputNode.outputs != null) {\n                    const outputIndex = inputNode.outputs.indexOf(outputName);\n                    if (outputIndex !== -1) {\n                        const inputName = `${nodeName}:${outputIndex}`;\n                        // update the input name to use the mapped output index directly.\n                        node.inputNames[index] = inputName;\n                    }\n                }\n                node.inputs.push(inputNode);\n                inputNode.children.push(node);\n            });\n        });\n        const returnNodeMap = functionDef.ret;\n        functionDef.signature.outputArg.forEach(output => {\n            const [nodeName, index] = getNodeNameAndIndex(returnNodeMap[output.name]);\n            const node = nodes[nodeName];\n            if (node != null) {\n                node.defaultOutput = index;\n                outputs.push(node);\n            }\n        });\n        const signature = this.mapArgsToSignature(functionDef);\n        return { nodes, inputs, outputs, weights, placeholders, signature };\n    }\n    mapArgsToSignature(functionDef) {\n        return {\n            methodName: functionDef.signature.name,\n            inputs: functionDef.signature.inputArg.reduce((map, arg) => {\n                map[arg.name] = this.mapArgToTensorInfo(arg);\n                return map;\n            }, {}),\n            outputs: functionDef.signature.outputArg.reduce((map, arg) => {\n                map[arg.name] = this.mapArgToTensorInfo(arg, functionDef.ret);\n                return map;\n            }, {}),\n        };\n    }\n    mapArgToTensorInfo(arg, nameMap) {\n        let name = arg.name;\n        if (nameMap != null) {\n            name = nameMap[name];\n        }\n        return { name, dtype: arg.type };\n    }\n}\nexport function decodeBase64(text) {\n    const global = env().global;\n    if (typeof global.atob !== 'undefined') {\n        return global.atob(text);\n    }\n    else if (typeof Buffer !== 'undefined') {\n        return new Buffer(text, 'base64').toString();\n    }\n    else {\n        throw new Error('Unable to decode base64 in this environment. ' +\n            'Missing built-in atob() or Buffer()');\n    }\n}\nexport function parseStringParam(s, keepCase) {\n    const value = Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);\n    return keepCase ? value : value.toLowerCase();\n}\nexport function getStringParam(attrs, name, def, keepCase = false) {\n    const param = attrs[name];\n    if (param != null) {\n        return parseStringParam(param.s, keepCase);\n    }\n    return def;\n}\nexport function getBoolParam(attrs, name, def) {\n    const param = attrs[name];\n    return param ? param.b : def;\n}\nexport function getNumberParam(attrs, name, def) {\n    const param = attrs[name] || {};\n    const value = param['i'] != null ? param['i'] : (param['f'] != null ? param['f'] : def);\n    return (typeof value === 'number') ? value : parseInt(value, 10);\n}\nexport function parseDtypeParam(value) {\n    if (typeof (value) === 'string') {\n        // tslint:disable-next-line:no-any\n        value = tensorflow.DataType[value];\n    }\n    switch (value) {\n        case tensorflow.DataType.DT_FLOAT:\n        case tensorflow.DataType.DT_HALF:\n            return 'float32';\n        case tensorflow.DataType.DT_INT32:\n        case tensorflow.DataType.DT_INT64:\n        case tensorflow.DataType.DT_INT8:\n        case tensorflow.DataType.DT_UINT8:\n            return 'int32';\n        case tensorflow.DataType.DT_BOOL:\n            return 'bool';\n        case tensorflow.DataType.DT_DOUBLE:\n            return 'float32';\n        case tensorflow.DataType.DT_STRING:\n            return 'string';\n        case tensorflow.DataType.DT_COMPLEX64:\n        case tensorflow.DataType.DT_COMPLEX128:\n            return 'complex64';\n        default:\n            // Unknown dtype error will happen at runtime (instead of parse time),\n            // since these nodes might not be used by the actual subgraph execution.\n            return null;\n    }\n}\nexport function getFuncParam(attrs, name, def) {\n    const param = attrs[name];\n    if (param && param.func) {\n        return param.func.name;\n    }\n    return def;\n}\nexport function getDtypeParam(attrs, name, def) {\n    const param = attrs[name];\n    if (param && param.type) {\n        return parseDtypeParam(param.type);\n    }\n    return def;\n}\nexport function getDtypeArrayParam(attrs, name, def) {\n    const param = attrs[name];\n    if (param && param.list && param.list.type) {\n        return param.list.type.map(v => parseDtypeParam(v));\n    }\n    return def;\n}\nexport function parseTensorShapeParam(shape) {\n    if (shape.unknownRank) {\n        return undefined;\n    }\n    if (shape.dim != null) {\n        return shape.dim.map(dim => (typeof dim.size === 'number') ? dim.size : parseInt(dim.size, 10));\n    }\n    return [];\n}\nexport function getTensorShapeParam(attrs, name, def) {\n    const param = attrs[name];\n    if (param && param.shape) {\n        return parseTensorShapeParam(param.shape);\n    }\n    return def;\n}\nexport function getNumericArrayParam(attrs, name, def) {\n    const param = attrs[name];\n    if (param) {\n        return ((param.list.f && param.list.f.length ? param.list.f :\n            param.list.i) ||\n            [])\n            .map(v => (typeof v === 'number') ? v : parseInt(v, 10));\n    }\n    return def;\n}\nexport function getStringArrayParam(attrs, name, def, keepCase = false) {\n    const param = attrs[name];\n    if (param && param.list && param.list.s) {\n        return param.list.s.map((v) => {\n            return parseStringParam(v, keepCase);\n        });\n    }\n    return def;\n}\nexport function getTensorShapeArrayParam(attrs, name, def) {\n    const param = attrs[name];\n    if (param && param.list && param.list.shape) {\n        return param.list.shape.map((v) => {\n            return parseTensorShapeParam(v);\n        });\n    }\n    return def;\n}\nexport function getBoolArrayParam(attrs, name, def) {\n    const param = attrs[name];\n    if (param && param.list && param.list.b) {\n        return param.list.b;\n    }\n    return def;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0aW9uX21hcHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29udmVydGVyL3NyYy9vcGVyYXRpb25zL29wZXJhdGlvbl9tYXBwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBRUgsT0FBTyxFQUFXLEdBQUcsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBRXBELE9BQU8sS0FBSyxVQUFVLE1BQU0sc0JBQXNCLENBQUM7QUFFbkQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ3JELE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sS0FBSyxVQUFVLE1BQU0sc0JBQXNCLENBQUM7QUFDbkQsT0FBTyxLQUFLLFNBQVMsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEtBQUssT0FBTyxNQUFNLG1CQUFtQixDQUFDO0FBQzdDLE9BQU8sS0FBSyxXQUFXLE1BQU0sdUJBQXVCLENBQUM7QUFDckQsT0FBTyxLQUFLLFFBQVEsTUFBTSxvQkFBb0IsQ0FBQztBQUMvQyxPQUFPLEtBQUssT0FBTyxNQUFNLG1CQUFtQixDQUFDO0FBQzdDLE9BQU8sS0FBSyxVQUFVLE1BQU0sc0JBQXNCLENBQUM7QUFDbkQsT0FBTyxLQUFLLEtBQUssTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEtBQUssU0FBUyxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sS0FBSyxLQUFLLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxLQUFLLE9BQU8sTUFBTSxtQkFBbUIsQ0FBQztBQUM3QyxPQUFPLEtBQUssUUFBUSxNQUFNLG9CQUFvQixDQUFDO0FBQy9DLE9BQU8sS0FBSyxhQUFhLE1BQU0seUJBQXlCLENBQUM7QUFDekQsT0FBTyxLQUFLLFNBQVMsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRCxPQUFPLEtB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QUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUIsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtRQUMzQyxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQ2hDLE9BQU8scUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7S0FDSjtJQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUVELE1BQU0sVUFBVSxpQkFBaUIsQ0FDN0IsS0FBNkMsRUFBRSxJQUFZLEVBQzNELEdBQWM7SUFDaEIsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFCLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7UUFDdkMsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztLQUNyQjtJQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtEYXRhVHlwZSwgZW52fSBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xuXG5pbXBvcnQgKiBhcyB0ZW5zb3JmbG93IGZyb20gJy4uL2RhdGEvY29tcGlsZWRfYXBpJztcblxuaW1wb3J0IHtnZXRSZWdpc3RlcmVkT3B9IGZyb20gJy4vY3VzdG9tX29wL3JlZ2lzdGVyJztcbmltcG9ydCB7Z2V0Tm9kZU5hbWVBbmRJbmRleH0gZnJvbSAnLi9leGVjdXRvcnMvdXRpbHMnO1xuaW1wb3J0ICogYXMgYXJpdGhtZXRpYyBmcm9tICcuL29wX2xpc3QvYXJpdGhtZXRpYyc7XG5pbXBvcnQgKiBhcyBiYXNpY01hdGggZnJvbSAnLi9vcF9saXN0L2Jhc2ljX21hdGgnO1xuaW1wb3J0ICogYXMgY29udHJvbCBmcm9tICcuL29wX2xpc3QvY29udHJvbCc7XG5pbXBvcnQgKiBhcyBjb252b2x1dGlvbiBmcm9tICcuL29wX2xpc3QvY29udm9sdXRpb24nO1xuaW1wb3J0ICogYXMgY3JlYXRpb24gZnJvbSAnLi9vcF9saXN0L2NyZWF0aW9uJztcbmltcG9ydCAqIGFzIGR5bmFtaWMgZnJvbSAnLi9vcF9saXN0L2R5bmFtaWMnO1xuaW1wb3J0ICogYXMgZXZhbHVhdGlvbiBmcm9tICcuL29wX2xpc3QvZXZhbHVhdGlvbic7XG5pbXBvcnQgKiBhcyBncmFwaCBmcm9tICcuL29wX2xpc3QvZ3JhcGgnO1xuaW1wb3J0ICogYXMgaGFzaFRhYmxlIGZyb20gJy4vb3BfbGlzdC9oYXNoX3RhYmxlJztcbmltcG9ydCAqIGFzIGltYWdlIGZyb20gJy4vb3BfbGlzdC9pbWFnZSc7XG5pbXBvcnQgKiBhcyBsb2dpY2FsIGZyb20gJy4vb3BfbGlzdC9sb2dpY2FsJztcbmltcG9ydCAqIGFzIG1hdHJpY2VzIGZyb20gJy4vb3BfbGlzdC9tYXRyaWNlcyc7XG5pbXBvcnQgKiBhcyBub3JtYWxpemF0aW9uIGZyb20gJy4vb3BfbGlzdC9ub3JtYWxpemF0aW9uJztcbmltcG9ydCAqIGFzIHJlZHVjdGlvbiBmcm9tICcuL29wX2xpc3QvcmVkdWN0aW9uJztcbmltcG9ydCAqIGFzIHNsaWNlSm9pbiBmcm9tICcuL29wX2xpc3Qvc2xpY2Vfam9pbic7XG5pbXBvcnQgKiBhcyBzcGFyc2UgZnJvbSAnLi9vcF9saXN0L3NwYXJzZSc7XG5pbXBvcnQgKiBhcyBzcGVjdHJhbCBmcm9tICcuL29wX2xpc3Qvc3BlY3RyYWwnO1xuaW1wb3J0ICogYXMgc3RyaW5nIGZyb20gJy4vb3BfbGlzdC9zdHJpbmcnO1xuaW1wb3J0ICogYXMgdHJhbnNmb3JtYXRpb24gZnJvbSAnLi9vcF9saXN0L3RyYW5zZm9ybWF0aW9uJztcbmltcG9ydCB7R3JhcGgsIElucHV0UGFyYW1WYWx1ZSwgTm9kZSwgT3BNYXBwZXIsIFBhcmFtVmFsdWV9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgT3BlcmF0aW9uTWFwcGVyIHtcbiAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlOiBPcGVyYXRpb25NYXBwZXI7XG5cbiAgcHJpdmF0ZSBvcE1hcHBlcnM6IHtba2V5OiBzdHJpbmddOiBPcE1hcHBlcn07XG5cbiAgLy8gU2luZ2xldG9uIGluc3RhbmNlIGZvciB0aGUgbWFwcGVyXG4gIHB1YmxpYyBzdGF0aWMgZ2V0IEluc3RhbmNlKCkge1xuICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZSB8fCAodGhpcy5faW5zdGFuY2UgPSBuZXcgdGhpcygpKTtcbiAgfVxuXG4gIC8vIExvYWRzIHRoZSBvcCBtYXBwaW5nIGZyb20gdGhlIEpTT04gZmlsZS5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zdCBvcHMgPSBbXG4gICAgICBhcml0aG1ldGljLCBiYXNpY01hdGgsIGNvbnRyb2wsIGNvbnZvbHV0aW9uLCBjcmVhdGlvbiwgZHluYW1pYyxcbiAgICAgIGV2YWx1YXRpb24sIGdyYXBoLCBoYXNoVGFibGUsIGltYWdlLCBsb2dpY2FsLCBtYXRyaWNlcywgbm9ybWFsaXphdGlvbixcbiAgICAgIHJlZHVjdGlvbiwgc2xpY2VKb2luLCBzcGFyc2UsIHNwZWN0cmFsLCBzdHJpbmcsIHRyYW5zZm9ybWF0aW9uXG4gICAgXTtcbiAgICBjb25zdCBtYXBwZXJzSnNvbjogT3BNYXBwZXJbXSA9IFtdLmNvbmNhdCguLi5vcHMubWFwKG9wID0+IG9wLmpzb24pKTtcblxuICAgIHRoaXMub3BNYXBwZXJzID0gbWFwcGVyc0pzb24ucmVkdWNlPHtba2V5OiBzdHJpbmddOiBPcE1hcHBlcn0+KFxuICAgICAgICAobWFwLCBtYXBwZXI6IE9wTWFwcGVyKSA9PiB7XG4gICAgICAgICAgbWFwW21hcHBlci50Zk9wTmFtZV0gPSBtYXBwZXI7XG4gICAgICAgICAgcmV0dXJuIG1hcDtcbiAgICAgICAgfSxcbiAgICAgICAge30pO1xuICB9XG5cbiAgLy8gQ29udmVydHMgdGhlIG1vZGVsIGluZmVyZW5jZSBncmFwaCBmcm9tIFRlbnNvcmZsb3cgR3JhcGhEZWYgdG8gbG9jYWxcbiAgLy8gcmVwcmVzZW50YXRpb24gZm9yIFRlbnNvckZsb3cuanMgQVBJXG4gIHRyYW5zZm9ybUdyYXBoKFxuICAgICAgZ3JhcGg6IHRlbnNvcmZsb3cuSUdyYXBoRGVmLFxuICAgICAgc2lnbmF0dXJlOiB0ZW5zb3JmbG93LklTaWduYXR1cmVEZWYgPSB7fSk6IEdyYXBoIHtcbiAgICBjb25zdCB0Zk5vZGVzID0gZ3JhcGgubm9kZTtcbiAgICBjb25zdCBwbGFjZWhvbGRlcnM6IE5vZGVbXSA9IFtdO1xuICAgIGNvbnN0IHdlaWdodHM6IE5vZGVbXSA9IFtdO1xuICAgIGNvbnN0IGluaXROb2RlczogTm9kZVtdID0gW107XG4gICAgY29uc3Qgbm9kZXMgPSB0Zk5vZGVzLnJlZHVjZTx7W2tleTogc3RyaW5nXTogTm9kZX0+KChtYXAsIG5vZGUpID0+IHtcbiAgICAgIG1hcFtub2RlLm5hbWVdID0gdGhpcy5tYXBOb2RlKG5vZGUpO1xuICAgICAgaWYgKG5vZGUub3Auc3RhcnRzV2l0aCgnUGxhY2Vob2xkZXInKSkge1xuICAgICAgICBwbGFjZWhvbGRlcnMucHVzaChtYXBbbm9kZS5uYW1lXSk7XG4gICAgICB9IGVsc2UgaWYgKG5vZGUub3AgPT09ICdDb25zdCcpIHtcbiAgICAgICAgd2VpZ2h0cy5wdXNoKG1hcFtub2RlLm5hbWVdKTtcbiAgICAgIH0gZWxzZSBpZiAobm9kZS5pbnB1dCA9PSBudWxsIHx8IG5vZGUuaW5wdXQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGluaXROb2Rlcy5wdXNoKG1hcFtub2RlLm5hbWVdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXA7XG4gICAgfSwge30pO1xuXG4gICAgbGV0IGlucHV0czogTm9kZVtdID0gW107XG4gICAgY29uc3Qgb3V0cHV0czogTm9kZVtdID0gW107XG4gICAgbGV0IGlucHV0Tm9kZU5hbWVUb0tleToge1trZXk6IHN0cmluZ106IHN0cmluZ30gPSB7fTtcbiAgICBsZXQgb3V0cHV0Tm9kZU5hbWVUb0tleToge1trZXk6IHN0cmluZ106IHN0cmluZ30gPSB7fTtcbiAgICBpZiAoc2lnbmF0dXJlICE9IG51bGwpIHtcbiAgICAgIGlucHV0Tm9kZU5hbWVUb0tleSA9IHRoaXMubWFwU2lnbmF0dXJlRW50cmllcyhzaWduYXR1cmUuaW5wdXRzKTtcbiAgICAgIG91dHB1dE5vZGVOYW1lVG9LZXkgPSB0aGlzLm1hcFNpZ25hdHVyZUVudHJpZXMoc2lnbmF0dXJlLm91dHB1dHMpO1xuICAgIH1cbiAgICBjb25zdCBhbGxOb2RlcyA9IE9iamVjdC5rZXlzKG5vZGVzKTtcbiAgICBhbGxOb2Rlcy5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBjb25zdCBub2RlID0gbm9kZXNba2V5XTtcbiAgICAgIG5vZGUuaW5wdXROYW1lcy5mb3JFYWNoKChuYW1lLCBpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBbbm9kZU5hbWUsICwgb3V0cHV0TmFtZV0gPSBnZXROb2RlTmFtZUFuZEluZGV4KG5hbWUpO1xuICAgICAgICBjb25zdCBpbnB1dE5vZGUgPSBub2Rlc1tub2RlTmFtZV07XG4gICAgICAgIGlmIChpbnB1dE5vZGUub3V0cHV0cyAhPSBudWxsKSB7XG4gICAgICAgICAgY29uc3Qgb3V0cHV0SW5kZXggPSBpbnB1dE5vZGUub3V0cHV0cy5pbmRleE9mKG91dHB1dE5hbWUpO1xuICAgICAgICAgIGlmIChvdXRwdXRJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIGNvbnN0IGlucHV0TmFtZSA9IGAke25vZGVOYW1lfToke291dHB1dEluZGV4fWA7XG4gICAgICAgICAgICAvLyB1cGRhdGUgdGhlIGlucHV0IG5hbWUgdG8gdXNlIHRoZSBtYXBwZWQgb3V0cHV0IGluZGV4IGRpcmVjdGx5LlxuICAgICAgICAgICAgbm9kZS5pbnB1dE5hbWVzW2luZGV4XSA9IGlucHV0TmFtZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbm9kZS5pbnB1dHMucHVzaChpbnB1dE5vZGUpO1xuICAgICAgICBpbnB1dE5vZGUuY2hpbGRyZW4ucHVzaChub2RlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gaWYgc2lnbmF0dXJlIGhhcyBub3Qgb3V0cHV0cyBzZXQsIGFkZCBhbnkgbm9kZSB0aGF0IGRvZXMgbm90IGhhdmVcbiAgICAvLyBvdXRwdXRzLlxuICAgIGlmIChPYmplY3Qua2V5cyhvdXRwdXROb2RlTmFtZVRvS2V5KS5sZW5ndGggPT09IDApIHtcbiAgICAgIGFsbE5vZGVzLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5vZGVzW2tleV07XG4gICAgICAgIGlmIChub2RlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIG91dHB1dHMucHVzaChub2RlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIE9iamVjdC5rZXlzKG91dHB1dE5vZGVOYW1lVG9LZXkpLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICAgIGNvbnN0IFtub2RlTmFtZSwgXSA9IGdldE5vZGVOYW1lQW5kSW5kZXgobmFtZSk7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBub2Rlc1tub2RlTmFtZV07XG4gICAgICAgIGlmIChub2RlICE9IG51bGwpIHtcbiAgICAgICAgICBub2RlLnNpZ25hdHVyZUtleSA9IG91dHB1dE5vZGVOYW1lVG9LZXlbbmFtZV07XG4gICAgICAgICAgb3V0cHV0cy5wdXNoKG5vZGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoT2JqZWN0LmtleXMoaW5wdXROb2RlTmFtZVRvS2V5KS5sZW5ndGggPiAwKSB7XG4gICAgICBPYmplY3Qua2V5cyhpbnB1dE5vZGVOYW1lVG9LZXkpLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICAgIGNvbnN0IFtub2RlTmFtZSwgXSA9IGdldE5vZGVOYW1lQW5kSW5kZXgobmFtZSk7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBub2Rlc1tub2RlTmFtZV07XG4gICAgICAgIGlmIChub2RlKSB7XG4gICAgICAgICAgbm9kZS5zaWduYXR1cmVLZXkgPSBpbnB1dE5vZGVOYW1lVG9LZXlbbmFtZV07XG4gICAgICAgICAgaW5wdXRzLnB1c2gobm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dHMgPSBwbGFjZWhvbGRlcnM7XG4gICAgfVxuXG4gICAgbGV0IGZ1bmN0aW9ucyA9IHt9O1xuICAgIGlmIChncmFwaC5saWJyYXJ5ICE9IG51bGwgJiYgZ3JhcGgubGlicmFyeS5mdW5jdGlvbiAhPSBudWxsKSB7XG4gICAgICBmdW5jdGlvbnMgPSBncmFwaC5saWJyYXJ5LmZ1bmN0aW9uLnJlZHVjZSgoZnVuY3Rpb25zLCBmdW5jKSA9PiB7XG4gICAgICAgIGZ1bmN0aW9uc1tmdW5jLnNpZ25hdHVyZS5uYW1lXSA9IHRoaXMubWFwRnVuY3Rpb24oZnVuYyk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbnM7XG4gICAgICB9LCB7fSBhcyB7W2tleTogc3RyaW5nXTogR3JhcGh9KTtcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQ6IEdyYXBoID1cbiAgICAgICAge25vZGVzLCBpbnB1dHMsIG91dHB1dHMsIHdlaWdodHMsIHBsYWNlaG9sZGVycywgc2lnbmF0dXJlLCBmdW5jdGlvbnN9O1xuXG4gICAgaWYgKGluaXROb2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICByZXN1bHQuaW5pdE5vZGVzID0gaW5pdE5vZGVzO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIG1hcFNpZ25hdHVyZUVudHJpZXMoZW50cmllczoge1trOiBzdHJpbmddOiB0ZW5zb3JmbG93LklUZW5zb3JJbmZvfSkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhlbnRyaWVzIHx8IHt9KVxuICAgICAgICAucmVkdWNlPHtba2V5OiBzdHJpbmddOiBzdHJpbmd9PigocHJldiwgY3VycikgPT4ge1xuICAgICAgICAgIHByZXZbZW50cmllc1tjdXJyXS5uYW1lXSA9IGN1cnI7XG4gICAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICAgIH0sIHt9KTtcbiAgfVxuXG4gIHByaXZhdGUgbWFwTm9kZShub2RlOiB0ZW5zb3JmbG93LklOb2RlRGVmKTogTm9kZSB7XG4gICAgLy8gVW5zdXBwb3J0ZWQgb3BzIHdpbGwgY2F1c2UgYW4gZXJyb3IgYXQgcnVuLXRpbWUgKG5vdCBwYXJzZSB0aW1lKSwgc2luY2VcbiAgICAvLyB0aGV5IG1heSBub3QgYmUgdXNlZCBieSB0aGUgYWN0dWFsIGV4ZWN1dGlvbiBzdWJncmFwaC5cbiAgICBjb25zdCBtYXBwZXIgPVxuICAgICAgICBnZXRSZWdpc3RlcmVkT3Aobm9kZS5vcCkgfHwgdGhpcy5vcE1hcHBlcnNbbm9kZS5vcF0gfHwge30gYXMgT3BNYXBwZXI7XG4gICAgaWYgKG5vZGUuYXR0ciA9PSBudWxsKSB7XG4gICAgICBub2RlLmF0dHIgPSB7fTtcbiAgICB9XG5cbiAgICBjb25zdCBuZXdOb2RlOiBOb2RlID0ge1xuICAgICAgbmFtZTogbm9kZS5uYW1lLFxuICAgICAgb3A6IG5vZGUub3AsXG4gICAgICBjYXRlZ29yeTogbWFwcGVyLmNhdGVnb3J5LFxuICAgICAgaW5wdXROYW1lczpcbiAgICAgICAgICAobm9kZS5pbnB1dCB8fFxuICAgICAgICAgICBbXSkubWFwKGlucHV0ID0+IGlucHV0LnN0YXJ0c1dpdGgoJ14nKSA/IGlucHV0LnNsaWNlKDEpIDogaW5wdXQpLFxuICAgICAgaW5wdXRzOiBbXSxcbiAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgIGlucHV0UGFyYW1zOiB7fSxcbiAgICAgIGF0dHJQYXJhbXM6IHt9LFxuICAgICAgcmF3QXR0cnM6IG5vZGUuYXR0cixcbiAgICAgIG91dHB1dHM6IG1hcHBlci5vdXRwdXRzXG4gICAgfTtcblxuICAgIGlmIChtYXBwZXIuaW5wdXRzICE9IG51bGwpIHtcbiAgICAgIG5ld05vZGUuaW5wdXRQYXJhbXMgPVxuICAgICAgICAgIG1hcHBlci5pbnB1dHMucmVkdWNlPHtba2V5OiBzdHJpbmddOiBJbnB1dFBhcmFtVmFsdWV9PihcbiAgICAgICAgICAgICAgKG1hcCwgcGFyYW0pID0+IHtcbiAgICAgICAgICAgICAgICBtYXBbcGFyYW0ubmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBwYXJhbS50eXBlLFxuICAgICAgICAgICAgICAgICAgaW5wdXRJbmRleFN0YXJ0OiBwYXJhbS5zdGFydCxcbiAgICAgICAgICAgICAgICAgIGlucHV0SW5kZXhFbmQ6IHBhcmFtLmVuZFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hcDtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge30pO1xuICAgIH1cbiAgICBpZiAobWFwcGVyLmF0dHJzICE9IG51bGwpIHtcbiAgICAgIG5ld05vZGUuYXR0clBhcmFtcyA9XG4gICAgICAgICAgbWFwcGVyLmF0dHJzLnJlZHVjZTx7W2tleTogc3RyaW5nXTogUGFyYW1WYWx1ZX0+KChtYXAsIHBhcmFtKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gcGFyYW0udHlwZTtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHN3aXRjaCAocGFyYW0udHlwZSkge1xuICAgICAgICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgICAgIHZhbHVlID0gZ2V0U3RyaW5nUGFyYW0oXG4gICAgICAgICAgICAgICAgICAgIG5vZGUuYXR0ciwgcGFyYW0udGZOYW1lLCBwYXJhbS5kZWZhdWx0VmFsdWUgYXMgc3RyaW5nKTtcblxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEhcGFyYW0udGZEZXByZWNhdGVkTmFtZSkge1xuICAgICAgICAgICAgICAgICAgdmFsdWUgPSBnZXRTdHJpbmdQYXJhbShcbiAgICAgICAgICAgICAgICAgICAgICBub2RlLmF0dHIsIHBhcmFtLnRmRGVwcmVjYXRlZE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgcGFyYW0uZGVmYXVsdFZhbHVlIGFzIHN0cmluZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICdzdHJpbmdbXSc6XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBnZXRTdHJpbmdBcnJheVBhcmFtKFxuICAgICAgICAgICAgICAgICAgICBub2RlLmF0dHIsIHBhcmFtLnRmTmFtZSwgcGFyYW0uZGVmYXVsdFZhbHVlIGFzIHN0cmluZ1tdKTtcblxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEhcGFyYW0udGZEZXByZWNhdGVkTmFtZSkge1xuICAgICAgICAgICAgICAgICAgdmFsdWUgPSBnZXRTdHJpbmdBcnJheVBhcmFtKFxuICAgICAgICAgICAgICAgICAgICAgIG5vZGUuYXR0ciwgcGFyYW0udGZEZXByZWNhdGVkTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICBwYXJhbS5kZWZhdWx0VmFsdWUgYXMgc3RyaW5nW10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGdldE51bWJlclBhcmFtKFxuICAgICAgICAgICAgICAgICAgICBub2RlLmF0dHIsIHBhcmFtLnRmTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgKHBhcmFtLmRlZmF1bHRWYWx1ZSB8fCAwKSBhcyBudW1iZXIpO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEhcGFyYW0udGZEZXByZWNhdGVkTmFtZSkge1xuICAgICAgICAgICAgICAgICAgdmFsdWUgPSBnZXROdW1iZXJQYXJhbShcbiAgICAgICAgICAgICAgICAgICAgICBub2RlLmF0dHIsIHBhcmFtLnRmRGVwcmVjYXRlZE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgcGFyYW0uZGVmYXVsdFZhbHVlIGFzIG51bWJlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICdudW1iZXJbXSc6XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBnZXROdW1lcmljQXJyYXlQYXJhbShcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5hdHRyLCBwYXJhbS50Zk5hbWUsIHBhcmFtLmRlZmF1bHRWYWx1ZSBhcyBudW1iZXJbXSk7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgISFwYXJhbS50ZkRlcHJlY2F0ZWROYW1lKSB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZSA9IGdldE51bWVyaWNBcnJheVBhcmFtKFxuICAgICAgICAgICAgICAgICAgICAgIG5vZGUuYXR0ciwgcGFyYW0udGZEZXByZWNhdGVkTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICBwYXJhbS5kZWZhdWx0VmFsdWUgYXMgbnVtYmVyW10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnYm9vbCc6XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBnZXRCb29sUGFyYW0oXG4gICAgICAgICAgICAgICAgICAgIG5vZGUuYXR0ciwgcGFyYW0udGZOYW1lLCBwYXJhbS5kZWZhdWx0VmFsdWUgYXMgYm9vbGVhbik7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgISFwYXJhbS50ZkRlcHJlY2F0ZWROYW1lKSB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZSA9IGdldEJvb2xQYXJhbShcbiAgICAgICAgICAgICAgICAgICAgICBub2RlLmF0dHIsIHBhcmFtLnRmRGVwcmVjYXRlZE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgcGFyYW0uZGVmYXVsdFZhbHVlIGFzIGJvb2xlYW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnYm9vbFtdJzpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGdldEJvb2xBcnJheVBhcmFtKFxuICAgICAgICAgICAgICAgICAgICBub2RlLmF0dHIsIHBhcmFtLnRmTmFtZSwgcGFyYW0uZGVmYXVsdFZhbHVlIGFzIGJvb2xlYW5bXSk7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgISFwYXJhbS50ZkRlcHJlY2F0ZWROYW1lKSB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZSA9IGdldEJvb2xBcnJheVBhcmFtKFxuICAgICAgICAgICAgICAgICAgICAgIG5vZGUuYXR0ciwgcGFyYW0udGZEZXByZWNhdGVkTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICBwYXJhbS5kZWZhdWx0VmFsdWUgYXMgYm9vbGVhbltdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ3NoYXBlJzpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGdldFRlbnNvclNoYXBlUGFyYW0oXG4gICAgICAgICAgICAgICAgICAgIG5vZGUuYXR0ciwgcGFyYW0udGZOYW1lLCBwYXJhbS5kZWZhdWx0VmFsdWUgYXMgbnVtYmVyW10pO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEhcGFyYW0udGZEZXByZWNhdGVkTmFtZSkge1xuICAgICAgICAgICAgICAgICAgdmFsdWUgPSBnZXRUZW5zb3JTaGFwZVBhcmFtKFxuICAgICAgICAgICAgICAgICAgICAgIG5vZGUuYXR0ciwgcGFyYW0udGZEZXByZWNhdGVkTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICBwYXJhbS5kZWZhdWx0VmFsdWUgYXMgbnVtYmVyW10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnc2hhcGVbXSc6XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBnZXRUZW5zb3JTaGFwZUFycmF5UGFyYW0oXG4gICAgICAgICAgICAgICAgICAgIG5vZGUuYXR0ciwgcGFyYW0udGZOYW1lLCBwYXJhbS5kZWZhdWx0VmFsdWUgYXMgbnVtYmVyW11bXSk7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgISFwYXJhbS50ZkRlcHJlY2F0ZWROYW1lKSB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZSA9IGdldFRlbnNvclNoYXBlQXJyYXlQYXJhbShcbiAgICAgICAgICAgICAgICAgICAgICBub2RlLmF0dHIsIHBhcmFtLnRmRGVwcmVjYXRlZE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgcGFyYW0uZGVmYXVsdFZhbHVlIGFzIG51bWJlcltdW10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnZHR5cGUnOlxuICAgICAgICAgICAgICAgIHZhbHVlID0gZ2V0RHR5cGVQYXJhbShcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5hdHRyLCBwYXJhbS50Zk5hbWUsIHBhcmFtLmRlZmF1bHRWYWx1ZSBhcyBEYXRhVHlwZSk7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgISFwYXJhbS50ZkRlcHJlY2F0ZWROYW1lKSB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZSA9IGdldER0eXBlUGFyYW0oXG4gICAgICAgICAgICAgICAgICAgICAgbm9kZS5hdHRyLCBwYXJhbS50ZkRlcHJlY2F0ZWROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgIHBhcmFtLmRlZmF1bHRWYWx1ZSBhcyBEYXRhVHlwZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICdkdHlwZVtdJzpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGdldER0eXBlQXJyYXlQYXJhbShcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5hdHRyLCBwYXJhbS50Zk5hbWUsIHBhcmFtLmRlZmF1bHRWYWx1ZSBhcyBEYXRhVHlwZVtdKTtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhIXBhcmFtLnRmRGVwcmVjYXRlZE5hbWUpIHtcbiAgICAgICAgICAgICAgICAgIHZhbHVlID0gZ2V0RHR5cGVBcnJheVBhcmFtKFxuICAgICAgICAgICAgICAgICAgICAgIG5vZGUuYXR0ciwgcGFyYW0udGZEZXByZWNhdGVkTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICBwYXJhbS5kZWZhdWx0VmFsdWUgYXMgRGF0YVR5cGVbXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICdmdW5jJzpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGdldEZ1bmNQYXJhbShcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5hdHRyLCBwYXJhbS50Zk5hbWUsIHBhcmFtLmRlZmF1bHRWYWx1ZSBhcyBzdHJpbmcpO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEhcGFyYW0udGZEZXByZWNhdGVkTmFtZSkge1xuICAgICAgICAgICAgICAgICAgdmFsdWUgPSBnZXRGdW5jUGFyYW0oXG4gICAgICAgICAgICAgICAgICAgICAgbm9kZS5hdHRyLCBwYXJhbS50ZkRlcHJlY2F0ZWROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgIHBhcmFtLmRlZmF1bHRWYWx1ZSBhcyBzdHJpbmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAndGVuc29yJzpcbiAgICAgICAgICAgICAgY2FzZSAndGVuc29ycyc6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgICAgICBgVW5zdXBwb3J0ZWQgcGFyYW0gdHlwZTogJHtwYXJhbS50eXBlfSBmb3Igb3A6ICR7bm9kZS5vcH1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1hcFtwYXJhbS5uYW1lXSA9IHt2YWx1ZSwgdHlwZX07XG4gICAgICAgICAgICByZXR1cm4gbWFwO1xuICAgICAgICAgIH0sIHt9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld05vZGU7XG4gIH1cblxuICAvLyBtYXAgdGhlIFRGdW5jdGlvbkRlZiB0byBURkpTIGdyYXBoIG9iamVjdFxuICBwcml2YXRlIG1hcEZ1bmN0aW9uKGZ1bmN0aW9uRGVmOiB0ZW5zb3JmbG93LklGdW5jdGlvbkRlZik6IEdyYXBoIHtcbiAgICBjb25zdCB0Zk5vZGVzID0gZnVuY3Rpb25EZWYubm9kZURlZjtcbiAgICBjb25zdCBwbGFjZWhvbGRlcnM6IE5vZGVbXSA9IFtdO1xuICAgIGNvbnN0IHdlaWdodHM6IE5vZGVbXSA9IFtdO1xuICAgIGxldCBub2Rlczoge1trZXk6IHN0cmluZ106IE5vZGV9ID0ge307XG4gICAgaWYgKHRmTm9kZXMgIT0gbnVsbCkge1xuICAgICAgbm9kZXMgPSB0Zk5vZGVzLnJlZHVjZTx7W2tleTogc3RyaW5nXTogTm9kZX0+KChtYXAsIG5vZGUpID0+IHtcbiAgICAgICAgbWFwW25vZGUubmFtZV0gPSB0aGlzLm1hcE5vZGUobm9kZSk7XG4gICAgICAgIGlmIChub2RlLm9wID09PSAnQ29uc3QnKSB7XG4gICAgICAgICAgd2VpZ2h0cy5wdXNoKG1hcFtub2RlLm5hbWVdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWFwO1xuICAgICAgfSwge30pO1xuICAgIH1cbiAgICBjb25zdCBpbnB1dHM6IE5vZGVbXSA9IFtdO1xuICAgIGNvbnN0IG91dHB1dHM6IE5vZGVbXSA9IFtdO1xuXG4gICAgZnVuY3Rpb25EZWYuc2lnbmF0dXJlLmlucHV0QXJnLmZvckVhY2goYXJnID0+IHtcbiAgICAgIGNvbnN0IFtub2RlTmFtZSwgXSA9IGdldE5vZGVOYW1lQW5kSW5kZXgoYXJnLm5hbWUpO1xuICAgICAgY29uc3Qgbm9kZTogTm9kZSA9IHtcbiAgICAgICAgbmFtZTogbm9kZU5hbWUsXG4gICAgICAgIG9wOiAnUGxhY2Vob2xkZXInLFxuICAgICAgICBpbnB1dHM6IFtdLFxuICAgICAgICBpbnB1dE5hbWVzOiBbXSxcbiAgICAgICAgY2F0ZWdvcnk6ICdncmFwaCcsXG4gICAgICAgIGlucHV0UGFyYW1zOiB7fSxcbiAgICAgICAgYXR0clBhcmFtczoge2R0eXBlOiB7dmFsdWU6IHBhcnNlRHR5cGVQYXJhbShhcmcudHlwZSksIHR5cGU6ICdkdHlwZSd9fSxcbiAgICAgICAgY2hpbGRyZW46IFtdXG4gICAgICB9O1xuICAgICAgbm9kZS5zaWduYXR1cmVLZXkgPSBhcmcubmFtZTtcbiAgICAgIGlucHV0cy5wdXNoKG5vZGUpO1xuICAgICAgbm9kZXNbbm9kZU5hbWVdID0gbm9kZTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGFsbE5vZGVzID0gT2JqZWN0LmtleXMobm9kZXMpO1xuICAgIGFsbE5vZGVzLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGNvbnN0IG5vZGUgPSBub2Rlc1trZXldO1xuICAgICAgbm9kZS5pbnB1dE5hbWVzLmZvckVhY2goKG5hbWUsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IFtub2RlTmFtZSwgLCBvdXRwdXROYW1lXSA9IGdldE5vZGVOYW1lQW5kSW5kZXgobmFtZSk7XG4gICAgICAgIGNvbnN0IGlucHV0Tm9kZSA9IG5vZGVzW25vZGVOYW1lXTtcbiAgICAgICAgaWYgKGlucHV0Tm9kZS5vdXRwdXRzICE9IG51bGwpIHtcbiAgICAgICAgICBjb25zdCBvdXRwdXRJbmRleCA9IGlucHV0Tm9kZS5vdXRwdXRzLmluZGV4T2Yob3V0cHV0TmFtZSk7XG4gICAgICAgICAgaWYgKG91dHB1dEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgY29uc3QgaW5wdXROYW1lID0gYCR7bm9kZU5hbWV9OiR7b3V0cHV0SW5kZXh9YDtcbiAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgaW5wdXQgbmFtZSB0byB1c2UgdGhlIG1hcHBlZCBvdXRwdXQgaW5kZXggZGlyZWN0bHkuXG4gICAgICAgICAgICBub2RlLmlucHV0TmFtZXNbaW5kZXhdID0gaW5wdXROYW1lO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBub2RlLmlucHV0cy5wdXNoKGlucHV0Tm9kZSk7XG4gICAgICAgIGlucHV0Tm9kZS5jaGlsZHJlbi5wdXNoKG5vZGUpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBjb25zdCByZXR1cm5Ob2RlTWFwID0gZnVuY3Rpb25EZWYucmV0O1xuXG4gICAgZnVuY3Rpb25EZWYuc2lnbmF0dXJlLm91dHB1dEFyZy5mb3JFYWNoKG91dHB1dCA9PiB7XG4gICAgICBjb25zdCBbbm9kZU5hbWUsIGluZGV4XSA9IGdldE5vZGVOYW1lQW5kSW5kZXgocmV0dXJuTm9kZU1hcFtvdXRwdXQubmFtZV0pO1xuICAgICAgY29uc3Qgbm9kZSA9IG5vZGVzW25vZGVOYW1lXTtcbiAgICAgIGlmIChub2RlICE9IG51bGwpIHtcbiAgICAgICAgbm9kZS5kZWZhdWx0T3V0cHV0ID0gaW5kZXg7XG4gICAgICAgIG91dHB1dHMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IHNpZ25hdHVyZSA9IHRoaXMubWFwQXJnc1RvU2lnbmF0dXJlKGZ1bmN0aW9uRGVmKTtcbiAgICByZXR1cm4ge25vZGVzLCBpbnB1dHMsIG91dHB1dHMsIHdlaWdodHMsIHBsYWNlaG9sZGVycywgc2lnbmF0dXJlfTtcbiAgfVxuXG4gIHByaXZhdGUgbWFwQXJnc1RvU2lnbmF0dXJlKGZ1bmN0aW9uRGVmOiB0ZW5zb3JmbG93LklGdW5jdGlvbkRlZik6XG4gICAgICB0ZW5zb3JmbG93LklTaWduYXR1cmVEZWYge1xuICAgIHJldHVybiB7XG4gICAgICBtZXRob2ROYW1lOiBmdW5jdGlvbkRlZi5zaWduYXR1cmUubmFtZSxcbiAgICAgIGlucHV0czogZnVuY3Rpb25EZWYuc2lnbmF0dXJlLmlucHV0QXJnLnJlZHVjZShcbiAgICAgICAgICAobWFwLCBhcmcpID0+IHtcbiAgICAgICAgICAgIG1hcFthcmcubmFtZV0gPSB0aGlzLm1hcEFyZ1RvVGVuc29ySW5mbyhhcmcpO1xuICAgICAgICAgICAgcmV0dXJuIG1hcDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHt9IGFzIHtba2V5OiBzdHJpbmddOiB0ZW5zb3JmbG93LklUZW5zb3JJbmZvfSksXG4gICAgICBvdXRwdXRzOiBmdW5jdGlvbkRlZi5zaWduYXR1cmUub3V0cHV0QXJnLnJlZHVjZShcbiAgICAgICAgICAobWFwLCBhcmcpID0+IHtcbiAgICAgICAgICAgIG1hcFthcmcubmFtZV0gPSB0aGlzLm1hcEFyZ1RvVGVuc29ySW5mbyhhcmcsIGZ1bmN0aW9uRGVmLnJldCk7XG4gICAgICAgICAgICByZXR1cm4gbWFwO1xuICAgICAgICAgIH0sXG4gICAgICAgICAge30gYXMge1trZXk6IHN0cmluZ106IHRlbnNvcmZsb3cuSVRlbnNvckluZm99KSxcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBtYXBBcmdUb1RlbnNvckluZm8oXG4gICAgICBhcmc6IHRlbnNvcmZsb3cuT3BEZWYuSUFyZ0RlZixcbiAgICAgIG5hbWVNYXA/OiB7W2tleTogc3RyaW5nXTogc3RyaW5nfSk6IHRlbnNvcmZsb3cuSVRlbnNvckluZm8ge1xuICAgIGxldCBuYW1lID0gYXJnLm5hbWU7XG4gICAgaWYgKG5hbWVNYXAgIT0gbnVsbCkge1xuICAgICAgbmFtZSA9IG5hbWVNYXBbbmFtZV07XG4gICAgfVxuICAgIHJldHVybiB7bmFtZSwgZHR5cGU6IGFyZy50eXBlfTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlQmFzZTY0KHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IGdsb2JhbCA9IGVudigpLmdsb2JhbDtcbiAgaWYgKHR5cGVvZiBnbG9iYWwuYXRvYiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZ2xvYmFsLmF0b2IodGV4dCk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcih0ZXh0LCAnYmFzZTY0JykudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdVbmFibGUgdG8gZGVjb2RlIGJhc2U2NCBpbiB0aGlzIGVudmlyb25tZW50LiAnICtcbiAgICAgICAgJ01pc3NpbmcgYnVpbHQtaW4gYXRvYigpIG9yIEJ1ZmZlcigpJyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlU3RyaW5nUGFyYW0oczogW118c3RyaW5nLCBrZWVwQ2FzZTogYm9vbGVhbik6IHN0cmluZyB7XG4gIGNvbnN0IHZhbHVlID1cbiAgICAgIEFycmF5LmlzQXJyYXkocykgPyBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIHMpIDogZGVjb2RlQmFzZTY0KHMpO1xuICByZXR1cm4ga2VlcENhc2UgPyB2YWx1ZSA6IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdHJpbmdQYXJhbShcbiAgICBhdHRyczoge1trZXk6IHN0cmluZ106IHRlbnNvcmZsb3cuSUF0dHJWYWx1ZX0sIG5hbWU6IHN0cmluZywgZGVmOiBzdHJpbmcsXG4gICAga2VlcENhc2UgPSBmYWxzZSk6IHN0cmluZyB7XG4gIGNvbnN0IHBhcmFtID0gYXR0cnNbbmFtZV07XG4gIGlmIChwYXJhbSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHBhcnNlU3RyaW5nUGFyYW0ocGFyYW0ucywga2VlcENhc2UpO1xuICB9XG4gIHJldHVybiBkZWY7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCb29sUGFyYW0oXG4gICAgYXR0cnM6IHtba2V5OiBzdHJpbmddOiB0ZW5zb3JmbG93LklBdHRyVmFsdWV9LCBuYW1lOiBzdHJpbmcsXG4gICAgZGVmOiBib29sZWFuKTogYm9vbGVhbiB7XG4gIGNvbnN0IHBhcmFtID0gYXR0cnNbbmFtZV07XG4gIHJldHVybiBwYXJhbSA/IHBhcmFtLmIgOiBkZWY7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROdW1iZXJQYXJhbShcbiAgICBhdHRyczoge1trZXk6IHN0cmluZ106IHRlbnNvcmZsb3cuSUF0dHJWYWx1ZX0sIG5hbWU6IHN0cmluZyxcbiAgICBkZWY6IG51bWJlcik6IG51bWJlciB7XG4gIGNvbnN0IHBhcmFtID0gYXR0cnNbbmFtZV0gfHwge307XG4gIGNvbnN0IHZhbHVlID1cbiAgICAgIHBhcmFtWydpJ10gIT0gbnVsbCA/IHBhcmFtWydpJ10gOiAocGFyYW1bJ2YnXSAhPSBudWxsID8gcGFyYW1bJ2YnXSA6IGRlZik7XG4gIHJldHVybiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykgPyB2YWx1ZSA6IHBhcnNlSW50KHZhbHVlLCAxMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUR0eXBlUGFyYW0odmFsdWU6IHN0cmluZ3x0ZW5zb3JmbG93LkRhdGFUeXBlKTogRGF0YVR5cGUge1xuICBpZiAodHlwZW9mICh2YWx1ZSkgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICAgIHZhbHVlID0gdGVuc29yZmxvdy5EYXRhVHlwZVt2YWx1ZSBhcyBhbnldO1xuICB9XG4gIHN3aXRjaCAodmFsdWUpIHtcbiAgICBjYXNlIHRlbnNvcmZsb3cuRGF0YVR5cGUuRFRfRkxPQVQ6XG4gICAgY2FzZSB0ZW5zb3JmbG93LkRhdGFUeXBlLkRUX0hBTEY6XG4gICAgICByZXR1cm4gJ2Zsb2F0MzInO1xuICAgIGNhc2UgdGVuc29yZmxvdy5EYXRhVHlwZS5EVF9JTlQzMjpcbiAgICBjYXNlIHRlbnNvcmZsb3cuRGF0YVR5cGUuRFRfSU5UNjQ6XG4gICAgY2FzZSB0ZW5zb3JmbG93LkRhdGFUeXBlLkRUX0lOVDg6XG4gICAgY2FzZSB0ZW5zb3JmbG93LkRhdGFUeXBlLkRUX1VJTlQ4OlxuICAgICAgcmV0dXJuICdpbnQzMic7XG4gICAgY2FzZSB0ZW5zb3JmbG93LkRhdGFUeXBlLkRUX0JPT0w6XG4gICAgICByZXR1cm4gJ2Jvb2wnO1xuICAgIGNhc2UgdGVuc29yZmxvdy5EYXRhVHlwZS5EVF9ET1VCTEU6XG4gICAgICByZXR1cm4gJ2Zsb2F0MzInO1xuICAgIGNhc2UgdGVuc29yZmxvdy5EYXRhVHlwZS5EVF9TVFJJTkc6XG4gICAgICByZXR1cm4gJ3N0cmluZyc7XG4gICAgY2FzZSB0ZW5zb3JmbG93LkRhdGFUeXBlLkRUX0NPTVBMRVg2NDpcbiAgICBjYXNlIHRlbnNvcmZsb3cuRGF0YVR5cGUuRFRfQ09NUExFWDEyODpcbiAgICAgIHJldHVybiAnY29tcGxleDY0JztcbiAgICBkZWZhdWx0OlxuICAgICAgLy8gVW5rbm93biBkdHlwZSBlcnJvciB3aWxsIGhhcHBlbiBhdCBydW50aW1lIChpbnN0ZWFkIG9mIHBhcnNlIHRpbWUpLFxuICAgICAgLy8gc2luY2UgdGhlc2Ugbm9kZXMgbWlnaHQgbm90IGJlIHVzZWQgYnkgdGhlIGFjdHVhbCBzdWJncmFwaCBleGVjdXRpb24uXG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RnVuY1BhcmFtKFxuICAgIGF0dHJzOiB7W2tleTogc3RyaW5nXTogdGVuc29yZmxvdy5JQXR0clZhbHVlfSwgbmFtZTogc3RyaW5nLFxuICAgIGRlZjogc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3QgcGFyYW0gPSBhdHRyc1tuYW1lXTtcbiAgaWYgKHBhcmFtICYmIHBhcmFtLmZ1bmMpIHtcbiAgICByZXR1cm4gcGFyYW0uZnVuYy5uYW1lO1xuICB9XG4gIHJldHVybiBkZWY7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREdHlwZVBhcmFtKFxuICAgIGF0dHJzOiB7W2tleTogc3RyaW5nXTogdGVuc29yZmxvdy5JQXR0clZhbHVlfSwgbmFtZTogc3RyaW5nLFxuICAgIGRlZjogRGF0YVR5cGUpOiBEYXRhVHlwZSB7XG4gIGNvbnN0IHBhcmFtID0gYXR0cnNbbmFtZV07XG4gIGlmIChwYXJhbSAmJiBwYXJhbS50eXBlKSB7XG4gICAgcmV0dXJuIHBhcnNlRHR5cGVQYXJhbShwYXJhbS50eXBlKTtcbiAgfVxuICByZXR1cm4gZGVmO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RHR5cGVBcnJheVBhcmFtKFxuICAgIGF0dHJzOiB7W2tleTogc3RyaW5nXTogdGVuc29yZmxvdy5JQXR0clZhbHVlfSwgbmFtZTogc3RyaW5nLFxuICAgIGRlZjogRGF0YVR5cGVbXSk6IERhdGFUeXBlW10ge1xuICBjb25zdCBwYXJhbSA9IGF0dHJzW25hbWVdO1xuICBpZiAocGFyYW0gJiYgcGFyYW0ubGlzdCAmJiBwYXJhbS5saXN0LnR5cGUpIHtcbiAgICByZXR1cm4gcGFyYW0ubGlzdC50eXBlLm1hcCh2ID0+IHBhcnNlRHR5cGVQYXJhbSh2KSk7XG4gIH1cbiAgcmV0dXJuIGRlZjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVGVuc29yU2hhcGVQYXJhbShzaGFwZTogdGVuc29yZmxvdy5JVGVuc29yU2hhcGUpOiBudW1iZXJbXXxcbiAgICB1bmRlZmluZWQge1xuICBpZiAoc2hhcGUudW5rbm93blJhbmspIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIGlmIChzaGFwZS5kaW0gIT0gbnVsbCkge1xuICAgIHJldHVybiBzaGFwZS5kaW0ubWFwKFxuICAgICAgICBkaW0gPT5cbiAgICAgICAgICAgICh0eXBlb2YgZGltLnNpemUgPT09ICdudW1iZXInKSA/IGRpbS5zaXplIDogcGFyc2VJbnQoZGltLnNpemUsIDEwKSk7XG4gIH1cbiAgcmV0dXJuIFtdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGVuc29yU2hhcGVQYXJhbShcbiAgICBhdHRyczoge1trZXk6IHN0cmluZ106IHRlbnNvcmZsb3cuSUF0dHJWYWx1ZX0sIG5hbWU6IHN0cmluZyxcbiAgICBkZWY/OiBudW1iZXJbXSk6IG51bWJlcltdfHVuZGVmaW5lZCB7XG4gIGNvbnN0IHBhcmFtID0gYXR0cnNbbmFtZV07XG4gIGlmIChwYXJhbSAmJiBwYXJhbS5zaGFwZSkge1xuICAgIHJldHVybiBwYXJzZVRlbnNvclNoYXBlUGFyYW0ocGFyYW0uc2hhcGUpO1xuICB9XG4gIHJldHVybiBkZWY7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROdW1lcmljQXJyYXlQYXJhbShcbiAgICBhdHRyczoge1trZXk6IHN0cmluZ106IHRlbnNvcmZsb3cuSUF0dHJWYWx1ZX0sIG5hbWU6IHN0cmluZyxcbiAgICBkZWY6IG51bWJlcltdKTogbnVtYmVyW10ge1xuICBjb25zdCBwYXJhbSA9IGF0dHJzW25hbWVdO1xuICBpZiAocGFyYW0pIHtcbiAgICByZXR1cm4gKChwYXJhbS5saXN0LmYgJiYgcGFyYW0ubGlzdC5mLmxlbmd0aCA/IHBhcmFtLmxpc3QuZiA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbS5saXN0LmkpIHx8XG4gICAgICAgICAgICBbXSlcbiAgICAgICAgLm1hcCh2ID0+ICh0eXBlb2YgdiA9PT0gJ251bWJlcicpID8gdiA6IHBhcnNlSW50KHYsIDEwKSk7XG4gIH1cbiAgcmV0dXJuIGRlZjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0cmluZ0FycmF5UGFyYW0oXG4gICAgYXR0cnM6IHtba2V5OiBzdHJpbmddOiB0ZW5zb3JmbG93LklBdHRyVmFsdWV9LCBuYW1lOiBzdHJpbmcsIGRlZjogc3RyaW5nW10sXG4gICAga2VlcENhc2UgPSBmYWxzZSk6IHN0cmluZ1tdIHtcbiAgY29uc3QgcGFyYW0gPSBhdHRyc1tuYW1lXTtcbiAgaWYgKHBhcmFtICYmIHBhcmFtLmxpc3QgJiYgcGFyYW0ubGlzdC5zKSB7XG4gICAgcmV0dXJuIHBhcmFtLmxpc3Qucy5tYXAoKHYpID0+IHtcbiAgICAgIHJldHVybiBwYXJzZVN0cmluZ1BhcmFtKHYsIGtlZXBDYXNlKTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gZGVmO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGVuc29yU2hhcGVBcnJheVBhcmFtKFxuICAgIGF0dHJzOiB7W2tleTogc3RyaW5nXTogdGVuc29yZmxvdy5JQXR0clZhbHVlfSwgbmFtZTogc3RyaW5nLFxuICAgIGRlZjogbnVtYmVyW11bXSk6IG51bWJlcltdW10ge1xuICBjb25zdCBwYXJhbSA9IGF0dHJzW25hbWVdO1xuICBpZiAocGFyYW0gJiYgcGFyYW0ubGlzdCAmJiBwYXJhbS5saXN0LnNoYXBlKSB7XG4gICAgcmV0dXJuIHBhcmFtLmxpc3Quc2hhcGUubWFwKCh2KSA9PiB7XG4gICAgICByZXR1cm4gcGFyc2VUZW5zb3JTaGFwZVBhcmFtKHYpO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBkZWY7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCb29sQXJyYXlQYXJhbShcbiAgICBhdHRyczoge1trZXk6IHN0cmluZ106IHRlbnNvcmZsb3cuSUF0dHJWYWx1ZX0sIG5hbWU6IHN0cmluZyxcbiAgICBkZWY6IGJvb2xlYW5bXSk6IGJvb2xlYW5bXSB7XG4gIGNvbnN0IHBhcmFtID0gYXR0cnNbbmFtZV07XG4gIGlmIChwYXJhbSAmJiBwYXJhbS5saXN0ICYmIHBhcmFtLmxpc3QuYikge1xuICAgIHJldHVybiBwYXJhbS5saXN0LmI7XG4gIH1cbiAgcmV0dXJuIGRlZjtcbn1cbiJdfQ==","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getTensor } from '../executors/utils';\nimport { getBoolArrayParam, getBoolParam, getDtypeArrayParam, getDtypeParam, getNumberParam, getNumericArrayParam, getStringArrayParam, getStringParam, getTensorShapeArrayParam, getTensorShapeParam } from '../operation_mapper';\n/**\n * Helper class for lookup inputs and params for nodes in the model graph.\n */\nexport class NodeValueImpl {\n    constructor(node, tensorMap, context) {\n        this.node = node;\n        this.tensorMap = tensorMap;\n        this.context = context;\n        this.inputs = [];\n        this.attrs = {};\n        this.inputs = node.inputNames.map(name => this.getInput(name));\n        if (node.rawAttrs != null) {\n            this.attrs = Object.keys(node.rawAttrs)\n                .reduce((attrs, key) => {\n                attrs[key] = this.getAttr(key);\n                return attrs;\n            }, {});\n        }\n    }\n    /**\n     * Return the value of the attribute or input param.\n     * @param name String: name of attribute or input param.\n     */\n    getInput(name) {\n        return getTensor(name, this.tensorMap, this.context);\n    }\n    /**\n     * Return the value of the attribute or input param.\n     * @param name String: name of attribute or input param.\n     */\n    getAttr(name, defaultValue) {\n        const value = this.node.rawAttrs[name];\n        if (value.tensor != null) {\n            return getTensor(name, this.tensorMap, this.context);\n        }\n        if (value.i != null || value.f != null) {\n            return getNumberParam(this.node.rawAttrs, name, defaultValue);\n        }\n        if (value.s != null) {\n            return getStringParam(this.node.rawAttrs, name, defaultValue);\n        }\n        if (value.b != null) {\n            return getBoolParam(this.node.rawAttrs, name, defaultValue);\n        }\n        if (value.shape != null) {\n            return getTensorShapeParam(this.node.rawAttrs, name, defaultValue);\n        }\n        if (value.type != null) {\n            return getDtypeParam(this.node.rawAttrs, name, defaultValue);\n        }\n        if (value.list != null) {\n            if (value.list.i != null || value.list.f != null) {\n                return getNumericArrayParam(this.node.rawAttrs, name, defaultValue);\n            }\n            if (value.list.s != null) {\n                return getStringArrayParam(this.node.rawAttrs, name, defaultValue);\n            }\n            if (value.list.shape != null) {\n                return getTensorShapeArrayParam(this.node.rawAttrs, name, defaultValue);\n            }\n            if (value.list.b != null) {\n                return getBoolArrayParam(this.node.rawAttrs, name, defaultValue);\n            }\n            if (value.list.type != null) {\n                return getDtypeArrayParam(this.node.rawAttrs, name, defaultValue);\n            }\n        }\n        return defaultValue;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * This file exports ops used by the converters executors. By default it\n * re-exports all ops. In a custom build this is aliased to a file that will\n * only exports ops for a given model.json.\n */\nexport * from './ops';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BzX2Zvcl9jb252ZXJ0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL29wcy9vcHNfZm9yX2NvbnZlcnRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFFSDs7OztHQUlHO0FBQ0gsY0FBYyxPQUFPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbi8qKlxuICogVGhpcyBmaWxlIGV4cG9ydHMgb3BzIHVzZWQgYnkgdGhlIGNvbnZlcnRlcnMgZXhlY3V0b3JzLiBCeSBkZWZhdWx0IGl0XG4gKiByZS1leHBvcnRzIGFsbCBvcHMuIEluIGEgY3VzdG9tIGJ1aWxkIHRoaXMgaXMgYWxpYXNlZCB0byBhIGZpbGUgdGhhdCB3aWxsXG4gKiBvbmx5IGV4cG9ydHMgb3BzIGZvciBhIGdpdmVuIG1vZGVsLmpzb24uXG4gKi9cbmV4cG9ydCAqIGZyb20gJy4vb3BzJztcbiJdfQ==","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'BiasAdd':\n        case 'AddV2':\n        case 'Add': {\n            return [ops.add(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'AddN': {\n            return [ops.addN(getParamValue('tensors', node, tensorMap, context))];\n        }\n        case 'FloorMod':\n        case 'Mod':\n            return [ops.mod(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        case 'Mul':\n            return [ops.mul(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        case 'RealDiv':\n        case 'Div': {\n            return [ops.div(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'DivNoNan': {\n            return [ops.divNoNan(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'FloorDiv': {\n            return [ops.floorDiv(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'Sub': {\n            return [ops.sub(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'Minimum': {\n            return [ops.minimum(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'Maximum': {\n            return [ops.maximum(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'Pow': {\n            return [ops.pow(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'SquaredDifference': {\n            return [ops.squaredDifference(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'arithmetic';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue, getTensor } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'Abs':\n        case 'ComplexAbs':\n            return [ops.abs(getParamValue('x', node, tensorMap, context))];\n        case 'Acos':\n            return [ops.acos(getParamValue('x', node, tensorMap, context))];\n        case 'Acosh':\n            return [ops.acosh(getParamValue('x', node, tensorMap, context))];\n        case 'Asin':\n            return [ops.asin(getParamValue('x', node, tensorMap, context))];\n        case 'Asinh':\n            return [ops.asinh(getParamValue('x', node, tensorMap, context))];\n        case 'Atan':\n            return [ops.atan(getParamValue('x', node, tensorMap, context))];\n        case 'Atan2':\n            return [ops.atan2(getParamValue('x', node, tensorMap, context), getParamValue('y', node, tensorMap, context))];\n        case 'Atanh':\n            return [ops.atanh(getParamValue('x', node, tensorMap, context))];\n        case 'Ceil':\n            return [ops.ceil(getParamValue('x', node, tensorMap, context))];\n        case 'Complex':\n            return [ops.complex(getParamValue('real', node, tensorMap, context), getParamValue('imag', node, tensorMap, context))];\n        case 'Cos':\n            return [ops.cos(getParamValue('x', node, tensorMap, context))];\n        case 'Cosh':\n            return [ops.cosh(getParamValue('x', node, tensorMap, context))];\n        case 'Elu':\n            return [ops.elu(getParamValue('x', node, tensorMap, context))];\n        case 'Erf':\n            return [ops.erf(getParamValue('x', node, tensorMap, context))];\n        case 'Exp':\n            return [ops.exp(getParamValue('x', node, tensorMap, context))];\n        case 'Expm1': {\n            return [ops.expm1(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Floor':\n            return [ops.floor(getParamValue('x', node, tensorMap, context))];\n        case 'Log':\n            return [ops.log(getParamValue('x', node, tensorMap, context))];\n        case 'Log1p': {\n            return [ops.log1p(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Imag':\n            return [ops.imag(getParamValue('x', node, tensorMap, context))];\n        case 'Neg':\n            return [ops.neg(getParamValue('x', node, tensorMap, context))];\n        case 'Reciprocal': {\n            return [ops.reciprocal(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Real':\n            return [ops.real(getParamValue('x', node, tensorMap, context))];\n        case 'Relu':\n            return [ops.relu(getParamValue('x', node, tensorMap, context))];\n        case 'Round': {\n            return [ops.round(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Selu':\n            return [ops.selu(getParamValue('x', node, tensorMap, context))];\n        case 'Sigmoid':\n            return [ops.sigmoid(getParamValue('x', node, tensorMap, context))];\n        case 'Sin':\n            return [ops.sin(getParamValue('x', node, tensorMap, context))];\n        case 'Sign': {\n            return [ops.sign(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Sinh': {\n            return [ops.sinh(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Softplus': {\n            return [ops.softplus(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Sqrt': {\n            return [ops.sqrt(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Square': {\n            return [ops.square(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Tanh': {\n            return [ops.tanh(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Tan':\n            return [ops.tan(getParamValue('x', node, tensorMap, context))];\n        case 'ClipByValue':\n            return [ops.clipByValue(getParamValue('x', node, tensorMap, context), getParamValue('clipValueMin', node, tensorMap, context), getParamValue('clipValueMax', node, tensorMap, context))];\n        case 'Relu6':\n            return [ops.relu6(getParamValue('x', node, tensorMap, context))];\n        case 'Rsqrt':\n            return [ops.rsqrt(getTensor(node.inputNames[0], tensorMap, context))];\n        case 'LeakyRelu':\n            return [ops.leakyRelu(getParamValue('x', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context))];\n        case 'Prelu':\n            return [ops.prelu(getParamValue('x', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context))];\n        case 'IsNan':\n            return [ops.isNaN(getTensor(node.inputNames[0], tensorMap, context))];\n        case 'IsInf':\n            return [ops.isInf(getTensor(node.inputNames[0], tensorMap, context))];\n        case 'IsFinite':\n            return [ops.isFinite(getTensor(node.inputNames[0], tensorMap, context))];\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'basic_math';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * This differs from util.assertShapesMatch in that it allows values of\n * negative one, an undefined size of a dimensinon, in a shape to match\n * anything.\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * Used by TensorList and TensorArray to verify if elementShape matches, support\n * negative value as the dim shape.\n * @param shapeA\n * @param shapeB\n * @param errorMessagePrefix\n */\nexport function assertShapesMatchAllowUndefinedSize(shapeA, shapeB, errorMessagePrefix = '') {\n    // constant shape means unknown rank\n    if (typeof shapeA === 'number' || typeof shapeB === 'number') {\n        return;\n    }\n    util.assert(shapeA.length === shapeB.length, () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n    for (let i = 0; i < shapeA.length; i++) {\n        const dim0 = shapeA[i];\n        const dim1 = shapeB[i];\n        util.assert(dim0 < 0 || dim1 < 0 || dim0 === dim1, () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n    }\n}\nexport function fullDefinedShape(elementShape) {\n    if (typeof elementShape === 'number' || elementShape.some(dim => dim < 0)) {\n        return false;\n    }\n    return true;\n}\n/**\n * Generate the output element shape from the list elementShape, list tensors\n * and input param.\n * @param listElementShape\n * @param tensors\n * @param elementShape\n */\nexport function inferElementShape(listElementShape, tensors, elementShape) {\n    let partialShape = mergeElementShape(listElementShape, elementShape);\n    const notfullDefinedShape = !fullDefinedShape(partialShape);\n    if (notfullDefinedShape && tensors.length === 0) {\n        throw new Error(`Tried to calculate elements of an empty list` +\n            ` with non-fully-defined elementShape: ${partialShape}`);\n    }\n    if (notfullDefinedShape) {\n        tensors.forEach(tensor => {\n            partialShape = mergeElementShape(tensor.shape, partialShape);\n        });\n    }\n    if (!fullDefinedShape(partialShape)) {\n        throw new Error(`Non-fully-defined elementShape: ${partialShape}`);\n    }\n    return partialShape;\n}\nexport function mergeElementShape(elementShapeA, elementShapeB) {\n    if (typeof elementShapeA === 'number') {\n        return elementShapeB;\n    }\n    if (typeof elementShapeB === 'number') {\n        return elementShapeA;\n    }\n    if (elementShapeA.length !== elementShapeB.length) {\n        throw new Error(`Incompatible ranks during merge: ${elementShapeA} vs. ${elementShapeB}`);\n    }\n    const result = [];\n    for (let i = 0; i < elementShapeA.length; ++i) {\n        const dim0 = elementShapeA[i];\n        const dim1 = elementShapeB[i];\n        if (dim0 >= 0 && dim1 >= 0 && dim0 !== dim1) {\n            throw new Error(`Incompatible shape during merge: ${elementShapeA} vs. ${elementShapeB}`);\n        }\n        result[i] = dim0 >= 0 ? dim0 : dim1;\n    }\n    return result;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat, keep, reshape, scalar, slice, stack, tensor, tidy, unstack } from '@tensorflow/tfjs-core';\nimport { assertShapesMatchAllowUndefinedSize } from './tensor_utils';\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\nexport class TensorArray {\n    constructor(name, dtype, maxSize, elementShape, identicalElementShapes, dynamicSize, clearAfterRead) {\n        this.name = name;\n        this.dtype = dtype;\n        this.maxSize = maxSize;\n        this.elementShape = elementShape;\n        this.identicalElementShapes = identicalElementShapes;\n        this.dynamicSize = dynamicSize;\n        this.clearAfterRead = clearAfterRead;\n        this.tensors = [];\n        this.closed_ = false;\n        this.idTensor = scalar(0);\n        keep(this.idTensor);\n    }\n    get id() {\n        return this.idTensor.id;\n    }\n    get closed() {\n        return this.closed_;\n    }\n    /**\n     * Dispose the tensors and idTensor and mark the TensoryArray as closed.\n     */\n    clearAndClose(keepIds) {\n        this.tensors.forEach(tensor => {\n            if (keepIds == null || !keepIds.has(tensor.tensor.id)) {\n                tensor.tensor.dispose();\n            }\n        });\n        this.tensors = [];\n        this.closed_ = true;\n        this.idTensor.dispose();\n    }\n    size() {\n        return this.tensors.length;\n    }\n    /**\n     * Read the value at location index in the TensorArray.\n     * @param index Number the index to read from.\n     */\n    read(index) {\n        if (this.closed_) {\n            throw new Error(`TensorArray ${this.name} has already been closed.`);\n        }\n        if (index < 0 || index >= this.size()) {\n            throw new Error(`Tried to read from index ${index}, but array size is: ${this.size()}`);\n        }\n        const tensorWithState = this.tensors[index];\n        if (tensorWithState.cleared) {\n            throw new Error(`TensorArray ${this.name}: Could not read index ${index} twice because it was cleared after a previous read ` +\n                `(perhaps try setting clear_after_read = false?).`);\n        }\n        if (this.clearAfterRead) {\n            tensorWithState.cleared = true;\n        }\n        tensorWithState.read = true;\n        return tensorWithState.tensor;\n    }\n    /**\n     * Helper method to read multiple tensors from the specified indices.\n     */\n    readMany(indices) {\n        return indices.map(index => this.read(index));\n    }\n    /**\n     * Write value into the index of the TensorArray.\n     * @param index number the index to write to.\n     * @param tensor\n     */\n    write(index, tensor) {\n        if (this.closed_) {\n            throw new Error(`TensorArray ${this.name} has already been closed.`);\n        }\n        if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n            throw new Error(`Tried to write to index ${index}, but array is not resizeable and size is: ${this.maxSize}`);\n        }\n        const t = this.tensors[index] || {};\n        if (tensor.dtype !== this.dtype) {\n            throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n        }\n        // Set the shape for the first time write to unknow shape tensor array\n        if (this.size() === 0 &&\n            (this.elementShape == null || this.elementShape.length === 0)) {\n            this.elementShape = tensor.shape;\n        }\n        assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, `TensorArray ${this.name}: Could not write to TensorArray index ${index}.`);\n        if (t.read) {\n            throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been read.`);\n        }\n        if (t.written) {\n            throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been written.`);\n        }\n        t.tensor = tensor;\n        keep(tensor);\n        t.written = true;\n        this.tensors[index] = t;\n    }\n    /**\n     * Helper method to write multiple tensors to the specified indices.\n     */\n    writeMany(indices, tensors) {\n        if (indices.length !== tensors.length) {\n            throw new Error(`TensorArray ${this.name}: could not write multiple tensors,` +\n                `because the index size: ${indices.length} is not the same as tensors size: ${tensors.length}.`);\n        }\n        indices.forEach((i, index) => this.write(i, tensors[index]));\n    }\n    /**\n     * Return selected values in the TensorArray as a packed Tensor. All of\n     * selected values must have been written and their shapes must all match.\n     * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n     *    TensorArray is not dynamic, max_value=size(). If not specified returns\n     *    all tensors in the original order.\n     * @param [dtype]\n     */\n    gather(indices, dtype) {\n        if (!!dtype && dtype !== this.dtype) {\n            throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${dtype}`);\n        }\n        if (!indices) {\n            indices = [];\n            for (let i = 0; i < this.size(); i++) {\n                indices.push(i);\n            }\n        }\n        else {\n            indices = indices.slice(0, this.size());\n        }\n        if (indices.length === 0) {\n            return tensor([], [0].concat(this.elementShape));\n        }\n        // Read all the PersistentTensors into a vector to keep track of\n        // their memory.\n        const tensors = this.readMany(indices);\n        assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n        return stack(tensors, 0);\n    }\n    /**\n     * Return the values in the TensorArray as a concatenated Tensor.\n     */\n    concat(dtype) {\n        if (!!dtype && dtype !== this.dtype) {\n            throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${dtype}`);\n        }\n        if (this.size() === 0) {\n            return tensor([], [0].concat(this.elementShape));\n        }\n        const indices = [];\n        for (let i = 0; i < this.size(); i++) {\n            indices.push(i);\n        }\n        // Collect all the tensors from the tensors array.\n        const tensors = this.readMany(indices);\n        assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n        return concat(tensors, 0);\n    }\n    /**\n     * Scatter the values of a Tensor in specific indices of a TensorArray.\n     * @param indices number[] values in [0, max_value). If the\n     *    TensorArray is not dynamic, max_value=size().\n     * @param tensor Tensor input tensor.\n     */\n    scatter(indices, tensor) {\n        if (tensor.dtype !== this.dtype) {\n            throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);\n        }\n        if (indices.length !== tensor.shape[0]) {\n            throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);\n        }\n        const maxIndex = Math.max(...indices);\n        if (!this.dynamicSize && maxIndex >= this.maxSize) {\n            throw new Error(`Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n        }\n        this.writeMany(indices, unstack(tensor, 0));\n    }\n    /**\n     * Split the values of a Tensor into the TensorArray.\n     * @param length number[] with the lengths to use when splitting value along\n     *    its first dimension.\n     * @param tensor Tensor, the tensor to split.\n     */\n    split(length, tensor) {\n        if (tensor.dtype !== this.dtype) {\n            throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);\n        }\n        let totalLength = 0;\n        const cumulativeLengths = length.map(len => {\n            totalLength += len;\n            return totalLength;\n        });\n        if (totalLength !== tensor.shape[0]) {\n            throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n        }\n        if (!this.dynamicSize && length.length !== this.maxSize) {\n            throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${length.length}), ` +\n                'and the TensorArray is not marked as dynamically resizeable');\n        }\n        const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n        const tensors = [];\n        tidy(() => {\n            tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n            for (let i = 0; i < length.length; ++i) {\n                const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n                const indices = [0, previousLength, 0];\n                const sizes = [1, length[i], elementPerRow];\n                tensors[i] = reshape(slice(tensor, indices, sizes), this.elementShape);\n            }\n            return tensors;\n        });\n        const indices = [];\n        for (let i = 0; i < length.length; i++) {\n            indices[i] = i;\n        }\n        this.writeMany(indices, tensors);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVuc29yX2FycmF5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1jb252ZXJ0ZXIvc3JjL2V4ZWN1dG9yL3RlbnNvcl9hcnJheS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFFSCxPQUFPLEVBQUMsTUFBTSxFQUFZLElBQUksRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUUzSCxPQUFPLEVBQUMsbUNBQW1DLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQVFuRTs7O0dBR0c7QUFDSCxNQUFNLE9BQU8sV0FBVztJQUl0QixZQUNhLElBQVksRUFBVyxLQUFlLEVBQVUsT0FBZSxFQUNoRSxZQUFzQixFQUFXLHNCQUErQixFQUMvRCxXQUFvQixFQUFXLGNBQXVCO1FBRnRELFNBQUksR0FBSixJQUFJLENBQVE7UUFBVyxVQUFLLEdBQUwsS0FBSyxDQUFVO1FBQVUsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUNoRSxpQkFBWSxHQUFaLFlBQVksQ0FBVTtRQUFXLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBUztRQUMvRCxnQkFBVyxHQUFYLFdBQVcsQ0FBUztRQUFXLG1CQUFjLEdBQWQsY0FBYyxDQUFTO1FBTjNELFlBQU8sR0FBc0IsRUFBRSxDQUFDO1FBQ2hDLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFNdEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRUQsSUFBSSxFQUFFO1FBQ0osT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENB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RUFBRSxLQUFLLENBQUMsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDeEU7WUFDRCxPQUFPLE9BQU8sQ0FBQztRQUNqQixDQUFDLENBQUMsQ0FBQztRQUNILE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNuQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN0QyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2hCO1FBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDbkMsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge2NvbmNhdCwgRGF0YVR5cGUsIGtlZXAsIHJlc2hhcGUsIHNjYWxhciwgc2xpY2UsIHN0YWNrLCBUZW5zb3IsIHRlbnNvciwgdGlkeSwgdW5zdGFja30gZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcblxuaW1wb3J0IHthc3NlcnRTaGFwZXNNYXRjaEFsbG93VW5kZWZpbmVkU2l6ZX0gZnJvbSAnLi90ZW5zb3JfdXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRlbnNvcldpdGhTdGF0ZSB7XG4gIHRlbnNvcj86IFRlbnNvcjtcbiAgd3JpdHRlbj86IGJvb2xlYW47XG4gIHJlYWQ/OiBib29sZWFuO1xuICBjbGVhcmVkPzogYm9vbGVhbjtcbn1cbi8qKlxuICogVGhlIFRlbnNvckFycmF5IG9iamVjdCBrZWVwcyBhbiBhcnJheSBvZiBUZW5zb3JzLiAgSXRcbiAqIGFsbG93cyByZWFkaW5nIGZyb20gdGhlIGFycmF5IGFuZCB3cml0aW5nIHRvIHRoZSBhcnJheS5cbiAqL1xuZXhwb3J0IGNsYXNzIFRlbnNvckFycmF5IHtcbiAgcHJpdmF0ZSB0ZW5zb3JzOiBUZW5zb3JXaXRoU3RhdGVbXSA9IFtdO1xuICBwcml2YXRlIGNsb3NlZF8gPSBmYWxzZTtcbiAgcmVhZG9ubHkgaWRUZW5zb3I6IFRlbnNvcjtcbiAgY29uc3RydWN0b3IoXG4gICAgICByZWFkb25seSBuYW1lOiBzdHJpbmcsIHJlYWRvbmx5IGR0eXBlOiBEYXRhVHlwZSwgcHJpdmF0ZSBtYXhTaXplOiBudW1iZXIsXG4gICAgICBwcml2YXRlIGVsZW1lbnRTaGFwZTogbnVtYmVyW10sIHJlYWRvbmx5IGlkZW50aWNhbEVsZW1lbnRTaGFwZXM6IGJvb2xlYW4sXG4gICAgICByZWFkb25seSBkeW5hbWljU2l6ZTogYm9vbGVhbiwgcmVhZG9ubHkgY2xlYXJBZnRlclJlYWQ6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmlkVGVuc29yID0gc2NhbGFyKDApO1xuICAgIGtlZXAodGhpcy5pZFRlbnNvcik7XG4gIH1cblxuICBnZXQgaWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaWRUZW5zb3IuaWQ7XG4gIH1cblxuICBnZXQgY2xvc2VkKCkge1xuICAgIHJldHVybiB0aGlzLmNsb3NlZF87XG4gIH1cblxuICAvKipcbiAgICogRGlzcG9zZSB0aGUgdGVuc29ycyBhbmQgaWRUZW5zb3IgYW5kIG1hcmsgdGhlIFRlbnNvcnlBcnJheSBhcyBjbG9zZWQuXG4gICAqL1xuICBjbGVhckFuZENsb3NlKGtlZXBJZHM/OiBTZXQ8bnVtYmVyPikge1xuICAgIHRoaXMudGVuc29ycy5mb3JFYWNoKHRlbnNvciA9PiB7XG4gICAgICBpZiAoa2VlcElkcyA9PSBudWxsIHx8ICFrZWVwSWRzLmhhcyh0ZW5zb3IudGVuc29yLmlkKSkge1xuICAgICAgICB0ZW5zb3IudGVuc29yLmRpc3Bvc2UoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnRlbnNvcnMgPSBbXTtcbiAgICB0aGlzLmNsb3NlZF8gPSB0cnVlO1xuICAgIHRoaXMuaWRUZW5zb3IuZGlzcG9zZSgpO1xuICB9XG5cbiAgc2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnRlbnNvcnMubGVuZ3RoO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlYWQgdGhlIHZhbHVlIGF0IGxvY2F0aW9uIGluZGV4IGluIHRoZSBUZW5zb3JBcnJheS5cbiAgICogQHBhcmFtIGluZGV4IE51bWJlciB0aGUgaW5kZXggdG8gcmVhZCBmcm9tLlxuICAgKi9cbiAgcmVhZChpbmRleDogbnVtYmVyKTogVGVuc29yIHtcbiAgICBpZiAodGhpcy5jbG9zZWRfKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRlbnNvckFycmF5ICR7dGhpcy5uYW1lfSBoYXMgYWxyZWFkeSBiZWVuIGNsb3NlZC5gKTtcbiAgICB9XG5cbiAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMuc2l6ZSgpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRyaWVkIHRvIHJlYWQgZnJvbSBpbmRleCAke2luZGV4fSwgYnV0IGFycmF5IHNpemUgaXM6ICR7XG4gICAgICAgICAgdGhpcy5zaXplKCl9YCk7XG4gICAgfVxuXG4gICAgY29uc3QgdGVuc29yV2l0aFN0YXRlID0gdGhpcy50ZW5zb3JzW2luZGV4XTtcbiAgICBpZiAodGVuc29yV2l0aFN0YXRlLmNsZWFyZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgVGVuc29yQXJyYXkgJHt0aGlzLm5hbWV9OiBDb3VsZCBub3QgcmVhZCBpbmRleCAke1xuICAgICAgICAgICAgICBpbmRleH0gdHdpY2UgYmVjYXVzZSBpdCB3YXMgY2xlYXJlZCBhZnRlciBhIHByZXZpb3VzIHJlYWQgYCArXG4gICAgICAgICAgYChwZXJoYXBzIHRyeSBzZXR0aW5nIGNsZWFyX2FmdGVyX3JlYWQgPSBmYWxzZT8pLmApO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNsZWFyQWZ0ZXJSZWFkKSB7XG4gICAgICB0ZW5zb3JXaXRoU3RhdGUuY2xlYXJlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgdGVuc29yV2l0aFN0YXRlLnJlYWQgPSB0cnVlO1xuICAgIHJldHVybiB0ZW5zb3JXaXRoU3RhdGUudGVuc29yO1xuICB9XG5cbiAgLyoqXG4gICAqIEhlbHBlciBtZXRob2QgdG8gcmVhZCBtdWx0aXBsZSB0ZW5zb3JzIGZyb20gdGhlIHNwZWNpZmllZCBpbmRpY2VzLlxuICAgKi9cbiAgcmVhZE1hbnkoaW5kaWNlczogbnVtYmVyW10pOiBUZW5zb3JbXSB7XG4gICAgcmV0dXJuIGluZGljZXMubWFwKGluZGV4ID0+IHRoaXMucmVhZChpbmRleCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdyaXRlIHZhbHVlIGludG8gdGhlIGluZGV4IG9mIHRoZSBUZW5zb3JBcnJheS5cbiAgICogQHBhcmFtIGluZGV4IG51bWJlciB0aGUgaW5kZXggdG8gd3JpdGUgdG8uXG4gICAqIEBwYXJhbSB0ZW5zb3JcbiAgICovXG4gIHdyaXRlKGluZGV4OiBudW1iZXIsIHRlbnNvcjogVGVuc29yKSB7XG4gICAgaWYgKHRoaXMuY2xvc2VkXykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBUZW5zb3JBcnJheSAke3RoaXMubmFtZX0gaGFzIGFscmVhZHkgYmVlbiBjbG9zZWQuYCk7XG4gICAgfVxuXG4gICAgaWYgKGluZGV4IDwgMCB8fCAhdGhpcy5keW5hbWljU2l6ZSAmJiBpbmRleCA+PSB0aGlzLm1heFNpemUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVHJpZWQgdG8gd3JpdGUgdG8gaW5kZXggJHtcbiAgICAgICAgICBpbmRleH0sIGJ1dCBhcnJheSBpcyBub3QgcmVzaXplYWJsZSBhbmQgc2l6ZSBpczogJHt0aGlzLm1heFNpemV9YCk7XG4gICAgfVxuXG4gICAgY29uc3QgdCA9IHRoaXMudGVuc29yc1tpbmRleF0gfHwge307XG5cbiAgICBpZiAodGVuc29yLmR0eXBlICE9PSB0aGlzLmR0eXBlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRlbnNvckFycmF5ICR7XG4gICAgICAgICAgdGhpcy5uYW1lfTogQ291bGQgbm90IHdyaXRlIHRvIFRlbnNvckFycmF5IGluZGV4ICR7aW5kZXh9LFxuICAgICAgICAgIGJlY2F1c2UgdGhlIHZhbHVlIGR0eXBlIGlzICR7XG4gICAgICAgICAgdGVuc29yLmR0eXBlfSwgYnV0IFRlbnNvckFycmF5IGR0eXBlIGlzICR7dGhpcy5kdHlwZX0uYCk7XG4gICAgfVxuXG4gICAgLy8gU2V0IHRoZSBzaGFwZSBmb3IgdGhlIGZpcnN0IHRpbWUgd3JpdGUgdG8gdW5rbm93IHNoYXBlIHRlbnNvciBhcnJheVxuICAgIGlmICh0aGlzLnNpemUoKSA9PT0gMCAmJlxuICAgICAgICAodGhpcy5lbGVtZW50U2hhcGUgPT0gbnVsbCB8fCB0aGlzLmVsZW1lbnRTaGFwZS5sZW5ndGggPT09IDApKSB7XG4gICAgICB0aGlzLmVsZW1lbnRTaGFwZSA9IHRlbnNvci5zaGFwZTtcbiAgICB9XG5cbiAgICBhc3NlcnRTaGFwZXNNYXRjaEFsbG93VW5kZWZpbmVkU2l6ZShcbiAgICAgICAgdGhpcy5lbGVtZW50U2hhcGUsIHRlbnNvci5zaGFwZSxcbiAgICAgICAgYFRlbnNvckFycmF5ICR7dGhpcy5uYW1lfTogQ291bGQgbm90IHdyaXRlIHRvIFRlbnNvckFycmF5IGluZGV4ICR7XG4gICAgICAgICAgICBpbmRleH0uYCk7XG5cbiAgICBpZiAodC5yZWFkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYFRlbnNvckFycmF5ICR7dGhpcy5uYW1lfTogQ291bGQgbm90IHdyaXRlIHRvIFRlbnNvckFycmF5IGluZGV4ICR7XG4gICAgICAgICAgICAgIGluZGV4fSwgYmVjYXVzZSBpdCBoYXMgYWxyZWFkeSBiZWVuIHJlYWQuYCk7XG4gICAgfVxuXG4gICAgaWYgKHQud3JpdHRlbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBUZW5zb3JBcnJheSAke3RoaXMubmFtZX06IENvdWxkIG5vdCB3cml0ZSB0byBUZW5zb3JBcnJheSBpbmRleCAke1xuICAgICAgICAgICAgICBpbmRleH0sIGJlY2F1c2UgaXQgaGFzIGFscmVhZHkgYmVlbiB3cml0dGVuLmApO1xuICAgIH1cblxuICAgIHQudGVuc29yID0gdGVuc29yO1xuICAgIGtlZXAodGVuc29yKTtcbiAgICB0LndyaXR0ZW4gPSB0cnVlO1xuXG4gICAgdGhpcy50ZW5zb3JzW2luZGV4XSA9IHQ7XG4gIH1cblxuICAvKipcbiAgICogSGVscGVyIG1ldGhvZCB0byB3cml0ZSBtdWx0aXBsZSB0ZW5zb3JzIHRvIHRoZSBzcGVjaWZpZWQgaW5kaWNlcy5cbiAgICovXG4gIHdyaXRlTWFueShpbmRpY2VzOiBudW1iZXJbXSwgdGVuc29yczogVGVuc29yW10pIHtcbiAgICBpZiAoaW5kaWNlcy5sZW5ndGggIT09IHRlbnNvcnMubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYFRlbnNvckFycmF5ICR7dGhpcy5uYW1lfTogY291bGQgbm90IHdyaXRlIG11bHRpcGxlIHRlbnNvcnMsYCArXG4gICAgICAgICAgYGJlY2F1c2UgdGhlIGluZGV4IHNpemU6ICR7XG4gICAgICAgICAgICAgIGluZGljZXMubGVuZ3RofSBpcyBub3QgdGhlIHNhbWUgYXMgdGVuc29ycyBzaXplOiAke1xuICAgICAgICAgICAgICB0ZW5zb3JzLmxlbmd0aH0uYCk7XG4gICAgfVxuXG4gICAgaW5kaWNlcy5mb3JFYWNoKChpLCBpbmRleCkgPT4gdGhpcy53cml0ZShpLCB0ZW5zb3JzW2luZGV4XSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBzZWxlY3RlZCB2YWx1ZXMgaW4gdGhlIFRlbnNvckFycmF5IGFzIGEgcGFja2VkIFRlbnNvci4gQWxsIG9mXG4gICAqIHNlbGVjdGVkIHZhbHVlcyBtdXN0IGhhdmUgYmVlbiB3cml0dGVuIGFuZCB0aGVpciBzaGFwZXMgbXVzdCBhbGwgbWF0Y2guXG4gICAqIEBwYXJhbSBbaW5kaWNlc10gbnVtYmVyW10gT3B0aW9uYWwuIFRha2luZyB2YWx1ZXMgaW4gWzAsIG1heF92YWx1ZSkuIElmIHRoZVxuICAgKiAgICBUZW5zb3JBcnJheSBpcyBub3QgZHluYW1pYywgbWF4X3ZhbHVlPXNpemUoKS4gSWYgbm90IHNwZWNpZmllZCByZXR1cm5zXG4gICAqICAgIGFsbCB0ZW5zb3JzIGluIHRoZSBvcmlnaW5hbCBvcmRlci5cbiAgICogQHBhcmFtIFtkdHlwZV1cbiAgICovXG4gIGdhdGhlcihpbmRpY2VzPzogbnVtYmVyW10sIGR0eXBlPzogRGF0YVR5cGUpOiBUZW5zb3Ige1xuICAgIGlmICghIWR0eXBlICYmIGR0eXBlICE9PSB0aGlzLmR0eXBlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRlbnNvckFycmF5IGR0eXBlIGlzICR7XG4gICAgICAgICAgdGhpcy5kdHlwZX0gYnV0IGdhdGhlciByZXF1ZXN0ZWQgZHR5cGUgJHtkdHlwZX1gKTtcbiAgICB9XG5cbiAgICBpZiAoIWluZGljZXMpIHtcbiAgICAgIGluZGljZXMgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zaXplKCk7IGkrKykge1xuICAgICAgICBpbmRpY2VzLnB1c2goaSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGluZGljZXMgPSBpbmRpY2VzLnNsaWNlKDAsIHRoaXMuc2l6ZSgpKTtcbiAgICB9XG5cbiAgICBpZiAoaW5kaWNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0ZW5zb3IoW10sIFswXS5jb25jYXQodGhpcy5lbGVtZW50U2hhcGUpKTtcbiAgICB9XG5cbiAgICAvLyBSZWFkIGFsbCB0aGUgUGVyc2lzdGVudFRlbnNvcnMgaW50byBhIHZlY3RvciB0byBrZWVwIHRyYWNrIG9mXG4gICAgLy8gdGhlaXIgbWVtb3J5LlxuICAgIGNvbnN0IHRlbnNvcnMgPSB0aGlzLnJlYWRNYW55KGluZGljZXMpO1xuXG4gICAgYXNzZXJ0U2hhcGVzTWF0Y2hBbGxvd1VuZGVmaW5lZFNpemUoXG4gICAgICAgIHRoaXMuZWxlbWVudFNoYXBlLCB0ZW5zb3JzWzBdLnNoYXBlLCAnVGVuc29yQXJyYXkgc2hhcGUgbWlzbWF0Y2g6ICcpO1xuXG4gICAgcmV0dXJuIHN0YWNrKHRlbnNvcnMsIDApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgdmFsdWVzIGluIHRoZSBUZW5zb3JBcnJheSBhcyBhIGNvbmNhdGVuYXRlZCBUZW5zb3IuXG4gICAqL1xuICBjb25jYXQoZHR5cGU/OiBEYXRhVHlwZSk6IFRlbnNvciB7XG4gICAgaWYgKCEhZHR5cGUgJiYgZHR5cGUgIT09IHRoaXMuZHR5cGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGVuc29yQXJyYXkgZHR5cGUgaXMgJHtcbiAgICAgICAgICB0aGlzLmR0eXBlfSBidXQgY29uY2F0IHJlcXVlc3RlZCBkdHlwZSAke2R0eXBlfWApO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNpemUoKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRlbnNvcihbXSwgWzBdLmNvbmNhdCh0aGlzLmVsZW1lbnRTaGFwZSkpO1xuICAgIH1cblxuICAgIGNvbnN0IGluZGljZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2l6ZSgpOyBpKyspIHtcbiAgICAgIGluZGljZXMucHVzaChpKTtcbiAgICB9XG4gICAgLy8gQ29sbGVjdCBhbGwgdGhlIHRlbnNvcnMgZnJvbSB0aGUgdGVuc29ycyBhcnJheS5cbiAgICBjb25zdCB0ZW5zb3JzID0gdGhpcy5yZWFkTWFueShpbmRpY2VzKTtcblxuICAgIGFzc2VydFNoYXBlc01hdGNoQWxsb3dVbmRlZmluZWRTaXplKFxuICAgICAgICB0aGlzLmVsZW1lbnRTaGFwZSwgdGVuc29yc1swXS5zaGFwZSxcbiAgICAgICAgYFRlbnNvckFycmF5IHNoYXBlIG1pc21hdGNoOiB0ZW5zb3IgYXJyYXkgc2hhcGUgKCR7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRTaGFwZX0pIHZzIGZpcnN0IHRlbnNvciBzaGFwZSAoJHt0ZW5zb3JzWzBdLnNoYXBlfSlgKTtcblxuICAgIHJldHVybiBjb25jYXQodGVuc29ycywgMCk7XG4gIH1cblxuICAvKipcbiAgICogU2NhdHRlciB0aGUgdmFsdWVzIG9mIGEgVGVuc29yIGluIHNwZWNpZmljIGluZGljZXMgb2YgYSBUZW5zb3JBcnJheS5cbiAgICogQHBhcmFtIGluZGljZXMgbnVtYmVyW10gdmFsdWVzIGluIFswLCBtYXhfdmFsdWUpLiBJZiB0aGVcbiAgICogICAgVGVuc29yQXJyYXkgaXMgbm90IGR5bmFtaWMsIG1heF92YWx1ZT1zaXplKCkuXG4gICAqIEBwYXJhbSB0ZW5zb3IgVGVuc29yIGlucHV0IHRlbnNvci5cbiAgICovXG4gIHNjYXR0ZXIoaW5kaWNlczogbnVtYmVyW10sIHRlbnNvcjogVGVuc29yKSB7XG4gICAgaWYgKHRlbnNvci5kdHlwZSAhPT0gdGhpcy5kdHlwZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBUZW5zb3JBcnJheSBkdHlwZSBpcyAke1xuICAgICAgICAgIHRoaXMuZHR5cGV9IGJ1dCB0ZW5zb3IgaGFzIGR0eXBlICR7dGVuc29yLmR0eXBlfWApO1xuICAgIH1cblxuICAgIGlmIChpbmRpY2VzLmxlbmd0aCAhPT0gdGVuc29yLnNoYXBlWzBdKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGxlbihpbmRpY2VzKSA9PSB0ZW5zb3Iuc2hhcGVbMF0sIGJ1dCBzYXc6ICR7XG4gICAgICAgICAgaW5kaWNlcy5sZW5ndGh9IHZzLiAke3RlbnNvci5zaGFwZVswXX1gKTtcbiAgICB9XG5cbiAgICBjb25zdCBtYXhJbmRleCA9IE1hdGgubWF4KC4uLmluZGljZXMpO1xuXG4gICAgaWYgKCF0aGlzLmR5bmFtaWNTaXplICYmIG1heEluZGV4ID49IHRoaXMubWF4U2l6ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBNYXggaW5kZXggbXVzdCBiZSA8IGFycmF5IHNpemUgKCR7bWF4SW5kZXh9ICB2cy4gJHt0aGlzLm1heFNpemV9KWApO1xuICAgIH1cblxuICAgIHRoaXMud3JpdGVNYW55KGluZGljZXMsIHVuc3RhY2sodGVuc29yLCAwKSk7XG4gIH1cblxuICAvKipcbiAgICogU3BsaXQgdGhlIHZhbHVlcyBvZiBhIFRlbnNvciBpbnRvIHRoZSBUZW5zb3JBcnJheS5cbiAgICogQHBhcmFtIGxlbmd0aCBudW1iZXJbXSB3aXRoIHRoZSBsZW5ndGhzIHRvIHVzZSB3aGVuIHNwbGl0dGluZyB2YWx1ZSBhbG9uZ1xuICAgKiAgICBpdHMgZmlyc3QgZGltZW5zaW9uLlxuICAgKiBAcGFyYW0gdGVuc29yIFRlbnNvciwgdGhlIHRlbnNvciB0byBzcGxpdC5cbiAgICovXG4gIHNwbGl0KGxlbmd0aDogbnVtYmVyW10sIHRlbnNvcjogVGVuc29yKSB7XG4gICAgaWYgKHRlbnNvci5kdHlwZSAhPT0gdGhpcy5kdHlwZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBUZW5zb3JBcnJheSBkdHlwZSBpcyAke1xuICAgICAgICAgIHRoaXMuZHR5cGV9IGJ1dCB0ZW5zb3IgaGFzIGR0eXBlICR7dGVuc29yLmR0eXBlfWApO1xuICAgIH1cbiAgICBsZXQgdG90YWxMZW5ndGggPSAwO1xuICAgIGNvbnN0IGN1bXVsYXRpdmVMZW5ndGhzID0gbGVuZ3RoLm1hcChsZW4gPT4ge1xuICAgICAgdG90YWxMZW5ndGggKz0gbGVuO1xuICAgICAgcmV0dXJuIHRvdGFsTGVuZ3RoO1xuICAgIH0pO1xuXG4gICAgaWYgKHRvdGFsTGVuZ3RoICE9PSB0ZW5zb3Iuc2hhcGVbMF0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgc3VtIG9mIGxlbmd0aHMgdG8gYmUgZXF1YWwgdG9cbiAgICAgICAgICB0ZW5zb3Iuc2hhcGVbMF0sIGJ1dCBzdW0gb2YgbGVuZ3RocyBpc1xuICAgICAgICAke3RvdGFsTGVuZ3RofSwgYW5kIHRlbnNvcidzIHNoYXBlIGlzOiAke3RlbnNvci5zaGFwZX1gKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuZHluYW1pY1NpemUgJiYgbGVuZ3RoLmxlbmd0aCAhPT0gdGhpcy5tYXhTaXplKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYFRlbnNvckFycmF5J3Mgc2l6ZSBpcyBub3QgZXF1YWwgdG8gdGhlIHNpemUgb2YgbGVuZ3RocyAoJHtcbiAgICAgICAgICAgICAgdGhpcy5tYXhTaXplfSB2cy4gJHtsZW5ndGgubGVuZ3RofSksIGAgK1xuICAgICAgICAgICdhbmQgdGhlIFRlbnNvckFycmF5IGlzIG5vdCBtYXJrZWQgYXMgZHluYW1pY2FsbHkgcmVzaXplYWJsZScpO1xuICAgIH1cblxuICAgIGNvbnN0IGVsZW1lbnRQZXJSb3cgPSB0b3RhbExlbmd0aCA9PT0gMCA/IDAgOiB0ZW5zb3Iuc2l6ZSAvIHRvdGFsTGVuZ3RoO1xuICAgIGNvbnN0IHRlbnNvcnM6IFRlbnNvcltdID0gW107XG4gICAgdGlkeSgoKSA9PiB7XG4gICAgICB0ZW5zb3IgPSByZXNoYXBlKHRlbnNvciwgWzEsIHRvdGFsTGVuZ3RoLCBlbGVtZW50UGVyUm93XSk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aC5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCBwcmV2aW91c0xlbmd0aCA9IChpID09PSAwKSA/IDAgOiBjdW11bGF0aXZlTGVuZ3Roc1tpIC0gMV07XG4gICAgICAgIGNvbnN0IGluZGljZXMgPSBbMCwgcHJldmlvdXNMZW5ndGgsIDBdO1xuICAgICAgICBjb25zdCBzaXplcyA9IFsxLCBsZW5ndGhbaV0sIGVsZW1lbnRQZXJSb3ddO1xuICAgICAgICB0ZW5zb3JzW2ldID0gcmVzaGFwZShzbGljZSh0ZW5zb3IsIGluZGljZXMsIHNpemVzKSwgdGhpcy5lbGVtZW50U2hhcGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRlbnNvcnM7XG4gICAgfSk7XG4gICAgY29uc3QgaW5kaWNlcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpbmRpY2VzW2ldID0gaTtcbiAgICB9XG4gICAgdGhpcy53cml0ZU1hbnkoaW5kaWNlcywgdGVuc29ycyk7XG4gIH1cbn1cbiJdfQ==","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat, keep, reshape, scalar, slice, stack, tensor, tidy, unstack } from '@tensorflow/tfjs-core';\nimport { assertShapesMatchAllowUndefinedSize, inferElementShape, mergeElementShape } from './tensor_utils';\n/**\n * TensorList stores a container of `tf.Tensor` objects, which are accessible\n * via tensors field.\n *\n * In order to get a copy of the underlying list, use the copy method:\n * ```\n *    TensorList b = a.copy();\n *    b.tensors().pushBack(t);  // This does not modify a.tensors().\n * ```\n *\n * Note that this is not a deep copy: the memory locations of the underlying\n * tensors will still point to the same locations of the corresponding tensors\n * in the original.\n */\nexport class TensorList {\n    get id() {\n        return this.idTensor.id;\n    }\n    /**\n     *\n     * @param tensors list of tensors\n     * @param elementShape shape of each tensor, this can be a single number (any\n     * shape is allowed) or partial shape (dim = -1).\n     * @param elementDtype data type of each tensor\n     * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1\n     *   meaning that the size of `tensors` is unbounded.\n     */\n    constructor(tensors, elementShape, elementDtype, maxNumElements = -1) {\n        this.tensors = tensors;\n        this.elementShape = elementShape;\n        this.elementDtype = elementDtype;\n        if (tensors != null) {\n            tensors.forEach(tensor => {\n                if (elementDtype !== tensor.dtype) {\n                    throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${tensor.dtype}`);\n                }\n                assertShapesMatchAllowUndefinedSize(elementShape, tensor.shape, 'TensorList shape mismatch: ');\n                keep(tensor);\n            });\n        }\n        this.idTensor = scalar(0);\n        this.maxNumElements = maxNumElements;\n        keep(this.idTensor);\n    }\n    /**\n     * Get a new TensorList containing a copy of the underlying tensor container.\n     */\n    copy() {\n        return new TensorList([...this.tensors], this.elementShape, this.elementDtype);\n    }\n    /**\n     * Dispose the tensors and idTensor and clear the tensor list.\n     */\n    clearAndClose(keepIds) {\n        this.tensors.forEach(tensor => {\n            if (keepIds == null || !keepIds.has(tensor.id)) {\n                tensor.dispose();\n            }\n        });\n        this.tensors.length = 0;\n        this.idTensor.dispose();\n    }\n    /**\n     * The size of the tensors in the tensor list.\n     */\n    size() {\n        return this.tensors.length;\n    }\n    /**\n     * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)\n     * tf.Tensor.\n     * @param elementShape shape of each tensor\n     * @param elementDtype data type of each tensor\n     * @param numElements the number of elements to stack\n     */\n    stack(elementShape, elementDtype, numElements = -1) {\n        if (elementDtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n        }\n        if (numElements !== -1 && this.tensors.length !== numElements) {\n            throw new Error(`Operation expected a list with ${numElements} elements but got a list with ${this.tensors.length} elements.`);\n        }\n        assertShapesMatchAllowUndefinedSize(elementShape, this.elementShape, 'TensorList shape mismatch: ');\n        const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n        return tidy(() => {\n            const reshapedTensors = this.tensors.map(tensor => reshape(tensor, outputElementShape));\n            return stack(reshapedTensors, 0);\n        });\n    }\n    /**\n     * Pop a tensor from the end of the list.\n     * @param elementShape shape of the tensor\n     * @param elementDtype data type of the tensor\n     */\n    popBack(elementShape, elementDtype) {\n        if (elementDtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n        }\n        if (this.size() === 0) {\n            throw new Error('Trying to pop from an empty list.');\n        }\n        const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n        const tensor = this.tensors.pop();\n        tensor.kept = false;\n        assertShapesMatchAllowUndefinedSize(tensor.shape, elementShape, 'TensorList shape mismatch: ');\n        return reshape(tensor, outputElementShape);\n    }\n    /**\n     * Push a tensor to the end of the list.\n     * @param tensor Tensor to be pushed.\n     */\n    pushBack(tensor) {\n        if (tensor.dtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(tensor.shape, this.elementShape, 'TensorList shape mismatch: ');\n        if (this.maxNumElements === this.size()) {\n            throw new Error(`Trying to push element into a full list.`);\n        }\n        keep(tensor);\n        this.tensors.push(tensor);\n    }\n    /**\n     * Update the size of the list.\n     * @param size the new size of the list.\n     */\n    resize(size) {\n        if (size < 0) {\n            throw new Error(`TensorListResize expects size to be non-negative. Got: ${size}`);\n        }\n        if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n            throw new Error(`TensorListResize input size ${size} is greater maxNumElement ${this.maxNumElements}.`);\n        }\n        const destTensorList = new TensorList([], this.elementShape, this.elementDtype, this.maxNumElements);\n        destTensorList.tensors.length = size;\n        for (let i = 0; i < Math.min(this.tensors.length, size); ++i) {\n            destTensorList.tensors[i] = this.tensors[i];\n        }\n        return destTensorList;\n    }\n    /**\n     * Retrieve the element at the provided index\n     * @param elementShape shape of the tensor\n     * @param elementDtype dtype of the tensor\n     * @param elementIndex index of the tensor\n     */\n    getItem(elementIndex, elementShape, elementDtype) {\n        if (elementDtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n        }\n        if (elementIndex < 0 || elementIndex > this.tensors.length) {\n            throw new Error(`Trying to access element ${elementIndex} in a list with ${this.tensors.length} elements.`);\n        }\n        if (this.tensors[elementIndex] == null) {\n            throw new Error(`element at index ${elementIndex} is null.`);\n        }\n        assertShapesMatchAllowUndefinedSize(this.tensors[elementIndex].shape, elementShape, 'TensorList shape mismatch: ');\n        const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n        return reshape(this.tensors[elementIndex], outputElementShape);\n    }\n    /**\n     * Set the tensor at the index\n     * @param elementIndex index of the tensor\n     * @param tensor the tensor to be inserted into the list\n     */\n    setItem(elementIndex, tensor) {\n        if (tensor.dtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);\n        }\n        if (elementIndex < 0 ||\n            this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n            throw new Error(`Trying to set element ${elementIndex} in a list with max ${this.maxNumElements} elements.`);\n        }\n        assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, 'TensorList shape mismatch: ');\n        keep(tensor);\n        // dispose the previous value if it is replacing.\n        if (this.tensors[elementIndex] != null) {\n            this.tensors[elementIndex].kept = false;\n        }\n        this.tensors[elementIndex] = tensor;\n    }\n    /**\n     * Return selected values in the TensorList as a stacked Tensor. All of\n     * selected values must have been written and their shapes must all match.\n     * @param indices indices of tensors to gather\n     * @param elementDtype output tensor dtype\n     * @param elementShape output tensor element shape\n     */\n    gather(indices, elementDtype, elementShape) {\n        if (elementDtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');\n        // When indices is greater than the size of the list, indices beyond the\n        // size of the list are ignored.\n        indices = indices.slice(0, this.size());\n        const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n        if (indices.length === 0) {\n            return tensor([], [0].concat(outputElementShape));\n        }\n        return tidy(() => {\n            const tensors = indices.map(i => reshape(this.tensors[i], outputElementShape));\n            return stack(tensors, 0);\n        });\n    }\n    /**\n     * Return the values in the TensorList as a concatenated Tensor.\n     * @param elementDtype output tensor dtype\n     * @param elementShape output tensor element shape\n     */\n    concat(elementDtype, elementShape) {\n        if (!!elementDtype && elementDtype !== this.elementDtype) {\n            throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${elementDtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');\n        const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n        if (this.size() === 0) {\n            return tensor([], [0].concat(outputElementShape));\n        }\n        return tidy(() => {\n            const tensors = this.tensors.map(t => reshape(t, outputElementShape));\n            return concat(tensors, 0);\n        });\n    }\n}\n/**\n * Creates a TensorList which, when stacked, has the value of tensor.\n * @param tensor from tensor\n * @param elementShape output tensor element shape\n */\nexport function fromTensor(tensor, elementShape, elementDtype) {\n    const dtype = tensor.dtype;\n    if (tensor.shape.length < 1) {\n        throw new Error(`Tensor must be at least a vector, but saw shape: ${tensor.shape}`);\n    }\n    if (tensor.dtype !== elementDtype) {\n        throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${elementDtype}`);\n    }\n    const tensorElementShape = tensor.shape.slice(1);\n    assertShapesMatchAllowUndefinedSize(tensorElementShape, elementShape, 'TensorList shape mismatch: ');\n    const tensorList = unstack(tensor);\n    return new TensorList(tensorList, elementShape, dtype);\n}\n/**\n * Return a TensorList of the given size with empty elements.\n * @param elementShape the shape of the future elements of the list\n * @param elementDtype the desired type of elements in the list\n * @param numElements the number of elements to reserve\n * @param maxNumElements the maximum number of elements in th list\n */\nexport function reserve(elementShape, elementDtype, numElements, maxNumElements) {\n    return new TensorList([], elementShape, elementDtype, maxNumElements);\n}\n/**\n * Put tensors at specific indices of a stacked tensor into a TensorList.\n * @param indices list of indices on how to scatter the tensor.\n * @param tensor input tensor.\n * @param elementShape the shape of the future elements of the list\n * @param numElements the number of elements to scatter\n */\nexport function scatter(tensor, indices, elementShape, numElements) {\n    if (indices.length !== tensor.shape[0]) {\n        throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);\n    }\n    const maxIndex = Math.max(...indices);\n    if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n        throw new Error(`Max index must be < array size (${maxIndex}  vs. ${numElements})`);\n    }\n    const list = new TensorList([], elementShape, tensor.dtype, numElements);\n    const tensors = unstack(tensor, 0);\n    indices.forEach((value, index) => {\n        list.setItem(value, tensors[index]);\n    });\n    return list;\n}\n/**\n * Split the values of a Tensor into a TensorList.\n * @param length the lengths to use when splitting value along\n *    its first dimension.\n * @param tensor the tensor to split.\n * @param elementShape the shape of the future elements of the list\n */\nexport function split(tensor, length, elementShape) {\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n        totalLength += len;\n        return totalLength;\n    });\n    if (totalLength !== tensor.shape[0]) {\n        throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n    const shapeWithoutFirstDim = tensor.shape.slice(1);\n    const outputElementShape = mergeElementShape(shapeWithoutFirstDim, elementShape);\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors = tidy(() => {\n        const tensors = [];\n        tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n        for (let i = 0; i < length.length; ++i) {\n            const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n            const indices = [0, previousLength, 0];\n            const sizes = [1, length[i], elementPerRow];\n            tensors[i] = reshape(slice(tensor, indices, sizes), outputElementShape);\n        }\n        tensor.dispose();\n        return tensors;\n    });\n    const list = new TensorList([], elementShape, tensor.dtype, length.length);\n    for (let i = 0; i < tensors.length; i++) {\n        list.setItem(i, tensors[i]);\n    }\n    return list;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { scalar } from '@tensorflow/tfjs-core';\nimport { TensorArray } from '../../executor/tensor_array';\nimport { fromTensor, reserve, scatter, split } from '../../executor/tensor_list';\nimport { cloneTensor, getParamValue, getTensor } from './utils';\nexport const executeOp = async (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'If':\n        case 'StatelessIf': {\n            const thenFunc = getParamValue('thenBranch', node, tensorMap, context);\n            const elseFunc = getParamValue('elseBranch', node, tensorMap, context);\n            const cond = getParamValue('cond', node, tensorMap, context);\n            const args = getParamValue('args', node, tensorMap, context);\n            const condValue = await cond.data();\n            if (condValue[0]) {\n                return context.functionMap[thenFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n            }\n            else {\n                return context.functionMap[elseFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n            }\n        }\n        case 'While':\n        case 'StatelessWhile': {\n            const bodyFunc = getParamValue('body', node, tensorMap, context);\n            const condFunc = getParamValue('cond', node, tensorMap, context);\n            const args = getParamValue('args', node, tensorMap, context);\n            // Calculate the condition of the loop\n            const condResult = (await context.functionMap[condFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap));\n            const argIds = args.map(tensor => tensor.id);\n            let condValue = await condResult[0].data();\n            // Dispose the intermediate tensors for condition function\n            condResult.forEach(tensor => {\n                if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {\n                    tensor.dispose();\n                }\n            });\n            let result = args;\n            while (condValue[0]) {\n                // Record the previous result for intermediate tensor tracking\n                const origResult = result;\n                // Execution the body of the loop\n                result = await context.functionMap[bodyFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);\n                const resultIds = result.map(tensor => tensor.id);\n                // Dispose the intermediate tensor for body function that is not global\n                // kept, not input/output of the body function\n                origResult.forEach(tensor => {\n                    if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n                        resultIds.indexOf(tensor.id) === -1) {\n                        tensor.dispose();\n                    }\n                });\n                // Recalcuate the condition of the loop using the latest results.\n                const condResult = (await context.functionMap[condFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap));\n                condValue = await condResult[0].data();\n                // Dispose the intermediate tensors for condition function\n                condResult.forEach(tensor => {\n                    if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n                        resultIds.indexOf(tensor.id) === -1) {\n                        tensor.dispose();\n                    }\n                });\n            }\n            return result;\n        }\n        case 'LoopCond': {\n            const pred = getParamValue('pred', node, tensorMap, context);\n            return [cloneTensor(pred)];\n        }\n        case 'Switch': {\n            const pred = getParamValue('pred', node, tensorMap, context);\n            let data = getParamValue('data', node, tensorMap, context);\n            if (!data.kept) {\n                data = cloneTensor(data);\n            }\n            // Outputs nodes :0 => false, :1 => true\n            return (await pred.data())[0] ? [undefined, data] : [data, undefined];\n        }\n        case 'Merge': {\n            const inputName = node.inputNames.find(name => getTensor(name, tensorMap, context) !== undefined);\n            if (inputName) {\n                const data = getTensor(inputName, tensorMap, context);\n                return [cloneTensor(data)];\n            }\n            return undefined;\n        }\n        case 'Enter': {\n            const frameId = getParamValue('frameName', node, tensorMap, context);\n            const data = getParamValue('tensor', node, tensorMap, context);\n            context.enterFrame(frameId);\n            return [cloneTensor(data)];\n        }\n        case 'Exit': {\n            const data = getParamValue('tensor', node, tensorMap, context);\n            context.exitFrame();\n            return [cloneTensor(data)];\n        }\n        case 'NextIteration': {\n            const data = getParamValue('tensor', node, tensorMap, context);\n            context.nextIteration();\n            return [cloneTensor(data)];\n        }\n        case 'TensorArrayV3': {\n            const size = getParamValue('size', node, tensorMap, context);\n            const dtype = getParamValue('dtype', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const dynamicSize = getParamValue('dynamicSize', node, tensorMap, context);\n            const clearAfterRead = getParamValue('clearAfterRead', node, tensorMap, context);\n            const identicalElementShapes = getParamValue('identicalElementShapes', node, tensorMap, context);\n            const name = getParamValue('name', node, tensorMap, context);\n            const tensorArray = new TensorArray(name, dtype, size, elementShape, identicalElementShapes, dynamicSize, clearAfterRead);\n            context.addTensorArray(tensorArray);\n            return [tensorArray.idTensor, scalar(1.0)];\n        }\n        case 'TensorArrayWriteV3': {\n            const id = getParamValue('tensorArrayId', node, tensorMap, context);\n            const index = getParamValue('index', node, tensorMap, context);\n            const writeTensor = getParamValue('tensor', node, tensorMap, context);\n            const writeTensorArray = context.getTensorArray(id.id);\n            writeTensorArray.write(index, writeTensor);\n            return [writeTensorArray.idTensor];\n        }\n        case 'TensorArrayReadV3': {\n            const readId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const readIndex = getParamValue('index', node, tensorMap, context);\n            const readTensorArray = context.getTensorArray(readId.id);\n            return [readTensorArray.read(readIndex)];\n        }\n        case 'TensorArrayGatherV3': {\n            const gatherId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const gatherIndices = getParamValue('indices', node, tensorMap, context);\n            const gatherDtype = getParamValue('dtype', node, tensorMap, context);\n            const gatherTensorArray = context.getTensorArray(gatherId.id);\n            return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n        }\n        case 'TensorArrayScatterV3': {\n            const scatterId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const scatterIndices = getParamValue('indices', node, tensorMap, context);\n            const scatterTensor = getParamValue('tensor', node, tensorMap, context);\n            const scatterTensorArray = context.getTensorArray(scatterId.id);\n            scatterTensorArray.scatter(scatterIndices, scatterTensor);\n            return [scatterTensorArray.idTensor];\n        }\n        case 'TensorArrayConcatV3': {\n            const concatId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const concatTensorArray = context.getTensorArray(concatId.id);\n            const concatDtype = getParamValue('dtype', node, tensorMap, context);\n            return [concatTensorArray.concat(concatDtype)];\n        }\n        case 'TensorArraySplitV3': {\n            const splitId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const splitTensor = getParamValue('tensor', node, tensorMap, context);\n            const lengths = getParamValue('lengths', node, tensorMap, context);\n            const splitTensorArray = context.getTensorArray(splitId.id);\n            splitTensorArray.split(lengths, splitTensor);\n            return [splitTensorArray.idTensor];\n        }\n        case 'TensorArraySizeV3': {\n            const sizeId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const sizeTensorArray = context.getTensorArray(sizeId.id);\n            return [scalar(sizeTensorArray.size(), 'int32')];\n        }\n        case 'TensorArrayCloseV3': {\n            const closeId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const closeTensorArray = context.getTensorArray(closeId.id);\n            closeTensorArray.clearAndClose();\n            return [closeTensorArray.idTensor];\n        }\n        case 'TensorListSetItem': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const index = getParamValue('index', node, tensorMap, context);\n            const writeTensor = getParamValue('tensor', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            tensorList.setItem(index, writeTensor);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListGetItem': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const readIndex = getParamValue('index', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDType = getParamValue('elementDType', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            return [tensorList.getItem(readIndex, elementShape, elementDType)];\n        }\n        case 'TensorListScatterV2':\n        case 'TensorListScatter': {\n            const scatterIndices = getParamValue('indices', node, tensorMap, context);\n            const scatterTensor = getParamValue('tensor', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const numElements = getParamValue('numElements', node, tensorMap, context);\n            const tensorList = scatter(scatterTensor, scatterIndices, elementShape, numElements);\n            context.addTensorList(tensorList);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListReserve':\n        case 'EmptyTensorList': {\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n            let numElementsParam;\n            if (node.op === 'TensorListReserve') {\n                numElementsParam = 'numElements';\n            }\n            else {\n                numElementsParam = 'maxNumElements';\n            }\n            const numElements = getParamValue(numElementsParam, node, tensorMap, context);\n            const maxNumElements = node.op === 'TensorListReserve' ? -1 : numElements;\n            const tensorList = reserve(elementShape, elementDtype, numElements, maxNumElements);\n            context.addTensorList(tensorList);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListGather': {\n            const gatherId = getParamValue('tensorListId', node, tensorMap, context);\n            const gatherIndices = getParamValue('indices', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n            const tensorList = context.getTensorList(gatherId.id);\n            return [tensorList.gather(gatherIndices, elementDtype, elementShape)];\n        }\n        case 'TensorListStack': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n            const numElements = getParamValue('numElements', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            return [tensorList.stack(elementShape, elementDtype, numElements)];\n        }\n        case 'TensorListFromTensor': {\n            const tensor = getParamValue('tensor', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n            const tensorList = fromTensor(tensor, elementShape, elementDtype);\n            context.addTensorList(tensorList);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListConcat':\n        case 'TensorListConcatV2': {\n            const concatId = getParamValue('tensorListId', node, tensorMap, context);\n            const tensorList = context.getTensorList(concatId.id);\n            const concatDtype = getParamValue('dtype', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            return [tensorList.concat(concatDtype, elementShape)];\n        }\n        case 'TensorListPushBack': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const writeTensor = getParamValue('tensor', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            tensorList.pushBack(writeTensor);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListPopBack': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDType = getParamValue('elementDType', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            return [tensorList.popBack(elementShape, elementDType)];\n        }\n        case 'TensorListSplit': {\n            const splitTensor = getParamValue('tensor', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const lengths = getParamValue('lengths', node, tensorMap, context);\n            const tensorList = split(splitTensor, lengths, elementShape);\n            context.addTensorList(tensorList);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListLength': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            return [scalar(tensorList.size(), 'int32')];\n        }\n        case 'TensorListResize': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const size = getParamValue('size', node, tensorMap, context);\n            const srcTensorList = context.getTensorList(idTensor.id);\n            const destTensorList = srcTensorList.resize(size);\n            context.addTensorList(destTensorList);\n            return [destTensorList.idTensor];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'control';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbF9leGVjdXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29udmVydGVyL3NyYy9vcGVyYXRpb25zL2V4ZWN1dG9ycy9jb250cm9sX2V4ZWN1dG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILE9BQU8sRUFBVyxNQUFNLEVBQVMsTUFBTSx1QkFBdUIsQ0FBQztBQUkvRCxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDeEQsT0FBTyxFQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBRy9FLE9BQU8sRUFBQyxXQUFXLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUU5RCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQTRCLEtBQUssRUFDbkQsSUFBVSxFQUFFLFNBQTBCLEVBQ3RDLE9BQXlCLEVBQXFCLEVBQUU7SUFDbEQsUUFBUSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2YsS0FBSyxJQUFJLENBQUM7UUFDVixLQUFLLGFBQWEsQ0FBQyxDQUFDO1lBQ2xCLE1BQU0sUUFBUSxHQUNWLGFBQWEsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQztZQUNwRSxNQUFNLFFBQVEsR0FDVixhQUFhLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUM7WUFDcEUsTUFBTSxJQUFJLEdBQUcsYUFBYSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQ3ZFLE1BQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQWEsQ0FBQztZQUN6RSxNQUFNLFNBQVMsR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNwQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDaEIsT0FBTyxPQUFPLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLG9CQUFvQixDQUNyRCxJQUFJLEVBQUUsT0FBTyxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDMUQ7aUJBQU07Z0JBQ0wsT0FBTyxPQUFPLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLG9CQUFvQixDQUNyRCxJQUFJLEVBQUUsT0FBTyxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDMUQ7U0FDRjtRQUNELEtBQUssT0FBTyxDQUFDO1FBQ2IsS0FBSyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ3JCLE1BQU0sUUFBUSxHQUNWLGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQztZQUM5RCxNQUFNLFFBQVEsR0FDVixhQUFhLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUM7WUFDOUQsTUFBTSxJQUFJLEdBQUcsYUFBYSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBYSxDQUFDO1lBRXpFLHNDQUFzQztZQUN0QyxNQUFNLFVBQVUsR0FDWixDQUFDLE1BQU0sT0FBTyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxvQkFBb0IsQ0FDckQsSUFBSSxFQUFFLE9BQU8sQ0FBQyxjQUFjLEVBQUUsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7WUFDOUQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM3QyxJQUFJLFNBQVMsR0FBRyxNQUFNLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUMzQywwREFBMEQ7WUFDMUQsVUFBVSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDMUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7b0JBQ3BELE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztpQkFDbEI7WUFDSCxDQUFDLENBQUMsQ0FBQztZQUVILElBQUksTUFBTSxHQUFhLElBQUksQ0FBQztZQUU1QixPQUFPLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDbkIsOERBQThEO2dCQUM5RCxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUM7Z0JBQzFCLGlDQUFpQztnQkFDakMsTUFBTSxHQUFHLE1BQU0sT0FBTyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxvQkFBb0IsQ0FDN0QsTUFBTSxFQUFFLE9BQU8sQ0FBQyxjQUFjLEVBQUUsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dCQUMzRCxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUVsRCx1RUFBdUU7Z0JBQ3ZFLDhDQUE4QztnQkFDOUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtvQkFDMUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQUNoRCxTQUFTLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTt3QkFDdkMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO3FCQUNsQjtnQkFDSCxDQUFDLENBQUMsQ0FBQztnQkFFSCxpRUFBaUU7Z0JBQ2pFLE1BQU0sVUFBVSxHQUNaLENBQUMsTUFBTSxPQUFPLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLG9CQUFvQixDQUNyRCxNQUFNLEVBQUUsT0FBTyxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztnQkFDaEUsU0FBUyxHQUFHLE1BQU0sVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUN2QywwREFBMEQ7Z0JBQzFELFVBQVUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQzt3QkFDaEQsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7d0JBQ3ZDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztxQkFDbEI7Z0JBQ0gsQ0FBQyxDQUFDLENBQUM7YUFDSjtZQUNELE9BQU8sTUFBTSxDQUFDO1NBQ2Y7UUFDRCxLQUFLLFVBQVUsQ0FBQyxDQUFDO1lBQ2YsTUFBTSxJQUFJLEdBQUcsYUFBYSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQ3ZFLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUM1QjtRQUNELEtBQUssUUFBUSxDQUFDLENBQUM7WUFDYixNQUFNLElBQUksR0FBRyxhQUFhLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUM7WUFDdkUsSUFBSSxJQUFJLEdBQUcsYUFBYSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQ3JFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNkLElBQUksR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDMUI7WUFDRCx3Q0FBd0M7WUFDeEMsT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztTQUN2RTtRQUNELEtBQUssT0FBTyxDQUFDLENBQUM7WUFDWixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FDbEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQztZQUMvRCxJQUFJLFNBQVMsRUFBRTtnQkFDYixNQUFNLElBQUksR0FBRyxTQUFTLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDdEQsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2FBQzVCO1lBQ0QsT0FBTyxTQUFTLENBQUM7U0FDbEI7UUFDRCxLQUFLLE9BQU8sQ0FBQyxDQUFDO1lBQ1osTUFBTSxPQUFPLEdBQ1QsYUFBYSxDQUFDLFdBQVcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQ25FLE1BQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQztZQUN6RSxPQUFPLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzVCLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUM1QjtRQUNELEtBQUssTUFBTSxDQUFDLENBQUM7WUFDWCxNQUFNLElBQUksR0FBRyxhQUFhLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUM7WUFDekUsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ3BCLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUM1QjtRQUNELEtBQUssZUFBZSxDQUFDLENBQUM7WUFDcEIsTUFBTSxJQUFJLEdBQUcsYUFBYSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQ3pFLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUN4QixPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDNUI7UUFDRCxLQUFLLGVBQWUsQ0FBQyxDQUFDO1lBQ3BCLE1BQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQztZQUN2RSxNQUFNLEtBQUssR0FDUCxhQUFhLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFhLENBQUM7WUFDakUsTUFBTSxZQUFZLEdBQ2QsYUFBYSxDQUFDLGNBQWMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBYSxDQUFDO1lBQ3hFLE1BQU0sV0FBVyxHQUNiLGFBQWEsQ0FBQyxhQUFhLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVksQ0FBQztZQUN0RSxNQUFNLGNBQWMsR0FDaEIsYUFBYSxDQUFDLGdCQUFnQixFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFZLENBQUM7WUFDekUsTUFBTSxzQkFBc0IsR0FDeEIsYUFBYSxDQUFDLHdCQUF3QixFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUN6RCxDQUFDO1lBQ1osTUFBTSxJQUFJLEdBQUcsYUFBYSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQ3ZFLE1BQU0sV0FBVyxHQUFHLElBQUksV0FBVyxDQUMvQixJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsc0JBQXNCLEVBQUUsV0FBVyxFQUNwRSxjQUFjLENBQUMsQ0FBQztZQUNwQixPQUFPLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3BDLE9BQU8sQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzVDO1FBQ0QsS0FBSyxvQkFBb0IsQ0FBQyxDQUFDO1lBQ3pCLE1BQU0sRUFBRSxHQUNKLGFBQWEsQ0FBQyxlQUFlLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQztZQUN2RSxNQUFNLEtBQUssR0FBRyxhQUFhLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUM7WUFDekUsTUFBTSxXQUFXLEdBQ2IsYUFBYSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQ2hFLE1BQU0sZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDdkQsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQztZQUMzQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDcEM7UUFDRCxLQUFLLG1CQUFtQixDQUFDLENBQUM7WUFDeEIsTUFBTSxNQUFNLEdBQ1IsYUFBYSxDQUFDLGVBQWUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQ3ZFLE1BQU0sU0FBUyxHQUNYLGFBQWEsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQztZQUMvRCxNQUFNLGVBQWUsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUMxRCxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1NBQzFDO1FBQ0QsS0FBSyxxQkFBcUIsQ0FBQyxDQUFDO1lBQzFCLE1BQU0sUUFBUSxHQUNWLGFBQWEsQ0FBQyxlQUFlLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQztZQUN2RSxNQUFNLGFBQWEsR0FDZixhQUFhLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFhLENBQUM7WUFDbkUsTUFBTSxXQUFXLEdBQ2IsYUFBYSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBYSxDQUFDO1lBQ2pFLE1BQU0saUJBQWlCLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDOUQsT0FBTyxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQztTQUMvRDtRQUNELEtBQUssc0JBQXNCLENBQUMsQ0FBQztZQUMzQixNQUFNLFNBQVMsR0FDWCxhQUFhLENBQUMsZUFBZSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUM7WUFDdkUsTUFBTSxjQUFjLEdBQ2hCLGFBQWEsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQWEsQ0FBQztZQUNuRSxNQUFNLGFBQWEsR0FDZixhQUFhLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUM7WUFDaEUsTUFBTSxrQkFBa0IsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNoRSxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1lBQzFELE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUN0QztRQUNELEtBQUsscUJBQXFCLENBQUMsQ0FBQztZQUMxQixNQUFNLFFBQVEsR0FDVixhQUFhLENBQUMsZUFBZSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUM7WUFDdkUsTUFBTSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM5RCxNQUFNLFdBQVcsR0FDYixhQUFhLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFhLENBQUM7WUFDakUsT0FBTyxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1NBQ2hEO1FBQ0QsS0FBSyxvQkFBb0IsQ0FBQyxDQUFDO1lBQ3pCLE1BQU0sT0FBTyxHQUNULGFBQWEsQ0FBQyxlQUFlLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQztZQUN2RSxNQUFNLFdBQVcsR0FDYixhQUFhLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUM7WUFDaEUsTUFBTSxPQUFPLEdBQ1QsYUFBYSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBYSxDQUFDO1lBQ25FLE1BQU0sZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDNUQsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQztZQUM3QyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDcEM7UUFDRCxLQUFLLG1CQUFtQixDQUFDLENBQUM7WUFDeEIsTUFBTSxNQUFNLEdBQ1IsYUFBYSxDQUFDLGVBQWUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQ3ZFLE1BQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzFELE9BQU8sQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDbEQ7UUFDRCxLQUFLLG9CQUFvQixDQUFDLENBQUM7WUFDekIsTUFBTSxPQUFPLEdBQ1QsYUFBYSxDQUFDLGVBQWUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQ3ZFLE1BQU0sZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDNUQsZ0JBQWdCLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDakMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3BDO1FBQ0QsS0FBSyxtQkFBbUIsQ0FBQyxDQUFDO1lBQ3hCLE1BQU0sUUFBUSxHQUNWLGFBQWEsQ0FBQyxjQUFjLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQztZQUN0RSxNQUFNLEtBQUssR0FBRyxhQUFhLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUM7WUFDekUsTUFBTSxXQUFXLEdBQ2IsYUFBYSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQ2hFLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3RELFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQ3ZDLE9BQU8sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDOUI7UUFDRCxLQUFLLG1CQUFtQixDQUFDLENBQUM7WUFDeEIsTUFBTSxRQUFRLEdBQ1YsYUFBYSxDQUFDLGNBQWMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQ3RFLE1BQU0sU0FBUyxHQUNYLGFBQWEsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQztZQUMvRCxNQUFNLFlBQVksR0FDZCxhQUFhLENBQUMsY0FBYyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFhLENBQUM7WUFFeEUsTUFBTSxZQUFZLEdBQ2QsYUFBYSxDQUFDLGNBQWMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBYSxDQUFDO1lBQ3hFLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3RELE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztTQUNwRTtRQUNELEtBQUsscUJBQXFCLENBQUM7UUFDM0IsS0FBSyxtQkFBbUIsQ0FBQyxDQUFDO1lBQ3hCLE1BQU0sY0FBYyxHQUNoQixhQUFhLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFhLENBQUM7WUFDbkUsTUFBTSxhQUFhLEdBQ2YsYUFBYSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQ2hFLE1BQU0sWUFBWSxHQUNkLGFBQWEsQ0FBQyxjQUFjLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQWEsQ0FBQztZQUN4RSxNQUFNLFdBQVcsR0FDYixhQUFhLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUM7WUFDckUsTUFBTSxVQUFVLEdBQ1osT0FBTyxDQUFDLGFBQWEsRUFBRSxjQUFjLEVBQUUsWUFBWSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQ3RFLE9BQU8sQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDbEMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUM5QjtRQUNELEtBQUssbUJBQW1CLENBQUM7UUFDekIsS0FBSyxpQkFBaUIsQ0FBQyxDQUFDO1lBQ3RCLE1BQU0sWUFBWSxHQUNkLGFBQWEsQ0FBQyxjQUFjLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQWEsQ0FBQztZQUN4RSxNQUFNLFlBQVksR0FDZCxhQUFhLENBQUMsY0FBYyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFhLENBQUM7WUFDeEUsSUFBSSxnQkFBZ0IsQ0FBQztZQUVyQixJQUFJLElBQUksQ0FBQyxFQUFFLEtBQUssbUJBQW1CLEVBQUU7Z0JBQ25DLGdCQUFnQixHQUFHLGFBQWEsQ0FBQzthQUNsQztpQkFBTTtnQkFDTCxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQzthQUNyQztZQUVELE1BQU0sV0FBVyxHQUNiLGFBQWEsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQ3hFLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxFQUFFLEtBQUssbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7WUFDMUUsTUFBTSxVQUFVLEdBQ1osT0FBTyxDQUFDLFlBQVksRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1lBQ3JFLE9BQU8sQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDbEMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUM5QjtRQUNELEtBQUssa0JBQWtCLENBQUMsQ0FBQztZQUN2QixNQUFNLFFBQVEsR0FDVixhQUFhLENBQUMsY0FBYyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUM7WUFDdEUsTUFBTSxhQUFhLEdBQ2YsYUFBYSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBYSxDQUFDO1lBQ25FLE1BQU0sWUFBWSxHQUNkLGFBQWEsQ0FBQyxjQUFjLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQWEsQ0FBQztZQUN4RSxNQUFNLFlBQVksR0FDZCxhQUFhLENBQUMsY0FBYyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFhLENBQUM7WUFDeEUsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDdEQsT0FBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLFlBQVksRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO1NBQ3ZFO1FBQ0QsS0FBSyxpQkFBaUIsQ0FBQyxDQUFDO1lBQ3RCLE1BQU0sUUFBUSxHQUNWLGFBQWEsQ0FBQyxjQUFjLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQztZQUN0RSxNQUFNLFlBQVksR0FDZCxhQUFhLENBQUMsY0FBYyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFhLENBQUM7WUFDeEUsTUFBTSxZQUFZLEdBQ2QsYUFBYSxDQUFDLGNBQWMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBYSxDQUFDO1lBQ3hFLE1BQU0sV0FBVyxHQUNiLGFBQWEsQ0FBQyxhQUFhLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQztZQUNyRSxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN0RCxPQUFPLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsWUFBWSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7U0FDcEU7UUFDRCxLQUFLLHNCQUFzQixDQUFDLENBQUM7WUFDM0IsTUFBTSxNQUFNLEdBQ1IsYUFBYSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQ2hFLE1BQU0sWUFBWSxHQUNkLGFBQWEsQ0FBQyxjQUFjLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQWEsQ0FBQztZQUN4RSxNQUFNLFlBQVksR0FDZCxhQUFhLENBQUMsY0FBYyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFhLENBQUM7WUFDeEUsTUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxZQUFZLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFDbEUsT0FBTyxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNsQyxPQUFPLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQzlCO1FBQ0QsS0FBSyxrQkFBa0IsQ0FBQztRQUN4QixLQUFLLG9CQUFvQixDQUFDLENBQUM7WUFDekIsTUFBTSxRQUFRLEdBQ1YsYUFBYSxDQUFDLGNBQWMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQ3RFLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3RELE1BQU0sV0FBVyxHQUNiLGFBQWEsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQWEsQ0FBQztZQUNqRSxNQUFNLFlBQVksR0FDZCxhQUFhLENBQUMsY0FBYyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFhLENBQUM7WUFDeEUsT0FBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7U0FDdkQ7UUFDRCxLQUFLLG9CQUFvQixDQUFDLENBQUM7WUFDekIsTUFBTSxRQUFRLEdBQ1YsYUFBYSxDQUFDLGNBQWMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQ3RFLE1BQU0sV0FBVyxHQUNiLGFBQWEsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQztZQUNoRSxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN0RCxVQUFVLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ2pDLE9BQU8sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDOUI7UUFDRCxLQUFLLG1CQUFtQixDQUFDLENBQUM7WUFDeEIsTUFBTSxRQUFRLEdBQ1YsYUFBYSxDQUFDLGNBQWMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQ3RFLE1BQU0sWUFBWSxHQUNkLGFBQWEsQ0FBQyxjQUFjLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQWEsQ0FBQztZQUN4RSxNQUFNLFlBQVksR0FDZCxhQUFhLENBQUMsY0FBYyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFhLENBQUM7WUFDeEUsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDdEQsT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7U0FDekQ7UUFDRCxLQUFLLGlCQUFpQixDQUFDLENBQUM7WUFDdEIsTUFBTSxXQUFXLEdBQ2IsYUFBYSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQ2hFLE1BQU0sWUFBWSxHQUNkLGFBQWEsQ0FBQyxjQUFjLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQWEsQ0FBQztZQUN4RSxNQUFNLE9BQU8sR0FDVCxhQUFhLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFhLENBQUM7WUFFbkUsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFDN0QsT0FBTyxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNsQyxPQUFPLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQzlCO1FBQ0QsS0FBSyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ3ZCLE1BQU0sUUFBUSxHQUNWLGFBQWEsQ0FBQyxjQUFjLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQztZQUN0RSxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN0RCxPQUFPLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQzdDO1FBQ0QsS0FBSyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ3ZCLE1BQU0sUUFBUSxHQUNWLGFBQWEsQ0FBQyxjQUFjLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQztZQUN0RSxNQUFNLElBQUksR0FBRyxhQUFhLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUM7WUFFdkUsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDekQsTUFBTSxjQUFjLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNsRCxPQUFPLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQ3RDLE9BQU8sQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDbEM7UUFDRDtZQUNFLE1BQU0sU0FBUyxDQUFDLGFBQWEsSUFBSSxDQUFDLEVBQUUscUJBQXFCLENBQUMsQ0FBQztLQUM5RDtBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7RGF0YVR5cGUsIHNjYWxhciwgVGVuc29yfSBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xuXG5pbXBvcnQge05hbWVkVGVuc29yc01hcH0gZnJvbSAnLi4vLi4vZGF0YS90eXBlcyc7XG5pbXBvcnQge0V4ZWN1dGlvbkNvbnRleHR9IGZyb20gJy4uLy4uL2V4ZWN1dG9yL2V4ZWN1dGlvbl9jb250ZXh0JztcbmltcG9ydCB7VGVuc29yQXJyYXl9IGZyb20gJy4uLy4uL2V4ZWN1dG9yL3RlbnNvcl9hcnJheSc7XG5pbXBvcnQge2Zyb21UZW5zb3IsIHJlc2VydmUsIHNjYXR0ZXIsIHNwbGl0fSBmcm9tICcuLi8uLi9leGVjdXRvci90ZW5zb3JfbGlzdCc7XG5pbXBvcnQge0ludGVybmFsT3BBc3luY0V4ZWN1dG9yLCBOb2RlfSBmcm9tICcuLi90eXBlcyc7XG5cbmltcG9ydCB7Y2xvbmVUZW5zb3IsIGdldFBhcmFtVmFsdWUsIGdldFRlbnNvcn0gZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCBjb25zdCBleGVjdXRlT3A6IEludGVybmFsT3BBc3luY0V4ZWN1dG9yID0gYXN5bmMoXG4gICAgbm9kZTogTm9kZSwgdGVuc29yTWFwOiBOYW1lZFRlbnNvcnNNYXAsXG4gICAgY29udGV4dDogRXhlY3V0aW9uQ29udGV4dCk6IFByb21pc2U8VGVuc29yW10+ID0+IHtcbiAgc3dpdGNoIChub2RlLm9wKSB7XG4gICAgY2FzZSAnSWYnOlxuICAgIGNhc2UgJ1N0YXRlbGVzc0lmJzoge1xuICAgICAgY29uc3QgdGhlbkZ1bmMgPVxuICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3RoZW5CcmFuY2gnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIHN0cmluZztcbiAgICAgIGNvbnN0IGVsc2VGdW5jID1cbiAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdlbHNlQnJhbmNoJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBzdHJpbmc7XG4gICAgICBjb25zdCBjb25kID0gZ2V0UGFyYW1WYWx1ZSgnY29uZCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuICAgICAgY29uc3QgYXJncyA9IGdldFBhcmFtVmFsdWUoJ2FyZ3MnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcltdO1xuICAgICAgY29uc3QgY29uZFZhbHVlID0gYXdhaXQgY29uZC5kYXRhKCk7XG4gICAgICBpZiAoY29uZFZhbHVlWzBdKSB7XG4gICAgICAgIHJldHVybiBjb250ZXh0LmZ1bmN0aW9uTWFwW3RoZW5GdW5jXS5leGVjdXRlRnVuY3Rpb25Bc3luYyhcbiAgICAgICAgICAgIGFyZ3MsIGNvbnRleHQudGVuc29yQXJyYXlNYXAsIGNvbnRleHQudGVuc29yTGlzdE1hcCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY29udGV4dC5mdW5jdGlvbk1hcFtlbHNlRnVuY10uZXhlY3V0ZUZ1bmN0aW9uQXN5bmMoXG4gICAgICAgICAgICBhcmdzLCBjb250ZXh0LnRlbnNvckFycmF5TWFwLCBjb250ZXh0LnRlbnNvckxpc3RNYXApO1xuICAgICAgfVxuICAgIH1cbiAgICBjYXNlICdXaGlsZSc6XG4gICAgY2FzZSAnU3RhdGVsZXNzV2hpbGUnOiB7XG4gICAgICBjb25zdCBib2R5RnVuYyA9XG4gICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnYm9keScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgc3RyaW5nO1xuICAgICAgY29uc3QgY29uZEZ1bmMgPVxuICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2NvbmQnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIHN0cmluZztcbiAgICAgIGNvbnN0IGFyZ3MgPSBnZXRQYXJhbVZhbHVlKCdhcmdzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3JbXTtcblxuICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBjb25kaXRpb24gb2YgdGhlIGxvb3BcbiAgICAgIGNvbnN0IGNvbmRSZXN1bHQgPVxuICAgICAgICAgIChhd2FpdCBjb250ZXh0LmZ1bmN0aW9uTWFwW2NvbmRGdW5jXS5leGVjdXRlRnVuY3Rpb25Bc3luYyhcbiAgICAgICAgICAgICAgYXJncywgY29udGV4dC50ZW5zb3JBcnJheU1hcCwgY29udGV4dC50ZW5zb3JMaXN0TWFwKSk7XG4gICAgICBjb25zdCBhcmdJZHMgPSBhcmdzLm1hcCh0ZW5zb3IgPT4gdGVuc29yLmlkKTtcbiAgICAgIGxldCBjb25kVmFsdWUgPSBhd2FpdCBjb25kUmVzdWx0WzBdLmRhdGEoKTtcbiAgICAgIC8vIERpc3Bvc2UgdGhlIGludGVybWVkaWF0ZSB0ZW5zb3JzIGZvciBjb25kaXRpb24gZnVuY3Rpb25cbiAgICAgIGNvbmRSZXN1bHQuZm9yRWFjaCh0ZW5zb3IgPT4ge1xuICAgICAgICBpZiAoIXRlbnNvci5rZXB0ICYmIGFyZ0lkcy5pbmRleE9mKHRlbnNvci5pZCkgPT09IC0xKSB7XG4gICAgICAgICAgdGVuc29yLmRpc3Bvc2UoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGxldCByZXN1bHQ6IFRlbnNvcltdID0gYXJncztcblxuICAgICAgd2hpbGUgKGNvbmRWYWx1ZVswXSkge1xuICAgICAgICAvLyBSZWNvcmQgdGhlIHByZXZpb3VzIHJlc3VsdCBmb3IgaW50ZXJtZWRpYXRlIHRlbnNvciB0cmFja2luZ1xuICAgICAgICBjb25zdCBvcmlnUmVzdWx0ID0gcmVzdWx0O1xuICAgICAgICAvLyBFeGVjdXRpb24gdGhlIGJvZHkgb2YgdGhlIGxvb3BcbiAgICAgICAgcmVzdWx0ID0gYXdhaXQgY29udGV4dC5mdW5jdGlvbk1hcFtib2R5RnVuY10uZXhlY3V0ZUZ1bmN0aW9uQXN5bmMoXG4gICAgICAgICAgICByZXN1bHQsIGNvbnRleHQudGVuc29yQXJyYXlNYXAsIGNvbnRleHQudGVuc29yTGlzdE1hcCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdElkcyA9IHJlc3VsdC5tYXAodGVuc29yID0+IHRlbnNvci5pZCk7XG5cbiAgICAgICAgLy8gRGlzcG9zZSB0aGUgaW50ZXJtZWRpYXRlIHRlbnNvciBmb3IgYm9keSBmdW5jdGlvbiB0aGF0IGlzIG5vdCBnbG9iYWxcbiAgICAgICAgLy8ga2VwdCwgbm90IGlucHV0L291dHB1dCBvZiB0aGUgYm9keSBmdW5jdGlvblxuICAgICAgICBvcmlnUmVzdWx0LmZvckVhY2godGVuc29yID0+IHtcbiAgICAgICAgICBpZiAoIXRlbnNvci5rZXB0ICYmIGFyZ0lkcy5pbmRleE9mKHRlbnNvci5pZCkgPT09IC0xICYmXG4gICAgICAgICAgICAgIHJlc3VsdElkcy5pbmRleE9mKHRlbnNvci5pZCkgPT09IC0xKSB7XG4gICAgICAgICAgICB0ZW5zb3IuZGlzcG9zZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gUmVjYWxjdWF0ZSB0aGUgY29uZGl0aW9uIG9mIHRoZSBsb29wIHVzaW5nIHRoZSBsYXRlc3QgcmVzdWx0cy5cbiAgICAgICAgY29uc3QgY29uZFJlc3VsdCA9XG4gICAgICAgICAgICAoYXdhaXQgY29udGV4dC5mdW5jdGlvbk1hcFtjb25kRnVuY10uZXhlY3V0ZUZ1bmN0aW9uQXN5bmMoXG4gICAgICAgICAgICAgICAgcmVzdWx0LCBjb250ZXh0LnRlbnNvckFycmF5TWFwLCBjb250ZXh0LnRlbnNvckxpc3RNYXApKTtcbiAgICAgICAgY29uZFZhbHVlID0gYXdhaXQgY29uZFJlc3VsdFswXS5kYXRhKCk7XG4gICAgICAgIC8vIERpc3Bvc2UgdGhlIGludGVybWVkaWF0ZSB0ZW5zb3JzIGZvciBjb25kaXRpb24gZnVuY3Rpb25cbiAgICAgICAgY29uZFJlc3VsdC5mb3JFYWNoKHRlbnNvciA9PiB7XG4gICAgICAgICAgaWYgKCF0ZW5zb3Iua2VwdCAmJiBhcmdJZHMuaW5kZXhPZih0ZW5zb3IuaWQpID09PSAtMSAmJlxuICAgICAgICAgICAgICByZXN1bHRJZHMuaW5kZXhPZih0ZW5zb3IuaWQpID09PSAtMSkge1xuICAgICAgICAgICAgdGVuc29yLmRpc3Bvc2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgY2FzZSAnTG9vcENvbmQnOiB7XG4gICAgICBjb25zdCBwcmVkID0gZ2V0UGFyYW1WYWx1ZSgncHJlZCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuICAgICAgcmV0dXJuIFtjbG9uZVRlbnNvcihwcmVkKV07XG4gICAgfVxuICAgIGNhc2UgJ1N3aXRjaCc6IHtcbiAgICAgIGNvbnN0IHByZWQgPSBnZXRQYXJhbVZhbHVlKCdwcmVkJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3I7XG4gICAgICBsZXQgZGF0YSA9IGdldFBhcmFtVmFsdWUoJ2RhdGEnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcjtcbiAgICAgIGlmICghZGF0YS5rZXB0KSB7XG4gICAgICAgIGRhdGEgPSBjbG9uZVRlbnNvcihkYXRhKTtcbiAgICAgIH1cbiAgICAgIC8vIE91dHB1dHMgbm9kZXMgOjAgPT4gZmFsc2UsIDoxID0+IHRydWVcbiAgICAgIHJldHVybiAoYXdhaXQgcHJlZC5kYXRhKCkpWzBdID8gW3VuZGVmaW5lZCwgZGF0YV0gOiBbZGF0YSwgdW5kZWZpbmVkXTtcbiAgICB9XG4gICAgY2FzZSAnTWVyZ2UnOiB7XG4gICAgICBjb25zdCBpbnB1dE5hbWUgPSBub2RlLmlucHV0TmFtZXMuZmluZChcbiAgICAgICAgICBuYW1lID0+IGdldFRlbnNvcihuYW1lLCB0ZW5zb3JNYXAsIGNvbnRleHQpICE9PSB1bmRlZmluZWQpO1xuICAgICAgaWYgKGlucHV0TmFtZSkge1xuICAgICAgICBjb25zdCBkYXRhID0gZ2V0VGVuc29yKGlucHV0TmFtZSwgdGVuc29yTWFwLCBjb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIFtjbG9uZVRlbnNvcihkYXRhKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjYXNlICdFbnRlcic6IHtcbiAgICAgIGNvbnN0IGZyYW1lSWQgPVxuICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2ZyYW1lTmFtZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgc3RyaW5nO1xuICAgICAgY29uc3QgZGF0YSA9IGdldFBhcmFtVmFsdWUoJ3RlbnNvcicsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuICAgICAgY29udGV4dC5lbnRlckZyYW1lKGZyYW1lSWQpO1xuICAgICAgcmV0dXJuIFtjbG9uZVRlbnNvcihkYXRhKV07XG4gICAgfVxuICAgIGNhc2UgJ0V4aXQnOiB7XG4gICAgICBjb25zdCBkYXRhID0gZ2V0UGFyYW1WYWx1ZSgndGVuc29yJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3I7XG4gICAgICBjb250ZXh0LmV4aXRGcmFtZSgpO1xuICAgICAgcmV0dXJuIFtjbG9uZVRlbnNvcihkYXRhKV07XG4gICAgfVxuICAgIGNhc2UgJ05leHRJdGVyYXRpb24nOiB7XG4gICAgICBjb25zdCBkYXRhID0gZ2V0UGFyYW1WYWx1ZSgndGVuc29yJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3I7XG4gICAgICBjb250ZXh0Lm5leHRJdGVyYXRpb24oKTtcbiAgICAgIHJldHVybiBbY2xvbmVUZW5zb3IoZGF0YSldO1xuICAgIH1cbiAgICBjYXNlICdUZW5zb3JBcnJheVYzJzoge1xuICAgICAgY29uc3Qgc2l6ZSA9IGdldFBhcmFtVmFsdWUoJ3NpemUnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIG51bWJlcjtcbiAgICAgIGNvbnN0IGR0eXBlID1cbiAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdkdHlwZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgRGF0YVR5cGU7XG4gICAgICBjb25zdCBlbGVtZW50U2hhcGUgPVxuICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2VsZW1lbnRTaGFwZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgbnVtYmVyW107XG4gICAgICBjb25zdCBkeW5hbWljU2l6ZSA9XG4gICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnZHluYW1pY1NpemUnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIGJvb2xlYW47XG4gICAgICBjb25zdCBjbGVhckFmdGVyUmVhZCA9XG4gICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnY2xlYXJBZnRlclJlYWQnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIGJvb2xlYW47XG4gICAgICBjb25zdCBpZGVudGljYWxFbGVtZW50U2hhcGVzID1cbiAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdpZGVudGljYWxFbGVtZW50U2hhcGVzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhc1xuICAgICAgICAgIGJvb2xlYW47XG4gICAgICBjb25zdCBuYW1lID0gZ2V0UGFyYW1WYWx1ZSgnbmFtZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgc3RyaW5nO1xuICAgICAgY29uc3QgdGVuc29yQXJyYXkgPSBuZXcgVGVuc29yQXJyYXkoXG4gICAgICAgICAgbmFtZSwgZHR5cGUsIHNpemUsIGVsZW1lbnRTaGFwZSwgaWRlbnRpY2FsRWxlbWVudFNoYXBlcywgZHluYW1pY1NpemUsXG4gICAgICAgICAgY2xlYXJBZnRlclJlYWQpO1xuICAgICAgY29udGV4dC5hZGRUZW5zb3JBcnJheSh0ZW5zb3JBcnJheSk7XG4gICAgICByZXR1cm4gW3RlbnNvckFycmF5LmlkVGVuc29yLCBzY2FsYXIoMS4wKV07XG4gICAgfVxuICAgIGNhc2UgJ1RlbnNvckFycmF5V3JpdGVWMyc6IHtcbiAgICAgIGNvbnN0IGlkID1cbiAgICAgICAgICBnZXRQYXJhbVZhbHVlKCd0ZW5zb3JBcnJheUlkJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3I7XG4gICAgICBjb25zdCBpbmRleCA9IGdldFBhcmFtVmFsdWUoJ2luZGV4Jywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBudW1iZXI7XG4gICAgICBjb25zdCB3cml0ZVRlbnNvciA9XG4gICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgndGVuc29yJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3I7XG4gICAgICBjb25zdCB3cml0ZVRlbnNvckFycmF5ID0gY29udGV4dC5nZXRUZW5zb3JBcnJheShpZC5pZCk7XG4gICAgICB3cml0ZVRlbnNvckFycmF5LndyaXRlKGluZGV4LCB3cml0ZVRlbnNvcik7XG4gICAgICByZXR1cm4gW3dyaXRlVGVuc29yQXJyYXkuaWRUZW5zb3JdO1xuICAgIH1cbiAgICBjYXNlICdUZW5zb3JBcnJheVJlYWRWMyc6IHtcbiAgICAgIGNvbnN0IHJlYWRJZCA9XG4gICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgndGVuc29yQXJyYXlJZCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuICAgICAgY29uc3QgcmVhZEluZGV4ID1cbiAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdpbmRleCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgbnVtYmVyO1xuICAgICAgY29uc3QgcmVhZFRlbnNvckFycmF5ID0gY29udGV4dC5nZXRUZW5zb3JBcnJheShyZWFkSWQuaWQpO1xuICAgICAgcmV0dXJuIFtyZWFkVGVuc29yQXJyYXkucmVhZChyZWFkSW5kZXgpXTtcbiAgICB9XG4gICAgY2FzZSAnVGVuc29yQXJyYXlHYXRoZXJWMyc6IHtcbiAgICAgIGNvbnN0IGdhdGhlcklkID1cbiAgICAgICAgICBnZXRQYXJhbVZhbHVlKCd0ZW5zb3JBcnJheUlkJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3I7XG4gICAgICBjb25zdCBnYXRoZXJJbmRpY2VzID1cbiAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdpbmRpY2VzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBudW1iZXJbXTtcbiAgICAgIGNvbnN0IGdhdGhlckR0eXBlID1cbiAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdkdHlwZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgRGF0YVR5cGU7XG4gICAgICBjb25zdCBnYXRoZXJUZW5zb3JBcnJheSA9IGNvbnRleHQuZ2V0VGVuc29yQXJyYXkoZ2F0aGVySWQuaWQpO1xuICAgICAgcmV0dXJuIFtnYXRoZXJUZW5zb3JBcnJheS5nYXRoZXIoZ2F0aGVySW5kaWNlcywgZ2F0aGVyRHR5cGUpXTtcbiAgICB9XG4gICAgY2FzZSAnVGVuc29yQXJyYXlTY2F0dGVyVjMnOiB7XG4gICAgICBjb25zdCBzY2F0dGVySWQgPVxuICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3RlbnNvckFycmF5SWQnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcjtcbiAgICAgIGNvbnN0IHNjYXR0ZXJJbmRpY2VzID1cbiAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdpbmRpY2VzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBudW1iZXJbXTtcbiAgICAgIGNvbnN0IHNjYXR0ZXJUZW5zb3IgPVxuICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3RlbnNvcicsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuICAgICAgY29uc3Qgc2NhdHRlclRlbnNvckFycmF5ID0gY29udGV4dC5nZXRUZW5zb3JBcnJheShzY2F0dGVySWQuaWQpO1xuICAgICAgc2NhdHRlclRlbnNvckFycmF5LnNjYXR0ZXIoc2NhdHRlckluZGljZXMsIHNjYXR0ZXJUZW5zb3IpO1xuICAgICAgcmV0dXJuIFtzY2F0dGVyVGVuc29yQXJyYXkuaWRUZW5zb3JdO1xuICAgIH1cbiAgICBjYXNlICdUZW5zb3JBcnJheUNvbmNhdFYzJzoge1xuICAgICAgY29uc3QgY29uY2F0SWQgPVxuICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3RlbnNvckFycmF5SWQnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcjtcbiAgICAgIGNvbnN0IGNvbmNhdFRlbnNvckFycmF5ID0gY29udGV4dC5nZXRUZW5zb3JBcnJheShjb25jYXRJZC5pZCk7XG4gICAgICBjb25zdCBjb25jYXREdHlwZSA9XG4gICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnZHR5cGUnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIERhdGFUeXBlO1xuICAgICAgcmV0dXJuIFtjb25jYXRUZW5zb3JBcnJheS5jb25jYXQoY29uY2F0RHR5cGUpXTtcbiAgICB9XG4gICAgY2FzZSAnVGVuc29yQXJyYXlTcGxpdFYzJzoge1xuICAgICAgY29uc3Qgc3BsaXRJZCA9XG4gICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgndGVuc29yQXJyYXlJZCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuICAgICAgY29uc3Qgc3BsaXRUZW5zb3IgPVxuICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3RlbnNvcicsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuICAgICAgY29uc3QgbGVuZ3RocyA9XG4gICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnbGVuZ3RocycsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgbnVtYmVyW107XG4gICAgICBjb25zdCBzcGxpdFRlbnNvckFycmF5ID0gY29udGV4dC5nZXRUZW5zb3JBcnJheShzcGxpdElkLmlkKTtcbiAgICAgIHNwbGl0VGVuc29yQXJyYXkuc3BsaXQobGVuZ3Rocywgc3BsaXRUZW5zb3IpO1xuICAgICAgcmV0dXJuIFtzcGxpdFRlbnNvckFycmF5LmlkVGVuc29yXTtcbiAgICB9XG4gICAgY2FzZSAnVGVuc29yQXJyYXlTaXplVjMnOiB7XG4gICAgICBjb25zdCBzaXplSWQgPVxuICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3RlbnNvckFycmF5SWQnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcjtcbiAgICAgIGNvbnN0IHNpemVUZW5zb3JBcnJheSA9IGNvbnRleHQuZ2V0VGVuc29yQXJyYXkoc2l6ZUlkLmlkKTtcbiAgICAgIHJldHVybiBbc2NhbGFyKHNpemVUZW5zb3JBcnJheS5zaXplKCksICdpbnQzMicpXTtcbiAgICB9XG4gICAgY2FzZSAnVGVuc29yQXJyYXlDbG9zZVYzJzoge1xuICAgICAgY29uc3QgY2xvc2VJZCA9XG4gICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgndGVuc29yQXJyYXlJZCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuICAgICAgY29uc3QgY2xvc2VUZW5zb3JBcnJheSA9IGNvbnRleHQuZ2V0VGVuc29yQXJyYXkoY2xvc2VJZC5pZCk7XG4gICAgICBjbG9zZVRlbnNvckFycmF5LmNsZWFyQW5kQ2xvc2UoKTtcbiAgICAgIHJldHVybiBbY2xvc2VUZW5zb3JBcnJheS5pZFRlbnNvcl07XG4gICAgfVxuICAgIGNhc2UgJ1RlbnNvckxpc3RTZXRJdGVtJzoge1xuICAgICAgY29uc3QgaWRUZW5zb3IgPVxuICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3RlbnNvckxpc3RJZCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuICAgICAgY29uc3QgaW5kZXggPSBnZXRQYXJhbVZhbHVlKCdpbmRleCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgbnVtYmVyO1xuICAgICAgY29uc3Qgd3JpdGVUZW5zb3IgPVxuICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3RlbnNvcicsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuICAgICAgY29uc3QgdGVuc29yTGlzdCA9IGNvbnRleHQuZ2V0VGVuc29yTGlzdChpZFRlbnNvci5pZCk7XG4gICAgICB0ZW5zb3JMaXN0LnNldEl0ZW0oaW5kZXgsIHdyaXRlVGVuc29yKTtcbiAgICAgIHJldHVybiBbdGVuc29yTGlzdC5pZFRlbnNvcl07XG4gICAgfVxuICAgIGNhc2UgJ1RlbnNvckxpc3RHZXRJdGVtJzoge1xuICAgICAgY29uc3QgaWRUZW5zb3IgPVxuICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3RlbnNvckxpc3RJZCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuICAgICAgY29uc3QgcmVhZEluZGV4ID1cbiAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdpbmRleCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgbnVtYmVyO1xuICAgICAgY29uc3QgZWxlbWVudFNoYXBlID1cbiAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdlbGVtZW50U2hhcGUnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIG51bWJlcltdO1xuXG4gICAgICBjb25zdCBlbGVtZW50RFR5cGUgPVxuICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2VsZW1lbnREVHlwZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgRGF0YVR5cGU7XG4gICAgICBjb25zdCB0ZW5zb3JMaXN0ID0gY29udGV4dC5nZXRUZW5zb3JMaXN0KGlkVGVuc29yLmlkKTtcbiAgICAgIHJldHVybiBbdGVuc29yTGlzdC5nZXRJdGVtKHJlYWRJbmRleCwgZWxlbWVudFNoYXBlLCBlbGVtZW50RFR5cGUpXTtcbiAgICB9XG4gICAgY2FzZSAnVGVuc29yTGlzdFNjYXR0ZXJWMic6XG4gICAgY2FzZSAnVGVuc29yTGlzdFNjYXR0ZXInOiB7XG4gICAgICBjb25zdCBzY2F0dGVySW5kaWNlcyA9XG4gICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnaW5kaWNlcycsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgbnVtYmVyW107XG4gICAgICBjb25zdCBzY2F0dGVyVGVuc29yID1cbiAgICAgICAgICBnZXRQYXJhbVZhbHVlKCd0ZW5zb3InLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcjtcbiAgICAgIGNvbnN0IGVsZW1lbnRTaGFwZSA9XG4gICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnZWxlbWVudFNoYXBlJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBudW1iZXJbXTtcbiAgICAgIGNvbnN0IG51bUVsZW1lbnRzID1cbiAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdudW1FbGVtZW50cycsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgbnVtYmVyO1xuICAgICAgY29uc3QgdGVuc29yTGlzdCA9XG4gICAgICAgICAgc2NhdHRlcihzY2F0dGVyVGVuc29yLCBzY2F0dGVySW5kaWNlcywgZWxlbWVudFNoYXBlLCBudW1FbGVtZW50cyk7XG4gICAgICBjb250ZXh0LmFkZFRlbnNvckxpc3QodGVuc29yTGlzdCk7XG4gICAgICByZXR1cm4gW3RlbnNvckxpc3QuaWRUZW5zb3JdO1xuICAgIH1cbiAgICBjYXNlICdUZW5zb3JMaXN0UmVzZXJ2ZSc6XG4gICAgY2FzZSAnRW1wdHlUZW5zb3JMaXN0Jzoge1xuICAgICAgY29uc3QgZWxlbWVudFNoYXBlID1cbiAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdlbGVtZW50U2hhcGUnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIG51bWJlcltdO1xuICAgICAgY29uc3QgZWxlbWVudER0eXBlID1cbiAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdlbGVtZW50RFR5cGUnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIERhdGFUeXBlO1xuICAgICAgbGV0IG51bUVsZW1lbnRzUGFyYW07XG5cbiAgICAgIGlmIChub2RlLm9wID09PSAnVGVuc29yTGlzdFJlc2VydmUnKSB7XG4gICAgICAgIG51bUVsZW1lbnRzUGFyYW0gPSAnbnVtRWxlbWVudHMnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbnVtRWxlbWVudHNQYXJhbSA9ICdtYXhOdW1FbGVtZW50cyc7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG51bUVsZW1lbnRzID1cbiAgICAgICAgICBnZXRQYXJhbVZhbHVlKG51bUVsZW1lbnRzUGFyYW0sIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgbnVtYmVyO1xuICAgICAgY29uc3QgbWF4TnVtRWxlbWVudHMgPSBub2RlLm9wID09PSAnVGVuc29yTGlzdFJlc2VydmUnID8gLTEgOiBudW1FbGVtZW50cztcbiAgICAgIGNvbnN0IHRlbnNvckxpc3QgPVxuICAgICAgICAgIHJlc2VydmUoZWxlbWVudFNoYXBlLCBlbGVtZW50RHR5cGUsIG51bUVsZW1lbnRzLCBtYXhOdW1FbGVtZW50cyk7XG4gICAgICBjb250ZXh0LmFkZFRlbnNvckxpc3QodGVuc29yTGlzdCk7XG4gICAgICByZXR1cm4gW3RlbnNvckxpc3QuaWRUZW5zb3JdO1xuICAgIH1cbiAgICBjYXNlICdUZW5zb3JMaXN0R2F0aGVyJzoge1xuICAgICAgY29uc3QgZ2F0aGVySWQgPVxuICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3RlbnNvckxpc3RJZCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuICAgICAgY29uc3QgZ2F0aGVySW5kaWNlcyA9XG4gICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnaW5kaWNlcycsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgbnVtYmVyW107XG4gICAgICBjb25zdCBlbGVtZW50U2hhcGUgPVxuICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2VsZW1lbnRTaGFwZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgbnVtYmVyW107XG4gICAgICBjb25zdCBlbGVtZW50RHR5cGUgPVxuICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2VsZW1lbnREVHlwZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgRGF0YVR5cGU7XG4gICAgICBjb25zdCB0ZW5zb3JMaXN0ID0gY29udGV4dC5nZXRUZW5zb3JMaXN0KGdhdGhlcklkLmlkKTtcbiAgICAgIHJldHVybiBbdGVuc29yTGlzdC5nYXRoZXIoZ2F0aGVySW5kaWNlcywgZWxlbWVudER0eXBlLCBlbGVtZW50U2hhcGUpXTtcbiAgICB9XG4gICAgY2FzZSAnVGVuc29yTGlzdFN0YWNrJzoge1xuICAgICAgY29uc3QgaWRUZW5zb3IgPVxuICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3RlbnNvckxpc3RJZCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuICAgICAgY29uc3QgZWxlbWVudFNoYXBlID1cbiAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdlbGVtZW50U2hhcGUnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIG51bWJlcltdO1xuICAgICAgY29uc3QgZWxlbWVudER0eXBlID1cbiAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdlbGVtZW50RFR5cGUnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIERhdGFUeXBlO1xuICAgICAgY29uc3QgbnVtRWxlbWVudHMgPVxuICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ251bUVsZW1lbnRzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBudW1iZXI7XG4gICAgICBjb25zdCB0ZW5zb3JMaXN0ID0gY29udGV4dC5nZXRUZW5zb3JMaXN0KGlkVGVuc29yLmlkKTtcbiAgICAgIHJldHVybiBbdGVuc29yTGlzdC5zdGFjayhlbGVtZW50U2hhcGUsIGVsZW1lbnREdHlwZSwgbnVtRWxlbWVudHMpXTtcbiAgICB9XG4gICAgY2FzZSAnVGVuc29yTGlzdEZyb21UZW5zb3InOiB7XG4gICAgICBjb25zdCB0ZW5zb3IgPVxuICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3RlbnNvcicsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuICAgICAgY29uc3QgZWxlbWVudFNoYXBlID1cbiAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdlbGVtZW50U2hhcGUnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIG51bWJlcltdO1xuICAgICAgY29uc3QgZWxlbWVudER0eXBlID1cbiAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdlbGVtZW50RFR5cGUnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIERhdGFUeXBlO1xuICAgICAgY29uc3QgdGVuc29yTGlzdCA9IGZyb21UZW5zb3IodGVuc29yLCBlbGVtZW50U2hhcGUsIGVsZW1lbnREdHlwZSk7XG4gICAgICBjb250ZXh0LmFkZFRlbnNvckxpc3QodGVuc29yTGlzdCk7XG4gICAgICByZXR1cm4gW3RlbnNvckxpc3QuaWRUZW5zb3JdO1xuICAgIH1cbiAgICBjYXNlICdUZW5zb3JMaXN0Q29uY2F0JzpcbiAgICBjYXNlICdUZW5zb3JMaXN0Q29uY2F0VjInOiB7XG4gICAgICBjb25zdCBjb25jYXRJZCA9XG4gICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgndGVuc29yTGlzdElkJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3I7XG4gICAgICBjb25zdCB0ZW5zb3JMaXN0ID0gY29udGV4dC5nZXRUZW5zb3JMaXN0KGNvbmNhdElkLmlkKTtcbiAgICAgIGNvbnN0IGNvbmNhdER0eXBlID1cbiAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdkdHlwZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgRGF0YVR5cGU7XG4gICAgICBjb25zdCBlbGVtZW50U2hhcGUgPVxuICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2VsZW1lbnRTaGFwZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgbnVtYmVyW107XG4gICAgICByZXR1cm4gW3RlbnNvckxpc3QuY29uY2F0KGNvbmNhdER0eXBlLCBlbGVtZW50U2hhcGUpXTtcbiAgICB9XG4gICAgY2FzZSAnVGVuc29yTGlzdFB1c2hCYWNrJzoge1xuICAgICAgY29uc3QgaWRUZW5zb3IgPVxuICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3RlbnNvckxpc3RJZCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuICAgICAgY29uc3Qgd3JpdGVUZW5zb3IgPVxuICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3RlbnNvcicsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuICAgICAgY29uc3QgdGVuc29yTGlzdCA9IGNvbnRleHQuZ2V0VGVuc29yTGlzdChpZFRlbnNvci5pZCk7XG4gICAgICB0ZW5zb3JMaXN0LnB1c2hCYWNrKHdyaXRlVGVuc29yKTtcbiAgICAgIHJldHVybiBbdGVuc29yTGlzdC5pZFRlbnNvcl07XG4gICAgfVxuICAgIGNhc2UgJ1RlbnNvckxpc3RQb3BCYWNrJzoge1xuICAgICAgY29uc3QgaWRUZW5zb3IgPVxuICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3RlbnNvckxpc3RJZCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuICAgICAgY29uc3QgZWxlbWVudFNoYXBlID1cbiAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdlbGVtZW50U2hhcGUnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIG51bWJlcltdO1xuICAgICAgY29uc3QgZWxlbWVudERUeXBlID1cbiAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdlbGVtZW50RFR5cGUnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIERhdGFUeXBlO1xuICAgICAgY29uc3QgdGVuc29yTGlzdCA9IGNvbnRleHQuZ2V0VGVuc29yTGlzdChpZFRlbnNvci5pZCk7XG4gICAgICByZXR1cm4gW3RlbnNvckxpc3QucG9wQmFjayhlbGVtZW50U2hhcGUsIGVsZW1lbnREVHlwZSldO1xuICAgIH1cbiAgICBjYXNlICdUZW5zb3JMaXN0U3BsaXQnOiB7XG4gICAgICBjb25zdCBzcGxpdFRlbnNvciA9XG4gICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgndGVuc29yJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3I7XG4gICAgICBjb25zdCBlbGVtZW50U2hhcGUgPVxuICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2VsZW1lbnRTaGFwZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgbnVtYmVyW107XG4gICAgICBjb25zdCBsZW5ndGhzID1cbiAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdsZW5ndGhzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBudW1iZXJbXTtcblxuICAgICAgY29uc3QgdGVuc29yTGlzdCA9IHNwbGl0KHNwbGl0VGVuc29yLCBsZW5ndGhzLCBlbGVtZW50U2hhcGUpO1xuICAgICAgY29udGV4dC5hZGRUZW5zb3JMaXN0KHRlbnNvckxpc3QpO1xuICAgICAgcmV0dXJuIFt0ZW5zb3JMaXN0LmlkVGVuc29yXTtcbiAgICB9XG4gICAgY2FzZSAnVGVuc29yTGlzdExlbmd0aCc6IHtcbiAgICAgIGNvbnN0IGlkVGVuc29yID1cbiAgICAgICAgICBnZXRQYXJhbVZhbHVlKCd0ZW5zb3JMaXN0SWQnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcjtcbiAgICAgIGNvbnN0IHRlbnNvckxpc3QgPSBjb250ZXh0LmdldFRlbnNvckxpc3QoaWRUZW5zb3IuaWQpO1xuICAgICAgcmV0dXJuIFtzY2FsYXIodGVuc29yTGlzdC5zaXplKCksICdpbnQzMicpXTtcbiAgICB9XG4gICAgY2FzZSAnVGVuc29yTGlzdFJlc2l6ZSc6IHtcbiAgICAgIGNvbnN0IGlkVGVuc29yID1cbiAgICAgICAgICBnZXRQYXJhbVZhbHVlKCd0ZW5zb3JMaXN0SWQnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcjtcbiAgICAgIGNvbnN0IHNpemUgPSBnZXRQYXJhbVZhbHVlKCdzaXplJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBudW1iZXI7XG5cbiAgICAgIGNvbnN0IHNyY1RlbnNvckxpc3QgPSBjb250ZXh0LmdldFRlbnNvckxpc3QoaWRUZW5zb3IuaWQpO1xuICAgICAgY29uc3QgZGVzdFRlbnNvckxpc3QgPSBzcmNUZW5zb3JMaXN0LnJlc2l6ZShzaXplKTtcbiAgICAgIGNvbnRleHQuYWRkVGVuc29yTGlzdChkZXN0VGVuc29yTGlzdCk7XG4gICAgICByZXR1cm4gW2Rlc3RUZW5zb3JMaXN0LmlkVGVuc29yXTtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IFR5cGVFcnJvcihgTm9kZSB0eXBlICR7bm9kZS5vcH0gaXMgbm90IGltcGxlbWVudGVkYCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBDQVRFR09SWSA9ICdjb250cm9sJztcbiJdfQ==","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getPadding, getParamValue } from './utils';\nfunction fusedConvAndDepthWiseParams(node, tensorMap, context) {\n    const [extraOp, activationFunc] = getParamValue('fusedOps', node, tensorMap, context);\n    const isBiasAdd = extraOp === 'biasadd';\n    const noBiasAdd = !isBiasAdd;\n    const isPrelu = activationFunc === 'prelu';\n    const isBatchNorm = extraOp === 'fusedbatchnorm';\n    const numArgs = getParamValue('numArgs', node, tensorMap, context);\n    if (isBiasAdd) {\n        if (isPrelu && numArgs !== 2) {\n            throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' +\n                'must have two extra arguments: bias and alpha.');\n        }\n        if (!isPrelu && isBiasAdd && numArgs !== 1) {\n            throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd must have ' +\n                'one extra argument: bias.');\n        }\n    }\n    if (isBatchNorm) {\n        throw new Error('FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported');\n    }\n    const stride = getParamValue('strides', node, tensorMap, context);\n    const pad = getPadding(node, tensorMap, context);\n    const dataFormat = getParamValue('dataFormat', node, tensorMap, context)\n        .toUpperCase();\n    const dilations = getParamValue('dilations', node, tensorMap, context);\n    let [biasArg, preluArg] = getParamValue('args', node, tensorMap, context);\n    if (noBiasAdd) {\n        preluArg = biasArg;\n        biasArg = undefined;\n    }\n    const leakyreluAlpha = getParamValue('leakyreluAlpha', node, tensorMap, context);\n    return {\n        stride,\n        pad,\n        dataFormat,\n        dilations,\n        biasArg,\n        preluArg,\n        activationFunc,\n        leakyreluAlpha\n    };\n}\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'Conv1D': {\n            const stride = getParamValue('stride', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const dataFormat = getParamValue('dataFormat', node, tensorMap, context)\n                .toUpperCase();\n            const dilation = getParamValue('dilation', node, tensorMap, context);\n            return [ops.conv1d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), stride, pad, dataFormat, dilation)];\n        }\n        case 'Conv2D': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getPadding(node, tensorMap, context);\n            const dataFormat = getParamValue('dataFormat', node, tensorMap, context)\n                .toUpperCase();\n            const dilations = getParamValue('dilations', node, tensorMap, context);\n            return [ops.conv2d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[1], dilations[2]])];\n        }\n        case '_FusedConv2D': {\n            const { stride, pad, dataFormat, dilations, biasArg, preluArg, activationFunc, leakyreluAlpha } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n            return [ops.fused.conv2d({\n                    x: getParamValue('x', node, tensorMap, context),\n                    filter: getParamValue('filter', node, tensorMap, context),\n                    strides: [stride[1], stride[2]],\n                    pad: pad,\n                    dataFormat: dataFormat,\n                    dilations: [dilations[1], dilations[2]],\n                    bias: biasArg,\n                    activation: activationFunc,\n                    preluActivationWeights: preluArg,\n                    leakyreluAlpha\n                })];\n        }\n        case 'FusedDepthwiseConv2dNative': {\n            const { stride, pad, dataFormat, dilations, biasArg, preluArg, activationFunc, leakyreluAlpha, } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n            return [ops.fused.depthwiseConv2d({\n                    x: getParamValue('x', node, tensorMap, context),\n                    filter: getParamValue('filter', node, tensorMap, context),\n                    strides: [stride[1], stride[2]],\n                    pad: pad,\n                    dataFormat: dataFormat,\n                    dilations: [dilations[1], dilations[2]],\n                    bias: biasArg,\n                    activation: activationFunc,\n                    preluActivationWeights: preluArg,\n                    leakyreluAlpha\n                })];\n        }\n        case 'Conv2DBackpropInput':\n        case 'Conv2dTranspose': {\n            const shape = getParamValue('outputShape', node, tensorMap, context);\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getPadding(node, tensorMap, context);\n            return [ops.conv2dTranspose(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), shape, [stride[1], stride[2]], pad)];\n        }\n        case 'DepthwiseConv2dNative':\n        case 'DepthwiseConv2d': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getPadding(node, tensorMap, context);\n            const dilations = getParamValue('dilations', node, tensorMap, context);\n            const dataFormat = getParamValue('dataFormat', node, tensorMap, context)\n                .toUpperCase();\n            return [ops.depthwiseConv2d(getParamValue('input', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[1], dilations[2]])];\n        }\n        case 'Conv3D': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const dataFormat = getParamValue('dataFormat', node, tensorMap, context)\n                .toUpperCase();\n            const dilations = getParamValue('dilations', node, tensorMap, context);\n            return [ops.conv3d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2], stride[3]], pad, dataFormat, [dilations[1], dilations[2], dilations[3]])];\n        }\n        case 'AvgPool': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n            return [ops.avgPool(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];\n        }\n        case 'MaxPool': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n            return [ops.maxPool(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];\n        }\n        case 'MaxPoolWithArgmax': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n            const includeBatchInIndex = getParamValue('includeBatchInIndex', node, tensorMap, context);\n            const { result, indexes } = ops.maxPoolWithArgmax(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad, includeBatchInIndex);\n            return [result, indexes];\n        }\n        case 'AvgPool3D': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n            return [ops.avgPool3d(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2], kernelSize[3]], [stride[1], stride[2], stride[3]], pad)];\n        }\n        case 'MaxPool3D': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n            return [ops.maxPool3d(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2], kernelSize[3]], [stride[1], stride[2], stride[3]], pad)];\n        }\n        case 'Dilation2D': {\n            const strides = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const dilations = getParamValue('dilations', node, tensorMap, context);\n            // strides: [1, stride_height, stride_width, 1].\n            const strideHeight = strides[1];\n            const strideWidth = strides[2];\n            // dilations: [1, dilation_height, dilation_width, 1].\n            const dilationHeight = dilations[1];\n            const dilationWidth = dilations[2];\n            return [ops.dilation2d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [strideHeight, strideWidth], pad, [dilationHeight, dilationWidth], 'NHWC' /* dataFormat */)];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'convolution';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'Fill': {\n            const shape = getParamValue('shape', node, tensorMap, context);\n            const dtype = getParamValue('dtype', node, tensorMap, context);\n            const value = getParamValue('value', node, tensorMap, context);\n            return [ops.fill(shape, value, dtype)];\n        }\n        case 'LinSpace': {\n            const start = getParamValue('start', node, tensorMap, context);\n            const stop = getParamValue('stop', node, tensorMap, context);\n            const num = getParamValue('num', node, tensorMap, context);\n            return [ops.linspace(start, stop, num)];\n        }\n        case 'Multinomial': {\n            const logits = getParamValue('logits', node, tensorMap, context);\n            const numSamples = getParamValue('numSamples', node, tensorMap, context);\n            const seed = getParamValue('seed', node, tensorMap, context);\n            return [ops.multinomial(logits, numSamples, seed)];\n        }\n        case 'OneHot': {\n            const indices = getParamValue('indices', node, tensorMap, context);\n            const depth = getParamValue('depth', node, tensorMap, context);\n            const onValue = getParamValue('onValue', node, tensorMap, context);\n            const offValue = getParamValue('offValue', node, tensorMap, context);\n            const dtype = getParamValue('dtype', node, tensorMap, context);\n            return [ops.oneHot(indices, depth, onValue, offValue, dtype)];\n        }\n        case 'Ones': {\n            return [ops.ones(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n        }\n        case 'OnesLike': {\n            return [ops.onesLike(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'RandomStandardNormal': {\n            return [ops.randomStandardNormal(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context), getParamValue('seed', node, tensorMap, context))];\n        }\n        case 'RandomUniform': {\n            return [ops.randomUniform(\n                // tslint:disable-next-line:no-any\n                getParamValue('shape', node, tensorMap, context), getParamValue('minval', node, tensorMap, context), getParamValue('maxval', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n        }\n        case 'RandomUniformInt': {\n            return [ops.randomUniformInt(getParamValue('shape', node, tensorMap, context), getParamValue('minval', node, tensorMap, context), getParamValue('maxval', node, tensorMap, context), getParamValue('seed', node, tensorMap, context))];\n        }\n        case 'Range': {\n            const start = getParamValue('start', node, tensorMap, context);\n            const stop = getParamValue('stop', node, tensorMap, context);\n            const step = getParamValue('step', node, tensorMap, context);\n            return [ops.range(start, stop, step, getParamValue('dtype', node, tensorMap, context))];\n        }\n        case 'TruncatedNormal': {\n            const shape = getParamValue('shape', node, tensorMap, context);\n            const mean = getParamValue('mean', node, tensorMap, context);\n            const stdDev = getParamValue('stdDev', node, tensorMap, context);\n            const seed = getParamValue('seed', node, tensorMap, context);\n            return [ops.truncatedNormal(shape, mean, stdDev, getParamValue('dtype', node, tensorMap, context), seed)];\n        }\n        case 'Zeros': {\n            return [ops.zeros(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n        }\n        case 'ZerosLike': {\n            return [ops.zerosLike(getParamValue('x', node, tensorMap, context))];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'creation';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nfunction nmsParams(node, tensorMap, context) {\n    const boxes = getParamValue('boxes', node, tensorMap, context);\n    const scores = getParamValue('scores', node, tensorMap, context);\n    const maxOutputSize = getParamValue('maxOutputSize', node, tensorMap, context);\n    const iouThreshold = getParamValue('iouThreshold', node, tensorMap, context);\n    const scoreThreshold = getParamValue('scoreThreshold', node, tensorMap, context);\n    const softNmsSigma = getParamValue('softNmsSigma', node, tensorMap, context);\n    return {\n        boxes,\n        scores,\n        maxOutputSize,\n        iouThreshold,\n        scoreThreshold,\n        softNmsSigma\n    };\n}\nexport const executeOp = async (node, tensorMap, context, resourceManager, ops = tfOps) => {\n    switch (node.op) {\n        case 'NonMaxSuppressionV5': {\n            const { boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma } = nmsParams(node, tensorMap, context);\n            const result = await ops.image.nonMaxSuppressionWithScoreAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n            return [result.selectedIndices, result.selectedScores];\n        }\n        case 'NonMaxSuppressionV4': {\n            const { boxes, scores, maxOutputSize, iouThreshold, scoreThreshold } = nmsParams(node, tensorMap, context);\n            const padToMaxOutputSize = getParamValue('padToMaxOutputSize', node, tensorMap, context);\n            const result = await ops.image.nonMaxSuppressionPaddedAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);\n            return [result.selectedIndices, result.validOutputs];\n        }\n        case 'NonMaxSuppressionV3':\n        case 'NonMaxSuppressionV2': {\n            const { boxes, scores, maxOutputSize, iouThreshold, scoreThreshold } = nmsParams(node, tensorMap, context);\n            return [await ops.image.nonMaxSuppressionAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold)];\n        }\n        case 'Where': {\n            const condition = ops.cast(getParamValue('condition', node, tensorMap, context), 'bool');\n            const result = [await ops.whereAsync(condition)];\n            condition.dispose();\n            return result;\n        }\n        case 'ListDiff': {\n            return ops.setdiff1dAsync(getParamValue('x', node, tensorMap, context), getParamValue('y', node, tensorMap, context));\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'dynamic';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'LowerBound': {\n            const sortedSequence = getParamValue('sortedSequence', node, tensorMap, context);\n            const values = getParamValue('values', node, tensorMap, context);\n            return [ops.lowerBound(sortedSequence, values)];\n        }\n        case 'TopKV2': {\n            const x = getParamValue('x', node, tensorMap, context);\n            const k = getParamValue('k', node, tensorMap, context);\n            const sorted = getParamValue('sorted', node, tensorMap, context);\n            const result = ops.topk(x, k, sorted);\n            return [result.values, result.indices];\n        }\n        case 'UpperBound': {\n            const sortedSequence = getParamValue('sortedSequence', node, tensorMap, context);\n            const values = getParamValue('values', node, tensorMap, context);\n            return [ops.upperBound(sortedSequence, values)];\n        }\n        case 'Unique': {\n            const x = getParamValue('x', node, tensorMap, context);\n            const result = ops.unique(x);\n            return [result.values, result.indices];\n        }\n        case 'UniqueV2': {\n            const x = getParamValue('x', node, tensorMap, context);\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const result = ops.unique(x, axis);\n            return [result.values, result.indices];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'evaluation';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZhbHVhdGlvbl9leGVjdXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29udmVydGVyL3NyYy9vcGVyYXRpb25zL2V4ZWN1dG9ycy9ldmFsdWF0aW9uX2V4ZWN1dG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUdILGlEQUFpRDtBQUNqRCxPQUFPLEtBQUssS0FBSyxNQUFNLGtEQUFrRCxDQUFDO0FBTTFFLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFFdEMsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUNsQixDQUFDLElBQVUsRUFBRSxTQUEwQixFQUFFLE9BQXlCLEVBQ2pFLEdBQUcsR0FBRyxLQUFLLEVBQ0MsRUFBRTtJQUNULFFBQVEsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNmLEtBQUssWUFBWSxDQUFDLENBQUM7WUFDakIsTUFBTSxjQUFjLEdBQ2hCLGFBQWEsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FDbEQsQ0FBQztZQUNYLE1BQU0sTUFBTSxHQUNSLGFBQWEsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQztZQUNoRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUNqRDtRQUNELEtBQUssUUFBUSxDQUFDLENBQUM7WUFDYixNQUFNLENBQUMsR0FBRyxhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUM7WUFDakUsTUFBTSxDQUFDLEdBQUcsYUFBYSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQ2pFLE1BQU0sTUFBTSxHQUNSLGFBQWEsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVksQ0FBQztZQUNqRSxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDdEMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3hDO1FBQ0QsS0FBSyxZQUFZLENBQUMsQ0FBQztZQUNqQixNQUFNLGNBQWMsR0FDaEIsYUFBYSxDQUFDLGdCQUFnQixFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUNsRCxDQUFDO1lBQ1gsTUFBTSxNQUFNLEdBQ1IsYUFBYSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQ2hFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQ2pEO1FBQ0QsS0FBSyxRQUFRLENBQUMsQ0FBQztZQUNiLE1BQU0sQ0FBQyxHQUFHLGFBQWEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQztZQUNqRSxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdCLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN4QztRQUNELEtBQUssVUFBVSxDQUFDLENBQUM7WUFDZixNQUFNLENBQUMsR0FBRyxhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUM7WUFDakUsTUFBTSxJQUFJLEdBQ04sYUFBYSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQzlELE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ25DLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN4QztRQUNEO1lBQ0UsTUFBTSxTQUFTLENBQUMsYUFBYSxJQUFJLENBQUMsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0tBQzlEO0FBQ0gsQ0FBQyxDQUFDO0FBRVYsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtUZW5zb3J9IGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZSc7XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWltcG9ydHMtZnJvbS1kaXN0XG5pbXBvcnQgKiBhcyB0Zk9wcyBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUvZGlzdC9vcHMvb3BzX2Zvcl9jb252ZXJ0ZXInO1xuXG5pbXBvcnQge05hbWVkVGVuc29yc01hcH0gZnJvbSAnLi4vLi4vZGF0YS90eXBlcyc7XG5pbXBvcnQge0V4ZWN1dGlvbkNvbnRleHR9IGZyb20gJy4uLy4uL2V4ZWN1dG9yL2V4ZWN1dGlvbl9jb250ZXh0JztcbmltcG9ydCB7SW50ZXJuYWxPcEV4ZWN1dG9yLCBOb2RlfSBmcm9tICcuLi90eXBlcyc7XG5cbmltcG9ydCB7Z2V0UGFyYW1WYWx1ZX0gZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCBjb25zdCBleGVjdXRlT3A6IEludGVybmFsT3BFeGVjdXRvciA9XG4gICAgKG5vZGU6IE5vZGUsIHRlbnNvck1hcDogTmFtZWRUZW5zb3JzTWFwLCBjb250ZXh0OiBFeGVjdXRpb25Db250ZXh0LFxuICAgICBvcHMgPSB0Zk9wcyk6XG4gICAgICAgIFRlbnNvcltdID0+IHtcbiAgICAgICAgICBzd2l0Y2ggKG5vZGUub3ApIHtcbiAgICAgICAgICAgIGNhc2UgJ0xvd2VyQm91bmQnOiB7XG4gICAgICAgICAgICAgIGNvbnN0IHNvcnRlZFNlcXVlbmNlID1cbiAgICAgICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3NvcnRlZFNlcXVlbmNlJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhc1xuICAgICAgICAgICAgICAgICAgVGVuc29yO1xuICAgICAgICAgICAgICBjb25zdCB2YWx1ZXMgPVxuICAgICAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgndmFsdWVzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3I7XG4gICAgICAgICAgICAgIHJldHVybiBbb3BzLmxvd2VyQm91bmQoc29ydGVkU2VxdWVuY2UsIHZhbHVlcyldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnVG9wS1YyJzoge1xuICAgICAgICAgICAgICBjb25zdCB4ID0gZ2V0UGFyYW1WYWx1ZSgneCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuICAgICAgICAgICAgICBjb25zdCBrID0gZ2V0UGFyYW1WYWx1ZSgnaycsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgbnVtYmVyO1xuICAgICAgICAgICAgICBjb25zdCBzb3J0ZWQgPVxuICAgICAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnc29ydGVkJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBib29sZWFuO1xuICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBvcHMudG9wayh4LCBrLCBzb3J0ZWQpO1xuICAgICAgICAgICAgICByZXR1cm4gW3Jlc3VsdC52YWx1ZXMsIHJlc3VsdC5pbmRpY2VzXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ1VwcGVyQm91bmQnOiB7XG4gICAgICAgICAgICAgIGNvbnN0IHNvcnRlZFNlcXVlbmNlID1cbiAgICAgICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3NvcnRlZFNlcXVlbmNlJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhc1xuICAgICAgICAgICAgICAgICAgVGVuc29yO1xuICAgICAgICAgICAgICBjb25zdCB2YWx1ZXMgPVxuICAgICAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgndmFsdWVzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3I7XG4gICAgICAgICAgICAgIHJldHVybiBbb3BzLnVwcGVyQm91bmQoc29ydGVkU2VxdWVuY2UsIHZhbHVlcyldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnVW5pcXVlJzoge1xuICAgICAgICAgICAgICBjb25zdCB4ID0gZ2V0UGFyYW1WYWx1ZSgneCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBvcHMudW5pcXVlKHgpO1xuICAgICAgICAgICAgICByZXR1cm4gW3Jlc3VsdC52YWx1ZXMsIHJlc3VsdC5pbmRpY2VzXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ1VuaXF1ZVYyJzoge1xuICAgICAgICAgICAgICBjb25zdCB4ID0gZ2V0UGFyYW1WYWx1ZSgneCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuICAgICAgICAgICAgICBjb25zdCBheGlzID1cbiAgICAgICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2F4aXMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIG51bWJlcjtcbiAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gb3BzLnVuaXF1ZSh4LCBheGlzKTtcbiAgICAgICAgICAgICAgcmV0dXJuIFtyZXN1bHQudmFsdWVzLCByZXN1bHQuaW5kaWNlc107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoYE5vZGUgdHlwZSAke25vZGUub3B9IGlzIG5vdCBpbXBsZW1lbnRlZGApO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuZXhwb3J0IGNvbnN0IENBVEVHT1JZID0gJ2V2YWx1YXRpb24nO1xuIl19","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { cloneTensor, getParamValue, getTensor } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'Const': {\n            return tensorMap[node.name];\n        }\n        case 'PlaceholderWithDefault':\n            const def = getParamValue('default', node, tensorMap, context);\n            return [getTensor(node.name, tensorMap, context) || def];\n        case 'Placeholder':\n            return [getTensor(node.name, tensorMap, context)];\n        case 'Identity':\n        case 'StopGradient':\n        case 'FakeQuantWithMinMaxVars': { // This op is currently ignored.\n            const data = getParamValue('x', node, tensorMap, context);\n            return [cloneTensor(data)];\n        }\n        case 'IdentityN':\n            return getParamValue('x', node, tensorMap, context)\n                .map((t) => cloneTensor(t));\n        case 'Snapshot':\n            const snapshot = getParamValue('x', node, tensorMap, context);\n            return [cloneTensor(snapshot)];\n        case 'Shape':\n            return [ops.tensor1d(getParamValue('x', node, tensorMap, context).shape, 'int32')];\n        case 'ShapeN':\n            return getParamValue('x', node, tensorMap, context)\n                .map((t) => ops.tensor1d(t.shape));\n        case 'Size':\n            return [ops.scalar(getParamValue('x', node, tensorMap, context).size, 'int32')];\n        case 'Rank':\n            return [ops.scalar(getParamValue('x', node, tensorMap, context).rank, 'int32')];\n        case 'NoOp':\n            return [ops.scalar(1)];\n        case 'Print':\n            const input = getParamValue('x', node, tensorMap, context);\n            const data = getParamValue('data', node, tensorMap, context);\n            const message = getParamValue('message', node, tensorMap, context);\n            const summarize = getParamValue('summarize', node, tensorMap, context);\n            console.warn('The graph has a tf.print() operation,' +\n                'usually used for debugging, which slows down performance.');\n            console.log(message);\n            for (let i = 0; i < data.length; i++) {\n                console.log(Array.prototype.slice.call(data[i].dataSync())\n                    .slice(0, summarize));\n            }\n            return [input];\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'graph';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { keep, scalar, stack, tidy, unstack, util } from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n/**\n * Hashtable contains a set of tensors, which can be accessed by key.\n */\nexport class HashTable {\n    get id() {\n        return this.handle.id;\n    }\n    /**\n     * Constructor of HashTable. Creates a hash table.\n     *\n     * @param keyDType `dtype` of the table keys.\n     * @param valueDType `dtype` of the table values.\n     */\n    constructor(keyDType, valueDType) {\n        this.keyDType = keyDType;\n        this.valueDType = valueDType;\n        this.handle = scalar(0);\n        // tslint:disable-next-line: no-any\n        this.tensorMap = new Map();\n        keep(this.handle);\n    }\n    /**\n     * Dispose the tensors and handle and clear the hashtable.\n     */\n    clearAndClose() {\n        this.tensorMap.forEach(value => value.dispose());\n        this.tensorMap.clear();\n        this.handle.dispose();\n    }\n    /**\n     * The number of items in the hash table.\n     */\n    size() {\n        return this.tensorMap.size;\n    }\n    /**\n     * The number of items in the hash table as a rank-0 tensor.\n     */\n    tensorSize() {\n        return tfOps.scalar(this.size(), 'int32');\n    }\n    /**\n     * Replaces the contents of the table with the specified keys and values.\n     * @param keys Keys to store in the hashtable.\n     * @param values Values to store in the hashtable.\n     */\n    async import(keys, values) {\n        this.checkKeyAndValueTensor(keys, values);\n        // We only store the primitive values of the keys, this allows lookup\n        // to be O(1).\n        const $keys = await keys.data();\n        // Clear the hashTable before inserting new values.\n        this.tensorMap.forEach(value => value.dispose());\n        this.tensorMap.clear();\n        return tidy(() => {\n            const $values = unstack(values);\n            const keysLength = $keys.length;\n            const valuesLength = $values.length;\n            util.assert(keysLength === valuesLength, () => `The number of elements doesn't match, keys has ` +\n                `${keysLength} elements, the values has ${valuesLength} ` +\n                `elements.`);\n            for (let i = 0; i < keysLength; i++) {\n                const key = $keys[i];\n                const value = $values[i];\n                keep(value);\n                this.tensorMap.set(key, value);\n            }\n            return this.handle;\n        });\n    }\n    /**\n     * Looks up keys in a hash table, outputs the corresponding values.\n     *\n     * Performs batch lookups, for every element in the key tensor, `find`\n     * stacks the corresponding value into the return tensor.\n     *\n     * If an element is not present in the table, the given `defaultValue` is\n     * used.\n     *\n     * @param keys Keys to look up. Must have the same type as the keys of the\n     *     table.\n     * @param defaultValue The scalar `defaultValue` is the value output for keys\n     *     not present in the table. It must also be of the same type as the\n     *     table values.\n     */\n    async find(keys, defaultValue) {\n        this.checkKeyAndValueTensor(keys, defaultValue);\n        const $keys = await keys.data();\n        return tidy(() => {\n            const result = [];\n            for (let i = 0; i < $keys.length; i++) {\n                const key = $keys[i];\n                const value = this.findWithDefault(key, defaultValue);\n                result.push(value);\n            }\n            return stack(result);\n        });\n    }\n    // tslint:disable-next-line: no-any\n    findWithDefault(key, defaultValue) {\n        const result = this.tensorMap.get(key);\n        return result != null ? result : defaultValue;\n    }\n    checkKeyAndValueTensor(key, value) {\n        if (key.dtype !== this.keyDType) {\n            throw new Error(`Expect key dtype ${this.keyDType}, but got ` +\n                `${key.dtype}`);\n        }\n        if (value.dtype !== this.valueDType) {\n            throw new Error(`Expect value dtype ${this.valueDType}, but got ` +\n                `${value.dtype}`);\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { HashTable } from '../../executor/hash_table';\nimport { getParamValue } from './utils';\nexport const executeOp = async (node, tensorMap, context, resourceManager) => {\n    switch (node.op) {\n        case 'HashTable':\n        case 'HashTableV2': {\n            const existingTableHandle = resourceManager.getHashTableHandleByName(node.name);\n            // Table is shared with initializer.\n            if (existingTableHandle != null) {\n                return [existingTableHandle];\n            }\n            else {\n                const keyDType = getParamValue('keyDType', node, tensorMap, context);\n                const valueDType = getParamValue('valueDType', node, tensorMap, context);\n                const hashTable = new HashTable(keyDType, valueDType);\n                resourceManager.addHashTable(node.name, hashTable);\n                return [hashTable.handle];\n            }\n        }\n        case 'InitializeTable':\n        case 'InitializeTableV2':\n        case 'LookupTableImport':\n        case 'LookupTableImportV2': {\n            const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n            const keys = getParamValue('keys', node, tensorMap, context);\n            const values = getParamValue('values', node, tensorMap, context);\n            const hashTable = resourceManager.getHashTableById(handle.id);\n            return [await hashTable.import(keys, values)];\n        }\n        case 'LookupTableFind':\n        case 'LookupTableFindV2': {\n            const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n            const keys = getParamValue('keys', node, tensorMap, context);\n            const defaultValue = getParamValue('defaultValue', node, tensorMap, context);\n            const hashTable = resourceManager.getHashTableById(handle.id);\n            return [await hashTable.find(keys, defaultValue)];\n        }\n        case 'LookupTableSize':\n        case 'LookupTableSizeV2': {\n            const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n            const hashTable = resourceManager.getHashTableById(handle.id);\n            return [hashTable.tensorSize()];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'hash_table';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaF90YWJsZV9leGVjdXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29udmVydGVyL3NyYy9vcGVyYXRpb25zL2V4ZWN1dG9ycy9oYXNoX3RhYmxlX2V4ZWN1dG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQU1ILE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUlwRCxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBRXRDLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBNEIsS0FBSyxFQUNuRCxJQUFVLEVBQUUsU0FBMEIsRUFBRSxPQUF5QixFQUNqRSxlQUFnQyxFQUFxQixFQUFFO0lBQ3pELFFBQVEsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNmLEtBQUssV0FBVyxDQUFDO1FBQ2pCLEtBQUssYUFBYSxDQUFDLENBQUM7WUFDbEIsTUFBTSxtQkFBbUIsR0FDckIsZUFBZSxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN4RCxvQ0FBb0M7WUFDcEMsSUFBSSxtQkFBbUIsSUFBSSxJQUFJLEVBQUU7Z0JBQy9CLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO2FBQzlCO2lCQUFNO2dCQUNMLE1BQU0sUUFBUSxHQUNWLGFBQWEsQ0FBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQWEsQ0FBQztnQkFDcEUsTUFBTSxVQUFVLEdBQ1osYUFBYSxDQUFDLFlBQVksRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBYSxDQUFDO2dCQUV0RSxNQUFNLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7Z0JBQ3RELGVBQWUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztnQkFDbkQsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUMzQjtTQUNGO1FBQ0QsS0FBSyxpQkFBaUIsQ0FBQztRQUN2QixLQUFLLG1CQUFtQixDQUFDO1FBQ3pCLEtBQUssbUJBQW1CLENBQUM7UUFDekIsS0FBSyxxQkFBcUIsQ0FBQyxDQUFDO1lBQzFCLE1BQU0sTUFBTSxHQUFHLGFBQWEsQ0FDVCxhQUFhLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQ3ZDLGVBQWUsQ0FBVyxDQUFDO1lBQzlDLE1BQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQztZQUN2RSxNQUFNLE1BQU0sR0FDUixhQUFhLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUM7WUFFaEUsTUFBTSxTQUFTLEdBQUcsZUFBZSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUU5RCxPQUFPLENBQUMsTUFBTSxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQy9DO1FBQ0QsS0FBSyxpQkFBaUIsQ0FBQztRQUN2QixLQUFLLG1CQUFtQixDQUFDLENBQUM7WUFDeEIsTUFBTSxNQUFNLEdBQUcsYUFBYSxDQUNULGFBQWEsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFDdkMsZUFBZSxDQUFXLENBQUM7WUFDOUMsTUFBTSxJQUFJLEdBQUcsYUFBYSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQ3ZFLE1BQU0sWUFBWSxHQUNkLGFBQWEsQ0FBQyxjQUFjLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQztZQUV0RSxNQUFNLFNBQVMsR0FBRyxlQUFlLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzlELE9BQU8sQ0FBQyxNQUFNLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7U0FDbkQ7UUFDRCxLQUFLLGlCQUFpQixDQUFDO1FBQ3ZCLEtBQUssbUJBQW1CLENBQUMsQ0FBQztZQUN4QixNQUFNLE1BQU0sR0FBRyxhQUFhLENBQ1QsYUFBYSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUN2QyxlQUFlLENBQVcsQ0FBQztZQUU5QyxNQUFNLFNBQVMsR0FBRyxlQUFlLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzlELE9BQU8sQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztTQUNqQztRQUNEO1lBQ0UsTUFBTSxTQUFTLENBQUMsYUFBYSxJQUFJLENBQUMsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0tBQzlEO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtEYXRhVHlwZSwgVGVuc29yfSBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xuXG5pbXBvcnQge05hbWVkVGVuc29yc01hcH0gZnJvbSAnLi4vLi4vZGF0YS90eXBlcyc7XG5pbXBvcnQge0V4ZWN1dGlvbkNvbnRleHR9IGZyb20gJy4uLy4uL2V4ZWN1dG9yL2V4ZWN1dGlvbl9jb250ZXh0JztcbmltcG9ydCB7SGFzaFRhYmxlfSBmcm9tICcuLi8uLi9leGVjdXRvci9oYXNoX3RhYmxlJztcbmltcG9ydCB7UmVzb3VyY2VNYW5hZ2VyfSBmcm9tICcuLi8uLi9leGVjdXRvci9yZXNvdXJjZV9tYW5hZ2VyJztcbmltcG9ydCB7SW50ZXJuYWxPcEFzeW5jRXhlY3V0b3IsIE5vZGV9IGZyb20gJy4uL3R5cGVzJztcblxuaW1wb3J0IHtnZXRQYXJhbVZhbHVlfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IGV4ZWN1dGVPcDogSW50ZXJuYWxPcEFzeW5jRXhlY3V0b3IgPSBhc3luYyhcbiAgICBub2RlOiBOb2RlLCB0ZW5zb3JNYXA6IE5hbWVkVGVuc29yc01hcCwgY29udGV4dDogRXhlY3V0aW9uQ29udGV4dCxcbiAgICByZXNvdXJjZU1hbmFnZXI6IFJlc291cmNlTWFuYWdlcik6IFByb21pc2U8VGVuc29yW10+ID0+IHtcbiAgc3dpdGNoIChub2RlLm9wKSB7XG4gICAgY2FzZSAnSGFzaFRhYmxlJzpcbiAgICBjYXNlICdIYXNoVGFibGVWMic6IHtcbiAgICAgIGNvbnN0IGV4aXN0aW5nVGFibGVIYW5kbGUgPVxuICAgICAgICAgIHJlc291cmNlTWFuYWdlci5nZXRIYXNoVGFibGVIYW5kbGVCeU5hbWUobm9kZS5uYW1lKTtcbiAgICAgIC8vIFRhYmxlIGlzIHNoYXJlZCB3aXRoIGluaXRpYWxpemVyLlxuICAgICAgaWYgKGV4aXN0aW5nVGFibGVIYW5kbGUgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW2V4aXN0aW5nVGFibGVIYW5kbGVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qga2V5RFR5cGUgPVxuICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgna2V5RFR5cGUnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIERhdGFUeXBlO1xuICAgICAgICBjb25zdCB2YWx1ZURUeXBlID1cbiAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3ZhbHVlRFR5cGUnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIERhdGFUeXBlO1xuXG4gICAgICAgIGNvbnN0IGhhc2hUYWJsZSA9IG5ldyBIYXNoVGFibGUoa2V5RFR5cGUsIHZhbHVlRFR5cGUpO1xuICAgICAgICByZXNvdXJjZU1hbmFnZXIuYWRkSGFzaFRhYmxlKG5vZGUubmFtZSwgaGFzaFRhYmxlKTtcbiAgICAgICAgcmV0dXJuIFtoYXNoVGFibGUuaGFuZGxlXTtcbiAgICAgIH1cbiAgICB9XG4gICAgY2FzZSAnSW5pdGlhbGl6ZVRhYmxlJzpcbiAgICBjYXNlICdJbml0aWFsaXplVGFibGVWMic6XG4gICAgY2FzZSAnTG9va3VwVGFibGVJbXBvcnQnOlxuICAgIGNhc2UgJ0xvb2t1cFRhYmxlSW1wb3J0VjInOiB7XG4gICAgICBjb25zdCBoYW5kbGUgPSBnZXRQYXJhbVZhbHVlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICd0YWJsZUhhbmRsZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZU1hbmFnZXIpIGFzIFRlbnNvcjtcbiAgICAgIGNvbnN0IGtleXMgPSBnZXRQYXJhbVZhbHVlKCdrZXlzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3I7XG4gICAgICBjb25zdCB2YWx1ZXMgPVxuICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3ZhbHVlcycsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuXG4gICAgICBjb25zdCBoYXNoVGFibGUgPSByZXNvdXJjZU1hbmFnZXIuZ2V0SGFzaFRhYmxlQnlJZChoYW5kbGUuaWQpO1xuXG4gICAgICByZXR1cm4gW2F3YWl0IGhhc2hUYWJsZS5pbXBvcnQoa2V5cywgdmFsdWVzKV07XG4gICAgfVxuICAgIGNhc2UgJ0xvb2t1cFRhYmxlRmluZCc6XG4gICAgY2FzZSAnTG9va3VwVGFibGVGaW5kVjInOiB7XG4gICAgICBjb25zdCBoYW5kbGUgPSBnZXRQYXJhbVZhbHVlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICd0YWJsZUhhbmRsZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZU1hbmFnZXIpIGFzIFRlbnNvcjtcbiAgICAgIGNvbnN0IGtleXMgPSBnZXRQYXJhbVZhbHVlKCdrZXlzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3I7XG4gICAgICBjb25zdCBkZWZhdWx0VmFsdWUgPVxuICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2RlZmF1bHRWYWx1ZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuXG4gICAgICBjb25zdCBoYXNoVGFibGUgPSByZXNvdXJjZU1hbmFnZXIuZ2V0SGFzaFRhYmxlQnlJZChoYW5kbGUuaWQpO1xuICAgICAgcmV0dXJuIFthd2FpdCBoYXNoVGFibGUuZmluZChrZXlzLCBkZWZhdWx0VmFsdWUpXTtcbiAgICB9XG4gICAgY2FzZSAnTG9va3VwVGFibGVTaXplJzpcbiAgICBjYXNlICdMb29rdXBUYWJsZVNpemVWMic6IHtcbiAgICAgIGNvbnN0IGhhbmRsZSA9IGdldFBhcmFtVmFsdWUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3RhYmxlSGFuZGxlJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlTWFuYWdlcikgYXMgVGVuc29yO1xuXG4gICAgICBjb25zdCBoYXNoVGFibGUgPSByZXNvdXJjZU1hbmFnZXIuZ2V0SGFzaFRhYmxlQnlJZChoYW5kbGUuaWQpO1xuICAgICAgcmV0dXJuIFtoYXNoVGFibGUudGVuc29yU2l6ZSgpXTtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IFR5cGVFcnJvcihgTm9kZSB0eXBlICR7bm9kZS5vcH0gaXMgbm90IGltcGxlbWVudGVkYCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBDQVRFR09SWSA9ICdoYXNoX3RhYmxlJztcbiJdfQ==","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'ResizeBilinear': {\n            const images = getParamValue('images', node, tensorMap, context);\n            const size = getParamValue('size', node, tensorMap, context);\n            const alignCorners = getParamValue('alignCorners', node, tensorMap, context);\n            const halfPixelCenters = getParamValue('halfPixelCenters', node, tensorMap, context);\n            return [ops.image.resizeBilinear(images, [size[0], size[1]], alignCorners, halfPixelCenters)];\n        }\n        case 'ResizeNearestNeighbor': {\n            const images = getParamValue('images', node, tensorMap, context);\n            const size = getParamValue('size', node, tensorMap, context);\n            const alignCorners = getParamValue('alignCorners', node, tensorMap, context);\n            const halfPixelCenters = getParamValue('halfPixelCenters', node, tensorMap, context);\n            return [ops.image.resizeNearestNeighbor(images, [size[0], size[1]], alignCorners, halfPixelCenters)];\n        }\n        case 'CropAndResize': {\n            const image = getParamValue('image', node, tensorMap, context);\n            const boxes = getParamValue('boxes', node, tensorMap, context);\n            const boxInd = getParamValue('boxInd', node, tensorMap, context);\n            const cropSize = getParamValue('cropSize', node, tensorMap, context);\n            const method = getParamValue('method', node, tensorMap, context);\n            const extrapolationValue = getParamValue('extrapolationValue', node, tensorMap, context);\n            return [ops.image.cropAndResize(image, boxes, boxInd, cropSize, method, extrapolationValue)];\n        }\n        case 'ImageProjectiveTransformV3': {\n            const images = getParamValue('images', node, tensorMap, context);\n            const transforms = getParamValue('transforms', node, tensorMap, context);\n            const outputShape = getParamValue('outputShape', node, tensorMap, context);\n            const fillValue = getParamValue('fillValue', node, tensorMap, context);\n            const interpolation = getParamValue('interpolation', node, tensorMap, context);\n            const fillMode = getParamValue('fillMode', node, tensorMap, context);\n            return [ops.image.transform(images, transforms, interpolation.toLowerCase(), fillMode.toLowerCase(), fillValue, outputShape)];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'image';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'Equal': {\n            return [ops.equal(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'NotEqual': {\n            return [ops.notEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'Greater': {\n            return [ops.greater(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'GreaterEqual': {\n            return [ops.greaterEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'Less': {\n            return [ops.less(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'LessEqual': {\n            return [ops.lessEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'LogicalAnd': {\n            return [ops.logicalAnd(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'LogicalNot': {\n            return [ops.logicalNot(getParamValue('a', node, tensorMap, context))];\n        }\n        case 'LogicalOr': {\n            return [ops.logicalOr(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'Select':\n        case 'SelectV2': {\n            return [ops.where(getParamValue('condition', node, tensorMap, context), getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'BitwiseAnd': {\n            return [ops.bitwiseAnd(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'logical';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'BatchMatMul':\n        case 'BatchMatMulV2':\n        case 'MatMul':\n            return [ops.matMul(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context), getParamValue('transposeA', node, tensorMap, context), getParamValue('transposeB', node, tensorMap, context))];\n        case 'Einsum':\n            return [ops.einsum(getParamValue('equation', node, tensorMap, context), ...getParamValue('tensors', node, tensorMap, context))];\n        case 'Transpose':\n            return [ops.transpose(getParamValue('x', node, tensorMap, context), getParamValue('perm', node, tensorMap, context))];\n        case '_FusedMatMul':\n            const [extraOp, activationFunc] = getParamValue('fusedOps', node, tensorMap, context);\n            const isBiasAdd = extraOp === 'biasadd';\n            const isPrelu = activationFunc === 'prelu';\n            const numArgs = getParamValue('numArgs', node, tensorMap, context);\n            const leakyreluAlpha = getParamValue('leakyreluAlpha', node, tensorMap, context);\n            if (isBiasAdd) {\n                if (isPrelu && numArgs !== 2) {\n                    throw new Error('Fused MatMul with BiasAdd and Prelu must have two ' +\n                        'extra arguments: bias and alpha.');\n                }\n                if (!isPrelu && numArgs !== 1) {\n                    throw new Error('Fused MatMul with BiasAdd must have one extra argument: bias.');\n                }\n            }\n            const [biasArg, preluArg] = getParamValue('args', node, tensorMap, context);\n            return [ops.fused.matMul({\n                    a: getParamValue('a', node, tensorMap, context),\n                    b: getParamValue('b', node, tensorMap, context),\n                    transposeA: getParamValue('transposeA', node, tensorMap, context),\n                    transposeB: getParamValue('transposeB', node, tensorMap, context),\n                    bias: biasArg,\n                    activation: activationFunc,\n                    preluActivationWeights: preluArg,\n                    leakyreluAlpha\n                })];\n        case 'MatrixBandPart':\n            return [ops.linalg.bandPart(getParamValue('a', node, tensorMap, context), getParamValue('numLower', node, tensorMap, context), getParamValue('numUpper', node, tensorMap, context))];\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'matrices';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'EuclideanNorm':\n            return [ops.euclideanNorm(getParamValue('x', node, tensorMap, context), getParamValue('axis', node, tensorMap, context), getParamValue('keepDims', node, tensorMap, context))];\n        case 'FusedBatchNorm':\n        case 'FusedBatchNormV2': {\n            return [ops.batchNorm(getParamValue('x', node, tensorMap, context), getParamValue('mean', node, tensorMap, context), getParamValue('variance', node, tensorMap, context), getParamValue('offset', node, tensorMap, context), getParamValue('scale', node, tensorMap, context), getParamValue('epsilon', node, tensorMap, context))];\n        }\n        case 'FusedBatchNormV3': {\n            return [ops.batchNorm(getParamValue('x', node, tensorMap, context), getParamValue('mean', node, tensorMap, context), getParamValue('variance', node, tensorMap, context), getParamValue('offset', node, tensorMap, context), getParamValue('scale', node, tensorMap, context), getParamValue('epsilon', node, tensorMap, context))];\n        }\n        case 'LRN': {\n            return [ops.localResponseNormalization(getParamValue('x', node, tensorMap, context), getParamValue('radius', node, tensorMap, context), getParamValue('bias', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context), getParamValue('beta', node, tensorMap, context))];\n        }\n        case 'Softmax': {\n            return [ops.softmax(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'LogSoftmax': {\n            return [ops.logSoftmax(getParamValue('x', node, tensorMap, context))];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'normalization';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9ybWFsaXphdGlvbl9leGVjdXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29udmVydGVyL3NyYy9vcGVyYXRpb25zL2V4ZWN1dG9ycy9ub3JtYWxpemF0aW9uX2V4ZWN1dG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUdILGlEQUFpRDtBQUNqRCxPQUFPLEtBQUssS0FBSyxNQUFNLGtEQUFrRCxDQUFDO0FBTTFFLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFFdEMsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUNsQixDQUFDLElBQVUsRUFBRSxTQUEwQixFQUN0QyxPQUF5QixFQUFFLEdBQUcsR0FBRyxLQUFLLEVBQVksRUFBRTtJQUNuRCxRQUFRLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDZixLQUFLLGVBQWU7WUFDbEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQ3JCLGFBQWEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDdEQsYUFBYSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBYSxFQUMzRCxhQUFhLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFZLENBQUMsQ0FBQyxDQUFDO1FBQ3ZFLEtBQUssZ0JBQWdCLENBQUM7UUFDdEIsS0FBSyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ3ZCLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUNqQixhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLEVBQ3RELGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDekQsYUFBYSxDQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUM3RCxhQUFhLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLEVBQzNELGFBQWEsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDMUQsYUFBYSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDLENBQUMsQ0FBQztTQUNwRTtRQUNELEtBQUssa0JBQWtCLENBQUMsQ0FBQztZQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FDakIsYUFBYSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUN0RCxhQUFhLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLEVBQ3pELGFBQWEsQ0FBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDN0QsYUFBYSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUMzRCxhQUFhLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLEVBQzFELGFBQWEsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQyxDQUFDLENBQUM7U0FDcEU7UUFDRCxLQUFLLEtBQUssQ0FBQyxDQUFDO1lBQ1YsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsQ0FDbEMsYUFBYSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FDL0IsRUFDWixhQUFhLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLEVBQzNELGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDekQsYUFBYSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUMxRCxhQUFhLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUMsQ0FBQyxDQUFDO1NBQ2pFO1FBQ0QsS0FBSyxTQUFTLENBQUMsQ0FBQztZQUNkLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUNmLGFBQWEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQyxDQUFDLENBQUM7U0FDOUQ7UUFDRCxLQUFLLFlBQVksQ0FBQyxDQUFDO1lBQ2pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUNsQixhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUMsQ0FBQyxDQUFDO1NBQzlEO1FBQ0Q7WUFDRSxNQUFNLFNBQVMsQ0FBQyxhQUFhLElBQUksQ0FBQyxFQUFFLHFCQUFxQixDQUFDLENBQUM7S0FDOUQ7QUFDSCxDQUFDLENBQUM7QUFFTixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsZUFBZSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge1RlbnNvciwgVGVuc29yM0QsIFRlbnNvcjREfSBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1pbXBvcnRzLWZyb20tZGlzdFxuaW1wb3J0ICogYXMgdGZPcHMgZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlL2Rpc3Qvb3BzL29wc19mb3JfY29udmVydGVyJztcblxuaW1wb3J0IHtOYW1lZFRlbnNvcnNNYXB9IGZyb20gJy4uLy4uL2RhdGEvdHlwZXMnO1xuaW1wb3J0IHtFeGVjdXRpb25Db250ZXh0fSBmcm9tICcuLi8uLi9leGVjdXRvci9leGVjdXRpb25fY29udGV4dCc7XG5pbXBvcnQge0ludGVybmFsT3BFeGVjdXRvciwgTm9kZX0gZnJvbSAnLi4vdHlwZXMnO1xuXG5pbXBvcnQge2dldFBhcmFtVmFsdWV9IGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgY29uc3QgZXhlY3V0ZU9wOiBJbnRlcm5hbE9wRXhlY3V0b3IgPVxuICAgIChub2RlOiBOb2RlLCB0ZW5zb3JNYXA6IE5hbWVkVGVuc29yc01hcCxcbiAgICAgY29udGV4dDogRXhlY3V0aW9uQ29udGV4dCwgb3BzID0gdGZPcHMpOiBUZW5zb3JbXSA9PiB7XG4gICAgICBzd2l0Y2ggKG5vZGUub3ApIHtcbiAgICAgICAgY2FzZSAnRXVjbGlkZWFuTm9ybSc6XG4gICAgICAgICAgcmV0dXJuIFtvcHMuZXVjbGlkZWFuTm9ybShcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgneCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdheGlzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBudW1iZXJbXSxcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgna2VlcERpbXMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIGJvb2xlYW4pXTtcbiAgICAgICAgY2FzZSAnRnVzZWRCYXRjaE5vcm0nOlxuICAgICAgICBjYXNlICdGdXNlZEJhdGNoTm9ybVYyJzoge1xuICAgICAgICAgIHJldHVybiBbb3BzLmJhdGNoTm9ybShcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgneCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdtZWFuJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IsXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3ZhcmlhbmNlJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IsXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ29mZnNldCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdzY2FsZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdlcHNpbG9uJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBudW1iZXIpXTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdGdXNlZEJhdGNoTm9ybVYzJzoge1xuICAgICAgICAgIHJldHVybiBbb3BzLmJhdGNoTm9ybShcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgneCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdtZWFuJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IsXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3ZhcmlhbmNlJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IsXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ29mZnNldCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdzY2FsZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdlcHNpbG9uJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBudW1iZXIpXTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdMUk4nOiB7XG4gICAgICAgICAgcmV0dXJuIFtvcHMubG9jYWxSZXNwb25zZU5vcm1hbGl6YXRpb24oXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3gnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcjNEIHxcbiAgICAgICAgICAgICAgICAgIFRlbnNvcjRELFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdyYWRpdXMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIG51bWJlcixcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnYmlhcycsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgbnVtYmVyLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdhbHBoYScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgbnVtYmVyLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdiZXRhJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBudW1iZXIpXTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdTb2Z0bWF4Jzoge1xuICAgICAgICAgIHJldHVybiBbb3BzLnNvZnRtYXgoXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3gnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcildO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ0xvZ1NvZnRtYXgnOiB7XG4gICAgICAgICAgcmV0dXJuIFtvcHMubG9nU29mdG1heChcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgneCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yKV07XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoYE5vZGUgdHlwZSAke25vZGUub3B9IGlzIG5vdCBpbXBsZW1lbnRlZGApO1xuICAgICAgfVxuICAgIH07XG5cbmV4cG9ydCBjb25zdCBDQVRFR09SWSA9ICdub3JtYWxpemF0aW9uJztcbiJdfQ==","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'RaggedGather': {\n            const { outputNestedSplits, outputDenseValues, } = ops.raggedGather(getParamValue('paramsNestedSplits', node, tensorMap, context), getParamValue('paramsDenseValues', node, tensorMap, context), getParamValue('indices', node, tensorMap, context), getParamValue('outputRaggedRank', node, tensorMap, context));\n            return outputNestedSplits.concat(outputDenseValues);\n        }\n        case 'RaggedRange': {\n            const { rtNestedSplits, rtDenseValues } = ops.raggedRange(getParamValue('starts', node, tensorMap, context), getParamValue('limits', node, tensorMap, context), getParamValue('splits', node, tensorMap, context));\n            return [rtNestedSplits, rtDenseValues];\n        }\n        case 'RaggedTensorToTensor': {\n            return [ops.raggedTensorToTensor(getParamValue('shape', node, tensorMap, context), getParamValue('values', node, tensorMap, context), getParamValue('defaultValue', node, tensorMap, context), getParamValue('rowPartitionTensors', node, tensorMap, context), getParamValue('rowPartitionTypes', node, tensorMap, context))];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'ragged';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFnZ2VkX2V4ZWN1dG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1jb252ZXJ0ZXIvc3JjL29wZXJhdGlvbnMvZXhlY3V0b3JzL3JhZ2dlZF9leGVjdXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFHSCxpREFBaUQ7QUFDakQsT0FBTyxLQUFLLEtBQUssTUFBTSxrREFBa0QsQ0FBQztBQU0xRSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBRXRDLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FDbEIsQ0FBQyxJQUFVLEVBQUUsU0FBMEIsRUFBRSxPQUF5QixFQUNqRSxHQUFHLEdBQUcsS0FBSyxFQUFZLEVBQUU7SUFDeEIsUUFBUSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2YsS0FBSyxjQUFjLENBQUMsQ0FBQztZQUNuQixNQUFNLEVBQ0osa0JBQWtCLEVBQ2xCLGlCQUFpQixHQUNsQixHQUNHLEdBQUcsQ0FBQyxZQUFZLENBQ1osYUFBYSxDQUNULG9CQUFvQixFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUN0QyxFQUNaLGFBQWEsQ0FDVCxtQkFBbUIsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUM1RCxhQUFhLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLEVBQzVELGFBQWEsQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FDaEQsQ0FBQyxDQUFDO1lBQ3BCLE9BQU8sa0JBQWtCLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7U0FDckQ7UUFDRCxLQUFLLGFBQWEsQ0FBQyxDQUFDO1lBQ2xCLE1BQU0sRUFBQyxjQUFjLEVBQUUsYUFBYSxFQUFDLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FDbkQsYUFBYSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUMzRCxhQUFhLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLEVBQzNELGFBQWEsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQyxDQUFDO1lBQ2pFLE9BQU8sQ0FBQyxjQUFjLEVBQUUsYUFBYSxDQUFDLENBQUM7U0FDeEM7UUFDRCxLQUFLLHNCQUFzQixDQUFDLENBQUM7WUFDM0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FDNUIsYUFBYSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUMxRCxhQUFhLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFhLEVBQzdELGFBQWEsQ0FBQyxjQUFjLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDakUsYUFBYSxDQUFDLHFCQUFxQixFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUNqRCxFQUNaLGFBQWEsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FDL0MsQ0FBQyxDQUFDLENBQUM7U0FDcEI7UUFDRDtZQUNFLE1BQU0sU0FBUyxDQUFDLGFBQWEsSUFBSSxDQUFDLEVBQUUscUJBQXFCLENBQUMsQ0FBQztLQUM5RDtBQUNILENBQUMsQ0FBQztBQUVOLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7VGVuc29yLCBUZW5zb3IxRH0gZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8taW1wb3J0cy1mcm9tLWRpc3RcbmltcG9ydCAqIGFzIHRmT3BzIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZS9kaXN0L29wcy9vcHNfZm9yX2NvbnZlcnRlcic7XG5cbmltcG9ydCB7TmFtZWRUZW5zb3JzTWFwfSBmcm9tICcuLi8uLi9kYXRhL3R5cGVzJztcbmltcG9ydCB7RXhlY3V0aW9uQ29udGV4dH0gZnJvbSAnLi4vLi4vZXhlY3V0b3IvZXhlY3V0aW9uX2NvbnRleHQnO1xuaW1wb3J0IHtJbnRlcm5hbE9wRXhlY3V0b3IsIE5vZGV9IGZyb20gJy4uL3R5cGVzJztcblxuaW1wb3J0IHtnZXRQYXJhbVZhbHVlfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IGV4ZWN1dGVPcDogSW50ZXJuYWxPcEV4ZWN1dG9yID1cbiAgICAobm9kZTogTm9kZSwgdGVuc29yTWFwOiBOYW1lZFRlbnNvcnNNYXAsIGNvbnRleHQ6IEV4ZWN1dGlvbkNvbnRleHQsXG4gICAgIG9wcyA9IHRmT3BzKTogVGVuc29yW10gPT4ge1xuICAgICAgc3dpdGNoIChub2RlLm9wKSB7XG4gICAgICAgIGNhc2UgJ1JhZ2dlZEdhdGhlcic6IHtcbiAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBvdXRwdXROZXN0ZWRTcGxpdHMsXG4gICAgICAgICAgICBvdXRwdXREZW5zZVZhbHVlcyxcbiAgICAgICAgICB9ID1cbiAgICAgICAgICAgICAgb3BzLnJhZ2dlZEdhdGhlcihcbiAgICAgICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoXG4gICAgICAgICAgICAgICAgICAgICAgJ3BhcmFtc05lc3RlZFNwbGl0cycsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXNcbiAgICAgICAgICAgICAgICAgICAgICBUZW5zb3JbXSxcbiAgICAgICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoXG4gICAgICAgICAgICAgICAgICAgICAgJ3BhcmFtc0RlbnNlVmFsdWVzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IsXG4gICAgICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdpbmRpY2VzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IsXG4gICAgICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdvdXRwdXRSYWdnZWRSYW5rJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhc1xuICAgICAgICAgICAgICAgICAgICAgIG51bWJlcik7XG4gICAgICAgICAgcmV0dXJuIG91dHB1dE5lc3RlZFNwbGl0cy5jb25jYXQob3V0cHV0RGVuc2VWYWx1ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ1JhZ2dlZFJhbmdlJzoge1xuICAgICAgICAgIGNvbnN0IHtydE5lc3RlZFNwbGl0cywgcnREZW5zZVZhbHVlc30gPSBvcHMucmFnZ2VkUmFuZ2UoXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3N0YXJ0cycsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdsaW1pdHMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcixcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnc3BsaXRzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IpO1xuICAgICAgICAgIHJldHVybiBbcnROZXN0ZWRTcGxpdHMsIHJ0RGVuc2VWYWx1ZXNdO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ1JhZ2dlZFRlbnNvclRvVGVuc29yJzoge1xuICAgICAgICAgIHJldHVybiBbb3BzLnJhZ2dlZFRlbnNvclRvVGVuc29yKFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdzaGFwZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCd2YWx1ZXMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcjFELFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdkZWZhdWx0VmFsdWUnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcixcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgncm93UGFydGl0aW9uVGVuc29ycycsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXNcbiAgICAgICAgICAgICAgICAgIFRlbnNvcltdLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdyb3dQYXJ0aXRpb25UeXBlcycsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXNcbiAgICAgICAgICAgICAgICAgIHN0cmluZ1tdKV07XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoYE5vZGUgdHlwZSAke25vZGUub3B9IGlzIG5vdCBpbXBsZW1lbnRlZGApO1xuICAgICAgfVxuICAgIH07XG5cbmV4cG9ydCBjb25zdCBDQVRFR09SWSA9ICdyYWdnZWQnO1xuIl19","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'Max': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [ops.max(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'Mean': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [ops.mean(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'Min': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [ops.min(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'Sum': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [ops.sum(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'All': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [ops.all(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'Any': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [ops.any(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'ArgMax': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            return [ops.argMax(getParamValue('x', node, tensorMap, context), axis)];\n        }\n        case 'ArgMin': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            return [ops.argMin(getParamValue('x', node, tensorMap, context), axis)];\n        }\n        case 'Prod': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [ops.prod(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'Cumprod': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const exclusive = getParamValue('exclusive', node, tensorMap, context);\n            const reverse = getParamValue('reverse', node, tensorMap, context);\n            return [ops.cumprod(getParamValue('x', node, tensorMap, context), axis, exclusive, reverse)];\n        }\n        case 'Cumsum': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const exclusive = getParamValue('exclusive', node, tensorMap, context);\n            const reverse = getParamValue('reverse', node, tensorMap, context);\n            return [ops.cumsum(getParamValue('x', node, tensorMap, context), axis, exclusive, reverse)];\n        }\n        case 'Bincount':\n            const x = getParamValue('x', node, tensorMap, context);\n            const weights = getParamValue('weights', node, tensorMap, context);\n            const size = getParamValue('size', node, tensorMap, context);\n            return [ops.bincount(x, weights, size)];\n        case 'DenseBincount': {\n            const x = getParamValue('x', node, tensorMap, context);\n            const weights = getParamValue('weights', node, tensorMap, context);\n            const size = getParamValue('size', node, tensorMap, context);\n            const binaryOutput = getParamValue('binaryOutput', node, tensorMap, context);\n            return [ops.denseBincount(x, weights, size, binaryOutput)];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'reduction';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { tidy, util } from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'ConcatV2':\n        case 'Concat': {\n            const n = getParamValue('n', node, tensorMap, context);\n            const axis = getParamValue('axis', node, tensorMap, context);\n            let inputs = getParamValue('tensors', node, tensorMap, context);\n            inputs = inputs.slice(0, n);\n            return [ops.concat(inputs, axis)];\n        }\n        case 'Gather': {\n            const input = getParamValue('x', node, tensorMap, context);\n            const indices = getParamValue('indices', node, tensorMap, context);\n            return [ops.gather(input, ops.cast(indices, 'int32'), 0)];\n        }\n        case 'GatherV2': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const batchDims = getParamValue('batchDims', node, tensorMap, context);\n            const input = getParamValue('x', node, tensorMap, context);\n            const indices = getParamValue('indices', node, tensorMap, context);\n            return [ops.gather(input, ops.cast(indices, 'int32'), axis, batchDims)];\n        }\n        case 'Reverse': {\n            const dims = getParamValue('dims', node, tensorMap, context);\n            const axis = [];\n            for (let i = 0; i < dims.length; i++) {\n                if (dims[i]) {\n                    axis.push(i);\n                }\n            }\n            const input = getParamValue('x', node, tensorMap, context);\n            return [ops.reverse(input, axis)];\n        }\n        case 'ReverseV2': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const input = getParamValue('x', node, tensorMap, context);\n            return [ops.reverse(input, axis)];\n        }\n        case 'Slice': {\n            // tslint:disable-next-line:no-any\n            const begin = getParamValue('begin', node, tensorMap, context);\n            // tslint:disable-next-line:no-any\n            const size = getParamValue('size', node, tensorMap, context);\n            return [ops.slice(getParamValue('x', node, tensorMap, context), begin, size)];\n        }\n        case 'StridedSlice': {\n            const begin = getParamValue('begin', node, tensorMap, context);\n            const end = getParamValue('end', node, tensorMap, context);\n            const strides = getParamValue('strides', node, tensorMap, context);\n            const beginMask = getParamValue('beginMask', node, tensorMap, context);\n            const endMask = getParamValue('endMask', node, tensorMap, context);\n            const ellipsisMask = getParamValue('ellipsisMask', node, tensorMap, context);\n            const newAxisMask = getParamValue('newAxisMask', node, tensorMap, context);\n            const shrinkAxisMask = getParamValue('shrinkAxisMask', node, tensorMap, context);\n            const tensor = getParamValue('x', node, tensorMap, context);\n            return [ops.stridedSlice(tensor, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask)];\n        }\n        case 'Pack': {\n            return tidy(() => {\n                const axis = getParamValue('axis', node, tensorMap, context);\n                const tensors = getParamValue('tensors', node, tensorMap, context);\n                // Reshape the tensors to the first tensor's shape if they don't\n                // match.\n                const shape = tensors[0].shape;\n                const squeezedShape = ops.squeeze(tensors[0]).shape;\n                const mapped = tensors.map(tensor => {\n                    const sameShape = util.arraysEqual(tensor.shape, shape);\n                    if (!sameShape &&\n                        !util.arraysEqual(ops.squeeze(tensor).shape, squeezedShape)) {\n                        throw new Error('the input tensors shape does not match');\n                    }\n                    return sameShape ? tensor : ops.reshape(tensor, shape);\n                });\n                return [ops.stack(mapped, axis)];\n            });\n        }\n        case 'Unpack': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const tensor = getParamValue('tensor', node, tensorMap, context);\n            return ops.unstack(tensor, axis);\n        }\n        case 'Tile': {\n            const reps = getParamValue('reps', node, tensorMap, context);\n            return [ops.tile(getParamValue('x', node, tensorMap, context), reps)];\n        }\n        case 'Split':\n        case 'SplitV': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const numOrSizeSplits = getParamValue('numOrSizeSplits', node, tensorMap, context);\n            const tensor = getParamValue('x', node, tensorMap, context);\n            return ops.split(tensor, numOrSizeSplits, axis);\n        }\n        case 'ScatterNd': {\n            const indices = getParamValue('indices', node, tensorMap, context);\n            const values = getParamValue('values', node, tensorMap, context);\n            const shape = getParamValue('shape', node, tensorMap, context);\n            return [ops.scatterND(indices, values, shape)];\n        }\n        case 'GatherNd': {\n            const x = getParamValue('x', node, tensorMap, context);\n            const indices = getParamValue('indices', node, tensorMap, context);\n            return [ops.gatherND(x, indices)];\n        }\n        case 'SparseToDense': {\n            const indices = getParamValue('sparseIndices', node, tensorMap, context);\n            const shape = getParamValue('outputShape', node, tensorMap, context);\n            const sparseValues = getParamValue('sparseValues', node, tensorMap, context);\n            const defaultValue = getParamValue('defaultValue', node, tensorMap, context);\n            return [ops.sparseToDense(indices, sparseValues, shape, sparseValues.dtype === defaultValue.dtype ?\n                    defaultValue :\n                    ops.cast(defaultValue, sparseValues.dtype))];\n        }\n        case 'TensorScatterUpdate': {\n            const indices = getParamValue('indices', node, tensorMap, context);\n            const values = getParamValue('values', node, tensorMap, context);\n            const tensor = getParamValue('tensor', node, tensorMap, context);\n            return [ops.tensorScatterUpdate(tensor, indices, values)];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'slice_join';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'SparseFillEmptyRows': {\n            const { outputIndices, outputValues, emptyRowIndicator, reverseIndexMap } = ops.sparse.sparseFillEmptyRows(getParamValue('indices', node, tensorMap, context), getParamValue('values', node, tensorMap, context), getParamValue('denseShape', node, tensorMap, context), getParamValue('defaultValue', node, tensorMap, context));\n            return [\n                outputIndices, outputValues, emptyRowIndicator, reverseIndexMap\n            ];\n        }\n        case 'SparseReshape': {\n            const { outputIndices, outputShape } = ops.sparse.sparseReshape(getParamValue('inputIndices', node, tensorMap, context), getParamValue('inputShape', node, tensorMap, context), getParamValue('newShape', node, tensorMap, context));\n            return [outputIndices, outputShape];\n        }\n        case 'SparseSegmentMean': {\n            const outputData = ops.sparse.sparseSegmentMean(getParamValue('data', node, tensorMap, context), getParamValue('indices', node, tensorMap, context), getParamValue('segmentIds', node, tensorMap, context));\n            return [outputData];\n        }\n        case 'SparseSegmentSum': {\n            const outputData = ops.sparse.sparseSegmentSum(getParamValue('data', node, tensorMap, context), getParamValue('indices', node, tensorMap, context), getParamValue('segmentIds', node, tensorMap, context));\n            return [outputData];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'sparse';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BhcnNlX2V4ZWN1dG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1jb252ZXJ0ZXIvc3JjL29wZXJhdGlvbnMvZXhlY3V0b3JzL3NwYXJzZV9leGVjdXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFHSCxpREFBaUQ7QUFDakQsT0FBTyxLQUFLLEtBQUssTUFBTSxrREFBa0QsQ0FBQztBQU0xRSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBRXRDLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FDbEIsQ0FBQyxJQUFVLEVBQUUsU0FBMEIsRUFDdEMsT0FBeUIsRUFBRSxHQUFHLEdBQUcsS0FBSyxFQUFZLEVBQUU7SUFDbkQsUUFBUSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2YsS0FBSyxxQkFBcUIsQ0FBQyxDQUFDO1lBQzFCLE1BQU0sRUFDSixhQUFhLEVBQ2IsWUFBWSxFQUNaLGlCQUFpQixFQUNqQixlQUFlLEVBQ2hCLEdBQ0csR0FBRyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FDMUIsYUFBYSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FDckMsRUFDWixhQUFhLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFhLEVBQzdELGFBQWEsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQ3hDLEVBQ1osYUFBYSxDQUFDLGNBQWMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FDNUMsQ0FBQyxDQUFDO1lBQ3BCLE9BQU87Z0JBQ0wsYUFBYSxFQUFFLFlBQVksRUFBRSxpQkFBaUIsRUFBRSxlQUFlO2FBQ2hFLENBQUM7U0FDSDtRQUNELEtBQUssZUFBZSxDQUFDLENBQUM7WUFDcEIsTUFBTSxFQUFDLGFBQWEsRUFBRSxXQUFXLEVBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FDekQsYUFBYSxDQUFDLGNBQWMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FDMUMsRUFDWixhQUFhLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFhLEVBQ2pFLGFBQWEsQ0FBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQWEsQ0FBQyxDQUFDO1lBQ3JFLE9BQU8sQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUM7U0FDckM7UUFDRCxLQUFLLG1CQUFtQixDQUFDLENBQUM7WUFDeEIsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FDM0MsYUFBYSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUN6RCxhQUFhLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFhLEVBQzlELGFBQWEsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQ3hDLENBQUMsQ0FBQztZQUNsQixPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDckI7UUFDRCxLQUFLLGtCQUFrQixDQUFDLENBQUM7WUFDdkIsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FDMUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUN6RCxhQUFhLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFhLEVBQzlELGFBQWEsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQ3hDLENBQUMsQ0FBQztZQUNsQixPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDckI7UUFDRDtZQUNFLE1BQU0sU0FBUyxDQUFDLGFBQWEsSUFBSSxDQUFDLEVBQUUscUJBQXFCLENBQUMsQ0FBQztLQUM5RDtBQUNILENBQUMsQ0FBQztBQUVOLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7U2NhbGFyLCBUZW5zb3IsIFRlbnNvcjFELCBUZW5zb3IyRH0gZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8taW1wb3J0cy1mcm9tLWRpc3RcbmltcG9ydCAqIGFzIHRmT3BzIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZS9kaXN0L29wcy9vcHNfZm9yX2NvbnZlcnRlcic7XG5cbmltcG9ydCB7TmFtZWRUZW5zb3JzTWFwfSBmcm9tICcuLi8uLi9kYXRhL3R5cGVzJztcbmltcG9ydCB7RXhlY3V0aW9uQ29udGV4dH0gZnJvbSAnLi4vLi4vZXhlY3V0b3IvZXhlY3V0aW9uX2NvbnRleHQnO1xuaW1wb3J0IHtJbnRlcm5hbE9wRXhlY3V0b3IsIE5vZGV9IGZyb20gJy4uL3R5cGVzJztcblxuaW1wb3J0IHtnZXRQYXJhbVZhbHVlfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IGV4ZWN1dGVPcDogSW50ZXJuYWxPcEV4ZWN1dG9yID1cbiAgICAobm9kZTogTm9kZSwgdGVuc29yTWFwOiBOYW1lZFRlbnNvcnNNYXAsXG4gICAgIGNvbnRleHQ6IEV4ZWN1dGlvbkNvbnRleHQsIG9wcyA9IHRmT3BzKTogVGVuc29yW10gPT4ge1xuICAgICAgc3dpdGNoIChub2RlLm9wKSB7XG4gICAgICAgIGNhc2UgJ1NwYXJzZUZpbGxFbXB0eVJvd3MnOiB7XG4gICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgb3V0cHV0SW5kaWNlcyxcbiAgICAgICAgICAgIG91dHB1dFZhbHVlcyxcbiAgICAgICAgICAgIGVtcHR5Um93SW5kaWNhdG9yLFxuICAgICAgICAgICAgcmV2ZXJzZUluZGV4TWFwXG4gICAgICAgICAgfSA9XG4gICAgICAgICAgICAgIG9wcy5zcGFyc2Uuc3BhcnNlRmlsbEVtcHR5Um93cyhcbiAgICAgICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2luZGljZXMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzXG4gICAgICAgICAgICAgICAgICAgICAgVGVuc29yMkQsXG4gICAgICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCd2YWx1ZXMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcjFELFxuICAgICAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnZGVuc2VTaGFwZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXNcbiAgICAgICAgICAgICAgICAgICAgICBUZW5zb3IxRCxcbiAgICAgICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2RlZmF1bHRWYWx1ZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXNcbiAgICAgICAgICAgICAgICAgICAgICBTY2FsYXIpO1xuICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBvdXRwdXRJbmRpY2VzLCBvdXRwdXRWYWx1ZXMsIGVtcHR5Um93SW5kaWNhdG9yLCByZXZlcnNlSW5kZXhNYXBcbiAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ1NwYXJzZVJlc2hhcGUnOiB7XG4gICAgICAgICAgY29uc3Qge291dHB1dEluZGljZXMsIG91dHB1dFNoYXBlfSA9IG9wcy5zcGFyc2Uuc3BhcnNlUmVzaGFwZShcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnaW5wdXRJbmRpY2VzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhc1xuICAgICAgICAgICAgICAgICAgVGVuc29yMkQsXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2lucHV0U2hhcGUnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcjFELFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCduZXdTaGFwZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yMUQpO1xuICAgICAgICAgIHJldHVybiBbb3V0cHV0SW5kaWNlcywgb3V0cHV0U2hhcGVdO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ1NwYXJzZVNlZ21lbnRNZWFuJzoge1xuICAgICAgICAgIGNvbnN0IG91dHB1dERhdGEgPSBvcHMuc3BhcnNlLnNwYXJzZVNlZ21lbnRNZWFuKFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdkYXRhJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IsXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2luZGljZXMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcjFELFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdzZWdtZW50SWRzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhc1xuICAgICAgICAgICAgICAgICAgVGVuc29yMUQpO1xuICAgICAgICAgIHJldHVybiBbb3V0cHV0RGF0YV07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnU3BhcnNlU2VnbWVudFN1bSc6IHtcbiAgICAgICAgICBjb25zdCBvdXRwdXREYXRhID0gb3BzLnNwYXJzZS5zcGFyc2VTZWdtZW50U3VtKFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdkYXRhJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IsXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2luZGljZXMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcjFELFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdzZWdtZW50SWRzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhc1xuICAgICAgICAgICAgICAgICAgVGVuc29yMUQpO1xuICAgICAgICAgIHJldHVybiBbb3V0cHV0RGF0YV07XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoYE5vZGUgdHlwZSAke25vZGUub3B9IGlzIG5vdCBpbXBsZW1lbnRlZGApO1xuICAgICAgfVxuICAgIH07XG5cbmV4cG9ydCBjb25zdCBDQVRFR09SWSA9ICdzcGFyc2UnO1xuIl19","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'FFT': {\n            return [ops.fft(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'IFFT': {\n            return [ops.ifft(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'RFFT': {\n            return [ops.rfft(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'IRFFT': {\n            return [ops.irfft(getParamValue('x', node, tensorMap, context))];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'spectral';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlY3RyYWxfZXhlY3V0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvbnZlcnRlci9zcmMvb3BlcmF0aW9ucy9leGVjdXRvcnMvc3BlY3RyYWxfZXhlY3V0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBR0gsaURBQWlEO0FBQ2pELE9BQU8sS0FBSyxLQUFLLE1BQU0sa0RBQWtELENBQUM7QUFNMUUsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUV0QyxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQ2xCLENBQUMsSUFBVSxFQUFFLFNBQTBCLEVBQUUsT0FBeUIsRUFDakUsR0FBRyxHQUFHLEtBQUssRUFBWSxFQUFFO0lBQ3BCLFFBQVEsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNmLEtBQUssS0FBSyxDQUFDLENBQUM7WUFDVixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FDWCxhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUMsQ0FBQyxDQUFDO1NBQzlEO1FBQ0QsS0FBSyxNQUFNLENBQUMsQ0FBQztZQUNYLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUNaLGFBQWEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQyxDQUFDLENBQUM7U0FDOUQ7UUFDRCxLQUFLLE1BQU0sQ0FBQyxDQUFDO1lBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQ1osYUFBYSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDLENBQUMsQ0FBQztTQUM5RDtRQUNELEtBQUssT0FBTyxDQUFDLENBQUM7WUFDWixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FDYixhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUMsQ0FBQyxDQUFDO1NBQzlEO1FBQ0Q7WUFDRSxNQUFNLFNBQVMsQ0FBQyxhQUFhLElBQUksQ0FBQyxFQUFFLHFCQUFxQixDQUFDLENBQUM7S0FDOUQ7QUFDSCxDQUFDLENBQUM7QUFFVixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge1RlbnNvcn0gZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8taW1wb3J0cy1mcm9tLWRpc3RcbmltcG9ydCAqIGFzIHRmT3BzIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZS9kaXN0L29wcy9vcHNfZm9yX2NvbnZlcnRlcic7XG5cbmltcG9ydCB7TmFtZWRUZW5zb3JzTWFwfSBmcm9tICcuLi8uLi9kYXRhL3R5cGVzJztcbmltcG9ydCB7RXhlY3V0aW9uQ29udGV4dH0gZnJvbSAnLi4vLi4vZXhlY3V0b3IvZXhlY3V0aW9uX2NvbnRleHQnO1xuaW1wb3J0IHtJbnRlcm5hbE9wRXhlY3V0b3IsIE5vZGV9IGZyb20gJy4uL3R5cGVzJztcblxuaW1wb3J0IHtnZXRQYXJhbVZhbHVlfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IGV4ZWN1dGVPcDogSW50ZXJuYWxPcEV4ZWN1dG9yID1cbiAgICAobm9kZTogTm9kZSwgdGVuc29yTWFwOiBOYW1lZFRlbnNvcnNNYXAsIGNvbnRleHQ6IEV4ZWN1dGlvbkNvbnRleHQsXG4gICAgIG9wcyA9IHRmT3BzKTogVGVuc29yW10gPT4ge1xuICAgICAgICAgIHN3aXRjaCAobm9kZS5vcCkge1xuICAgICAgICAgICAgY2FzZSAnRkZUJzoge1xuICAgICAgICAgICAgICByZXR1cm4gW29wcy5mZnQoXG4gICAgICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCd4Jywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ0lGRlQnOiB7XG4gICAgICAgICAgICAgIHJldHVybiBbb3BzLmlmZnQoXG4gICAgICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCd4Jywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ1JGRlQnOiB7XG4gICAgICAgICAgICAgIHJldHVybiBbb3BzLnJmZnQoXG4gICAgICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCd4Jywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ0lSRkZUJzoge1xuICAgICAgICAgICAgICByZXR1cm4gW29wcy5pcmZmdChcbiAgICAgICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3gnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcildO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKGBOb2RlIHR5cGUgJHtub2RlLm9wfSBpcyBub3QgaW1wbGVtZW50ZWRgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbmV4cG9ydCBjb25zdCBDQVRFR09SWSA9ICdzcGVjdHJhbCc7XG4iXX0=","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'StaticRegexReplace': {\n            return [ops.string.staticRegexReplace(getParamValue('input', node, tensorMap, context), getParamValue('pattern', node, tensorMap, context), getParamValue('rewrite', node, tensorMap, context), getParamValue('replaceGlobal', node, tensorMap, context))];\n        }\n        case 'StringNGrams': {\n            const { nGrams, nGramsSplits } = ops.string.stringNGrams(getParamValue('data', node, tensorMap, context), getParamValue('dataSplits', node, tensorMap, context), getParamValue('separator', node, tensorMap, context), getParamValue('nGramWidths', node, tensorMap, context), getParamValue('leftPad', node, tensorMap, context), getParamValue('rightPad', node, tensorMap, context), getParamValue('padWidth', node, tensorMap, context), getParamValue('preserveShortSequences', node, tensorMap, context));\n            return [nGrams, nGramsSplits];\n        }\n        case 'StringSplit': {\n            const { indices, values, shape } = ops.string.stringSplit(getParamValue('input', node, tensorMap, context), getParamValue('delimiter', node, tensorMap, context), getParamValue('skipEmpty', node, tensorMap, context));\n            return [indices, values, shape];\n        }\n        case 'StringToHashBucketFast': {\n            const output = ops.string.stringToHashBucketFast(getParamValue('input', node, tensorMap, context), getParamValue('numBuckets', node, tensorMap, context));\n            return [output];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'string';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nX2V4ZWN1dG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1jb252ZXJ0ZXIvc3JjL29wZXJhdGlvbnMvZXhlY3V0b3JzL3N0cmluZ19leGVjdXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFHSCxpREFBaUQ7QUFDakQsT0FBTyxLQUFLLEtBQUssTUFBTSxrREFBa0QsQ0FBQztBQU0xRSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBRXRDLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FDbEIsQ0FBQyxJQUFVLEVBQUUsU0FBMEIsRUFDdEMsT0FBeUIsRUFBRSxHQUFHLEdBQUcsS0FBSyxFQUFZLEVBQUU7SUFDbkQsUUFBUSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2YsS0FBSyxvQkFBb0IsQ0FBQyxDQUFDO1lBQ3pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUNuQyxhQUFhLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLEVBQzFELGFBQWEsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDNUQsYUFBYSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUM1RCxhQUFhLENBQUMsZUFBZSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFZLENBQ3BFLENBQUMsQ0FBQztTQUNKO1FBQ0QsS0FBSyxjQUFjLENBQUMsQ0FBQztZQUNuQixNQUFNLEVBQUMsTUFBTSxFQUFFLFlBQVksRUFBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUNsRCxhQUFhLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFhLEVBQzNELGFBQWEsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDL0QsYUFBYSxDQUFDLFdBQVcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUM5RCxhQUFhLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUN6QyxFQUNaLGFBQWEsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDNUQsYUFBYSxDQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUM3RCxhQUFhLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLEVBQzdELGFBQWEsQ0FDVCx3QkFBd0IsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FDM0MsQ0FBQyxDQUFDO1lBQ2pCLE9BQU8sQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUM7U0FDL0I7UUFDRCxLQUFLLGFBQWEsQ0FBQyxDQUFDO1lBQ2xCLE1BQU0sRUFBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUNuRCxhQUFhLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFhLEVBQzVELGFBQWEsQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDOUQsYUFBYSxDQUFDLFdBQVcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBWSxDQUFDLENBQUM7WUFDckUsT0FBTyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDakM7UUFDRCxLQUFLLHdCQUF3QixDQUFDLENBQUM7WUFDN0IsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FDNUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUMxRCxhQUFhLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUMsQ0FBQztZQUNyRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDakI7UUFDRDtZQUNFLE1BQU0sU0FBUyxDQUFDLGFBQWEsSUFBSSxDQUFDLEVBQUUscUJBQXFCLENBQUMsQ0FBQztLQUM5RDtBQUNILENBQUMsQ0FBQztBQUVOLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7U2NhbGFyLCBUZW5zb3IsIFRlbnNvcjFEfSBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1pbXBvcnRzLWZyb20tZGlzdFxuaW1wb3J0ICogYXMgdGZPcHMgZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlL2Rpc3Qvb3BzL29wc19mb3JfY29udmVydGVyJztcblxuaW1wb3J0IHtOYW1lZFRlbnNvcnNNYXB9IGZyb20gJy4uLy4uL2RhdGEvdHlwZXMnO1xuaW1wb3J0IHtFeGVjdXRpb25Db250ZXh0fSBmcm9tICcuLi8uLi9leGVjdXRvci9leGVjdXRpb25fY29udGV4dCc7XG5pbXBvcnQge0ludGVybmFsT3BFeGVjdXRvciwgTm9kZX0gZnJvbSAnLi4vdHlwZXMnO1xuXG5pbXBvcnQge2dldFBhcmFtVmFsdWV9IGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgY29uc3QgZXhlY3V0ZU9wOiBJbnRlcm5hbE9wRXhlY3V0b3IgPVxuICAgIChub2RlOiBOb2RlLCB0ZW5zb3JNYXA6IE5hbWVkVGVuc29yc01hcCxcbiAgICAgY29udGV4dDogRXhlY3V0aW9uQ29udGV4dCwgb3BzID0gdGZPcHMpOiBUZW5zb3JbXSA9PiB7XG4gICAgICBzd2l0Y2ggKG5vZGUub3ApIHtcbiAgICAgICAgY2FzZSAnU3RhdGljUmVnZXhSZXBsYWNlJzoge1xuICAgICAgICAgIHJldHVybiBbb3BzLnN0cmluZy5zdGF0aWNSZWdleFJlcGxhY2UoXG4gICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdpbnB1dCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgncGF0dGVybicsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgc3RyaW5nLFxuICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgncmV3cml0ZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgc3RyaW5nLFxuICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgncmVwbGFjZUdsb2JhbCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgYm9vbGVhbixcbiAgICAgICAgICApXTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdTdHJpbmdOR3JhbXMnOiB7XG4gICAgICAgICAgY29uc3Qge25HcmFtcywgbkdyYW1zU3BsaXRzfSA9IG9wcy5zdHJpbmcuc3RyaW5nTkdyYW1zKFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdkYXRhJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IxRCxcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnZGF0YVNwbGl0cycsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdzZXBhcmF0b3InLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIHN0cmluZyxcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnbkdyYW1XaWR0aHMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzXG4gICAgICAgICAgICAgICAgICBudW1iZXJbXSxcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnbGVmdFBhZCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgc3RyaW5nLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdyaWdodFBhZCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgc3RyaW5nLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdwYWRXaWR0aCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgbnVtYmVyLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKFxuICAgICAgICAgICAgICAgICAgJ3ByZXNlcnZlU2hvcnRTZXF1ZW5jZXMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzXG4gICAgICAgICAgICAgICAgICBib29sZWFuKTtcbiAgICAgICAgICByZXR1cm4gW25HcmFtcywgbkdyYW1zU3BsaXRzXTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdTdHJpbmdTcGxpdCc6IHtcbiAgICAgICAgICBjb25zdCB7aW5kaWNlcywgdmFsdWVzLCBzaGFwZX0gPSBvcHMuc3RyaW5nLnN0cmluZ1NwbGl0KFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdpbnB1dCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yMUQsXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2RlbGltaXRlcicsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgU2NhbGFyLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdza2lwRW1wdHknLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIGJvb2xlYW4pO1xuICAgICAgICAgIHJldHVybiBbaW5kaWNlcywgdmFsdWVzLCBzaGFwZV07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnU3RyaW5nVG9IYXNoQnVja2V0RmFzdCc6IHtcbiAgICAgICAgICBjb25zdCBvdXRwdXQgPSBvcHMuc3RyaW5nLnN0cmluZ1RvSGFzaEJ1Y2tldEZhc3QoXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2lucHV0Jywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IsXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ251bUJ1Y2tldHMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIG51bWJlcik7XG4gICAgICAgICAgcmV0dXJuIFtvdXRwdXRdO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgVHlwZUVycm9yKGBOb2RlIHR5cGUgJHtub2RlLm9wfSBpcyBub3QgaW1wbGVtZW50ZWRgKTtcbiAgICAgIH1cbiAgICB9O1xuXG5leHBvcnQgY29uc3QgQ0FURUdPUlkgPSAnc3RyaW5nJztcbiJdfQ==","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'Cast': {\n            return [ops.cast(getParamValue('x', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n        }\n        case 'ExpandDims': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            return [ops.expandDims(getParamValue('x', node, tensorMap, context), axis)];\n        }\n        case 'Squeeze': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            return [ops.squeeze(getParamValue('x', node, tensorMap, context), axis)];\n        }\n        case 'Reshape': {\n            return [ops.reshape(getParamValue('x', node, tensorMap, context), getParamValue('shape', node, tensorMap, context))];\n        }\n        case 'EnsureShape': {\n            return [ops.ensureShape(getParamValue('x', node, tensorMap, context), getParamValue('shape', node, tensorMap, context))];\n        }\n        case 'MirrorPad': {\n            return [ops.mirrorPad(getParamValue('x', node, tensorMap, context), getParamValue('padding', node, tensorMap, context), getParamValue('mode', node, tensorMap, context))];\n        }\n        case 'PadV2':\n        case 'Pad': {\n            return [ops.pad(getParamValue('x', node, tensorMap, context), getParamValue('padding', node, tensorMap, context), getParamValue('constantValue', node, tensorMap, context))];\n        }\n        case 'SpaceToBatchND': {\n            const blockShape = getParamValue('blockShape', node, tensorMap, context);\n            const paddings = getParamValue('paddings', node, tensorMap, context);\n            return [ops.spaceToBatchND(getParamValue('x', node, tensorMap, context), blockShape, paddings)];\n        }\n        case 'BatchToSpaceND': {\n            const blockShape = getParamValue('blockShape', node, tensorMap, context);\n            const crops = getParamValue('crops', node, tensorMap, context);\n            return [ops.batchToSpaceND(getParamValue('x', node, tensorMap, context), blockShape, crops)];\n        }\n        case 'DepthToSpace': {\n            const blockSize = getParamValue('blockSize', node, tensorMap, context);\n            const dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n            return [ops.depthToSpace(getParamValue('x', node, tensorMap, context), blockSize, dataFormat)];\n        }\n        case 'BroadcastTo': {\n            return [ops.broadcastTo(getParamValue('x', node, tensorMap, context), getParamValue('shape', node, tensorMap, context))];\n        }\n        case 'BroadcastArgs': {\n            return [ops.broadcastArgs(getParamValue('s0', node, tensorMap, context), getParamValue('s1', node, tensorMap, context))];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'transformation';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { NodeValueImpl } from './custom_op/node_value_impl';\nimport { getRegisteredOp } from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as hashTable from './executors/hash_table_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as ragged from './executors/ragged_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as sparse from './executors/sparse_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as string from './executors/string_executor';\nimport * as transformation from './executors/transformation_executor';\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function executeOp(node, tensorMap, context, resourceManager, tidy = tfc.tidy) {\n    const value = ((node, tensorMap, context) => {\n        switch (node.category) {\n            case 'arithmetic':\n                return tidy(() => arithmetic.executeOp(node, tensorMap, context));\n            case 'basic_math':\n                return tidy(() => basicMath.executeOp(node, tensorMap, context));\n            case 'control':\n                return control.executeOp(node, tensorMap, context);\n            case 'convolution':\n                return tidy(() => convolution.executeOp(node, tensorMap, context));\n            case 'creation':\n                return tidy(() => creation.executeOp(node, tensorMap, context));\n            case 'dynamic':\n                return dynamic.executeOp(node, tensorMap, context);\n            case 'evaluation':\n                return tidy(() => evaluation.executeOp(node, tensorMap, context));\n            case 'image':\n                return tidy(() => image.executeOp(node, tensorMap, context));\n            case 'graph':\n                return tidy(() => graph.executeOp(node, tensorMap, context));\n            case 'logical':\n                return tidy(() => logical.executeOp(node, tensorMap, context));\n            case 'matrices':\n                return tidy(() => matrices.executeOp(node, tensorMap, context));\n            case 'normalization':\n                return tidy(() => normalization.executeOp(node, tensorMap, context));\n            case 'ragged':\n                return tidy(() => ragged.executeOp(node, tensorMap, context));\n            case 'reduction':\n                return tidy(() => reduction.executeOp(node, tensorMap, context));\n            case 'slice_join':\n                return tidy(() => sliceJoin.executeOp(node, tensorMap, context));\n            case 'sparse':\n                return tidy(() => sparse.executeOp(node, tensorMap, context));\n            case 'spectral':\n                return tidy(() => spectral.executeOp(node, tensorMap, context));\n            case 'string':\n                return tidy(() => string.executeOp(node, tensorMap, context));\n            case 'transformation':\n                return tidy(() => transformation.executeOp(node, tensorMap, context));\n            case 'hash_table':\n                return hashTable.executeOp(node, tensorMap, context, resourceManager);\n            case 'custom':\n                const opMapper = getRegisteredOp(node.op);\n                if (opMapper && opMapper.customExecutor) {\n                    return opMapper.customExecutor(new NodeValueImpl(node, tensorMap, context));\n                }\n                else {\n                    throw TypeError(`Custom op ${node.op} is not registered.`);\n                }\n            default:\n                throw TypeError(`Unknown op '${node.op}'. File an issue at ` +\n                    `https://github.com/tensorflow/tfjs/issues so we can add it` +\n                    `, or register a custom execution with tf.registerOp()`);\n        }\n    })(node, tensorMap, context);\n    if (tfc.util.isPromise(value)) {\n        return value.then((data) => [].concat(data));\n    }\n    return [].concat(value);\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * ExecutionContext captures the runtime environment of the node. It keeps\n * track of the current frame and iteration for the control flow ops.\n *\n * For example, typical Dynamic RNN model may contain loops, for which\n * TensorFlow will generate graphs with Enter/Exit nodes to control the\n * current execution frame, and NextIteration Nodes for iteration id increment.\n * For model with branch logic, TensorFLow will generate Switch/Merge ops.\n */\nexport class ExecutionContext {\n    constructor(weightMap = {}, tensorArrayMap = {}, tensorListMap = {}, functionMap = {}, parseNodeNameCache) {\n        this.weightMap = weightMap;\n        this.tensorArrayMap = tensorArrayMap;\n        this.tensorListMap = tensorListMap;\n        this.functionMap = functionMap;\n        this.parseNodeNameCache = parseNodeNameCache;\n        this.rootContext = { id: 0, frameName: '', iterationId: 0 };\n        this.contexts = [this.rootContext];\n        this.lastId = 0;\n        this.generateCurrentContextIds();\n    }\n    newFrame(id, frameName) {\n        return { id, frameName, iterationId: 0 };\n    }\n    /**\n     * Set the current context\n     * @param contexts: ExecutionContextInfo[] the current path of execution\n     * frames\n     */\n    set currentContext(contexts) {\n        if (this.contexts !== contexts) {\n            this.contexts = contexts;\n            this.generateCurrentContextIds();\n        }\n    }\n    get currentContext() {\n        return this.contexts;\n    }\n    /**\n     * Returns the current context in string format.\n     */\n    get currentContextId() {\n        return this._currentContextIds[0];\n    }\n    /**\n     * Returns the current context and all parent contexts in string format.\n     * This allow access to the nodes in the current and parent frames.\n     */\n    get currentContextIds() {\n        return this._currentContextIds;\n    }\n    generateCurrentContextIds() {\n        const names = [];\n        for (let i = 0; i < this.contexts.length - 1; i++) {\n            const contexts = this.contexts.slice(0, this.contexts.length - i);\n            names.push(this.contextIdforContexts(contexts));\n        }\n        names.push('');\n        this._currentContextIds = names;\n    }\n    contextIdforContexts(contexts) {\n        return contexts ?\n            contexts\n                .map(context => (context.id === 0 && context.iterationId === 0) ?\n                '' :\n                `${context.frameName}-${context.iterationId}`)\n                .join('/') :\n            '';\n    }\n    /**\n     * Enter a new frame, a new context is pushed on the current context list.\n     * @param frameId new frame id\n     */\n    enterFrame(frameId) {\n        if (this.contexts) {\n            this.lastId++;\n            this.contexts = this.contexts.slice();\n            this.contexts.push(this.newFrame(this.lastId, frameId));\n            this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));\n        }\n    }\n    /**\n     * Exit the current frame, the last context is removed from the current\n     * context list.\n     */\n    exitFrame() {\n        if (this.contexts && this.contexts.length > 1) {\n            this.contexts = this.contexts.slice();\n            this.contexts.splice(-1);\n            this.currentContextIds.shift();\n        }\n        else {\n            throw new Error('Cannot exit frame, the context is empty');\n        }\n    }\n    /**\n     * Enter the next iteration of a loop, the iteration id of last context is\n     * increased.\n     */\n    nextIteration() {\n        if (this.contexts && this.contexts.length > 0) {\n            this.contexts = this.contexts.slice();\n            this.lastId++;\n            const context = Object.assign({}, this.contexts[this.contexts.length - 1]);\n            context.iterationId += 1;\n            context.id = this.lastId;\n            this.contexts.splice(-1, 1, context);\n            this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));\n        }\n        else {\n            throw new Error('Cannot increase frame iteration, the context is empty');\n        }\n    }\n    getWeight(name) {\n        return this.weightMap[name];\n    }\n    addTensorArray(tensorArray) {\n        this.tensorArrayMap[tensorArray.id] = tensorArray;\n    }\n    getTensorArray(id) {\n        return this.tensorArrayMap[id];\n    }\n    addTensorList(tensorList) {\n        this.tensorListMap[tensorList.id] = tensorList;\n    }\n    getTensorList(id) {\n        return this.tensorListMap[id];\n    }\n    dispose(keepIds) {\n        for (const key in this.tensorArrayMap) {\n            this.tensorArrayMap[key].clearAndClose(keepIds);\n        }\n        for (const key in this.tensorListMap) {\n            this.tensorListMap[key].clearAndClose(keepIds);\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { parseNodeName } from '../operations/executors/utils';\n/**\n * Given graph inputs and desired outputs, find the minimal set of nodes\n * to execute in order to compute the outputs. In addition return other useful\n * info such:\n * - Missing inputs needed to compute the output.\n * - Whether the subgraph contains dynamic ops (control flow, dynamic shape).\n * - Alternative inputs in order to avoid async (dynamic op) execution.\n */\nexport function getExecutionSubgraph(inputs, outputs, weightMap, initNodes) {\n    const usedNodes = new Set();\n    const missingInputs = [];\n    let dynamicNode = null;\n    let syncInputs = null;\n    // Start with the outputs, going backwards and find all the nodes that are\n    // needed to compute those outputs.\n    const seen = new Set();\n    const inputNodeNames = new Set(Object.keys(inputs).map((name) => parseNodeName(name)[0]));\n    initNodes = initNodes || [];\n    const initNodeNames = new Set(initNodes.map((node) => parseNodeName(node.name)[0]));\n    const frontier = [...outputs];\n    while (frontier.length > 0) {\n        const node = frontier.pop();\n        if (isControlFlow(node) || isDynamicShape(node) || isHashTable(node)) {\n            if (dynamicNode == null) {\n                dynamicNode = node;\n                syncInputs = dynamicNode.children.map(child => child.name)\n                    .filter(name => usedNodes.has(name));\n            }\n        }\n        usedNodes.add(node.name);\n        // Weights are dead end since we already have their values.\n        if (weightMap[node.name] != null) {\n            continue;\n        }\n        // This node is a dead end since it's one of the user-provided inputs.\n        if (inputNodeNames.has(node.name)) {\n            continue;\n        }\n        // This node is a dead end since it doesn't have any inputs.\n        if (initNodeNames.has(node.name)) {\n            continue;\n        }\n        if (node.inputs.length === 0) {\n            missingInputs.push(node.name);\n            continue;\n        }\n        node.inputs.forEach(input => {\n            // Don't add to the frontier if it is already there.\n            if (seen.has(input.name)) {\n                return;\n            }\n            seen.add(input.name);\n            frontier.push(input);\n        });\n    }\n    return { inputs, outputs, usedNodes, missingInputs, dynamicNode, syncInputs };\n}\n/**\n * Given the execution info, return a list of nodes in topological order that\n * need to be executed to compute the output.\n */\nexport function getNodesInTopologicalOrder(graph, executionInfo) {\n    const { usedNodes, inputs } = executionInfo;\n    const inputNodes = Object.keys(inputs)\n        .map(name => parseNodeName(name)[0])\n        .map(name => graph.nodes[name]);\n    const initNodes = graph.initNodes || [];\n    const isUsed = (node) => usedNodes.has(typeof node === 'string' ? node : node.name);\n    function unique(nodes) {\n        return [...new Map(nodes.map((node) => [node.name, node])).values()];\n    }\n    const predefinedNodes = unique([\n        ...inputNodes,\n        ...graph.weights,\n        ...initNodes,\n    ]).filter(isUsed);\n    const allNodes = unique([\n        ...predefinedNodes,\n        ...Object.values(graph.nodes),\n    ]).filter(isUsed);\n    const nameToNode = new Map(allNodes.map((node) => [node.name, node]));\n    const inCounts = {};\n    for (const node of allNodes) {\n        inCounts[node.name] = inCounts[node.name] || 0;\n        for (const child of node.children) {\n            // When the child is unused, set in counts to infinity so that it will\n            // never be decreased to 0 and added to the execution list.\n            if (!isUsed(child)) {\n                inCounts[child.name] = Number.POSITIVE_INFINITY;\n            }\n            inCounts[child.name] = (inCounts[child.name] || 0) + 1;\n        }\n    }\n    // Build execution order for all used nodes regardless whether they are\n    // predefined or not.\n    const frontier = Object.entries(inCounts)\n        .filter(([, inCount]) => inCount === 0)\n        .map(([name]) => name);\n    const orderedNodeNames = [...frontier];\n    while (frontier.length > 0) {\n        const nodeName = frontier.pop();\n        const node = nameToNode.get(nodeName);\n        for (const child of node.children.filter(isUsed)) {\n            if (--inCounts[child.name] === 0) {\n                orderedNodeNames.push(child.name);\n                frontier.push(child.name);\n            }\n        }\n    }\n    const orderedNodes = orderedNodeNames.map((name) => nameToNode.get(name));\n    const filteredOrderedNodes = filterPredefinedReachableNodes(orderedNodes, predefinedNodes);\n    // TODO: Turn validation on/off with tf env flag.\n    validateNodesExecutionOrder(filteredOrderedNodes, predefinedNodes);\n    return filteredOrderedNodes;\n}\n/**\n * This is a helper function of `getNodesInTopologicalOrder`.\n * Returns ordered nodes reachable by at least one predefined node.\n * This can help us filter out redundant nodes from the returned node list.\n * For example:\n * If we have four nodes with dependencies like this:\n *   a --> b --> c --> d\n * when node `c` is predefined (e.g. given as an input tensor), we can\n * skip node `a` and `b` since their outputs will never be used.\n *\n * @param orderedNodes Graph nodes in execution order.\n * @param predefinedNodes Graph inputs, weights, and init nodes. Nodes in this\n *     list must have distinct names.\n */\nfunction filterPredefinedReachableNodes(orderedNodes, predefinedNodes) {\n    const nameToNode = new Map(orderedNodes.map((node) => [node.name, node]));\n    // TODO: Filter out more nodes when >=2 nodes are predefined in a path.\n    const stack = predefinedNodes.map((node) => node.name);\n    const predefinedReachableNodeNames = new Set(stack);\n    // Perform a DFS starting from the set of all predefined nodes\n    // to find the set of all nodes reachable from the predefined nodes.\n    while (stack.length > 0) {\n        const nodeName = stack.pop();\n        const node = nameToNode.get(nodeName);\n        for (const child of node.children) {\n            if (!nameToNode.has(child.name) ||\n                predefinedReachableNodeNames.has(child.name)) {\n                continue;\n            }\n            predefinedReachableNodeNames.add(child.name);\n            stack.push(child.name);\n        }\n    }\n    // Filter out unreachable nodes and build the ordered node list.\n    const filteredOrderedNodes = orderedNodes.filter((node) => predefinedReachableNodeNames.has(node.name));\n    return filteredOrderedNodes;\n}\nclass NodesExecutionOrderError extends Error {\n    constructor(message) {\n        super(`NodesExecutionOrderError: ${message}`);\n    }\n}\n/**\n * This is a helper function of `getNodesInTopologicalOrder`.\n * Validates property: given nodes `a` and `b`, Order(a) > Order(b) if `a`\n * is a child of `b`. This function throws an error if validation fails.\n *\n * @param orderedNodes Graph nodes in execution order.\n * @param predefinedNodes Graph inputs, weights, and init nodes. Nodes in this\n *     list must have distinct names.\n */\nfunction validateNodesExecutionOrder(orderedNodes, predefinedNodes) {\n    const nodeNameToOrder = new Map(orderedNodes.map((node, order) => [node.name, order]));\n    const predefinedNodeNames = new Set(predefinedNodes.map((node) => node.name));\n    const isPredefined = (node) => predefinedNodeNames.has(typeof node === 'string' ? node : node.name);\n    const willBeExecutedNodeNames = new Set(orderedNodes.map((node) => node.name));\n    const willBeExecuted = (node) => willBeExecutedNodeNames.has(typeof node === 'string' ? node : node.name);\n    for (const node of orderedNodes) {\n        for (const child of node.children.filter(willBeExecuted)) {\n            if (!nodeNameToOrder.has(child.name)) {\n                throw new NodesExecutionOrderError(`Child ${child.name} of node ${node.name} is unreachable.`);\n            }\n            if (nodeNameToOrder.get(node.name) > nodeNameToOrder.get(child.name)) {\n                throw new NodesExecutionOrderError(`Node ${node.name} is scheduled to run after its child ${child.name}.`);\n            }\n        }\n        if (!isPredefined(node)) {\n            for (const input of node.inputs) {\n                if (!nodeNameToOrder.has(input.name)) {\n                    throw new NodesExecutionOrderError(`Input ${input.name} of node ${node.name} is unreachable.`);\n                }\n                if (nodeNameToOrder.get(input.name) > nodeNameToOrder.get(node.name)) {\n                    throw new NodesExecutionOrderError(`Node ${node.name} is scheduled to run before its input ${input.name}.`);\n                }\n            }\n        }\n    }\n}\n/**\n * Given the execution info, return a map from node name to the disposable\n * node name list after its execution.\n *\n * @returns A map from node name to disposable nodes after its\n *     execution. That is, for a node `x`, `nodeLiveUntilMap[x]` indicates\n *     all nodes which their intermediate tensors should be disposed after `x`\n *     being executed.\n */\nexport function getNodeLiveUntilMap(orderedNodes) {\n    const nodeNameToOrder = new Map(orderedNodes.map((node, order) => [node.name, order]));\n    const INF_LIFE = Number.MAX_SAFE_INTEGER;\n    // Make control flow nodes (and consequently their direct parents)\n    // live forever since they're tricky to track correctly.\n    const selfLifespans = orderedNodes.map((node, nodeOrder) => isControlFlow(node) ? INF_LIFE : nodeOrder);\n    const getSelfLifeSpan = (node) => {\n        const selfLife = selfLifespans[nodeNameToOrder.get(node.name)];\n        if (selfLife == null) {\n            // If nodeToOrder does not contain the node, it is unused or\n            // unreachable in graph.\n            return -1;\n        }\n        return selfLife;\n    };\n    // `liveUntil[i]` points to the last node in the `orderedNodes` array that\n    // may depend on tensors from node `i`. It indicates that all the\n    // intermediate tensors from `orderedNodes[i]` should be disposed after\n    // `orderedNodes[liveUntil[i]]` is executed.\n    // A node lives long enough to pass on its tensors to its children.\n    // It lives until at least `max(node's position, children's positions)`.\n    const liveUntilOrders = orderedNodes.map((node, nodeOrder) => {\n        return node.children.map(getSelfLifeSpan)\n            .reduce((a, b) => Math.max(a, b), selfLifespans[nodeOrder]);\n    });\n    // liveUntilMap:\n    // - Key: Name of a node `x`\n    // - Values: All nodes whose intermediate tensors should be disposed\n    //           after `x` is executed.\n    const liveUntilMap = new Map();\n    for (let nodeOrder = 0; nodeOrder < orderedNodes.length; ++nodeOrder) {\n        const liveUntilOrder = liveUntilOrders[nodeOrder];\n        if (liveUntilOrder === INF_LIFE) {\n            continue;\n        }\n        const node = orderedNodes[nodeOrder];\n        const liveUntilNode = orderedNodes[liveUntilOrder];\n        if (!liveUntilMap.has(liveUntilNode.name)) {\n            liveUntilMap.set(liveUntilNode.name, []);\n        }\n        liveUntilMap.get(liveUntilNode.name).push(node);\n    }\n    return liveUntilMap;\n}\nconst CONTROL_FLOW_OPS = new Set([\n    'Switch', 'Merge', 'Enter', 'Exit', 'NextIteration', 'StatelessIf',\n    'StatelessWhile', 'if', 'While'\n]);\nconst DYNAMIC_SHAPE_OPS = new Set([\n    'NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'NonMaxSuppressionV5', 'Where'\n]);\nconst HASH_TABLE_OPS = new Set([\n    'HashTable', 'HashTableV2', 'LookupTableImport', 'LookupTableImportV2',\n    'LookupTableFind', 'LookupTableFindV2', 'LookupTableSize', 'LookupTableSizeV2'\n]);\nexport function isControlFlow(node) {\n    return CONTROL_FLOW_OPS.has(node.op);\n}\nexport function isDynamicShape(node) {\n    return DYNAMIC_SHAPE_OPS.has(node.op);\n}\nexport function isHashTable(node) {\n    return HASH_TABLE_OPS.has(node.op);\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, keep, tidy, util } from '@tensorflow/tfjs-core';\nimport { getNodeNameAndIndex, getParamValue, getTensor, getTensorsForCurrentContext, parseNodeName } from '../operations/executors/utils';\nimport { executeOp } from '../operations/operation_executor';\nimport { ExecutionContext } from './execution_context';\nimport { getExecutionSubgraph, getNodeLiveUntilMap, getNodesInTopologicalOrder, isControlFlow } from './model_analysis';\nexport class GraphExecutor {\n    get weightIds() {\n        return this.parent ? this.parent.weightIds : this._weightIds;\n    }\n    get functionExecutorMap() {\n        return this.parent ? this.parent.functionExecutorMap :\n            this._functionExecutorMap;\n    }\n    get weightMap() {\n        return this.parent ? this.parent.weightMap : this._weightMap;\n    }\n    set weightMap(weightMap) {\n        const weightIds = Object.keys(weightMap).map(key => weightMap[key].map(tensor => tensor.id));\n        this._weightIds = [].concat(...weightIds);\n        this._weightMap = weightMap;\n    }\n    /**\n     * Set `ResourceManager` shared by executors of a model.\n     * @param resourceManager: `ResourceManager` of the `GraphModel`.\n     */\n    set resourceManager(resourceManager) {\n        this._resourceManager = resourceManager;\n    }\n    get inputs() {\n        return this._inputs.map(node => {\n            return {\n                name: node.name,\n                shape: node.attrParams['shape'] ?\n                    node.attrParams['shape'].value :\n                    undefined,\n                dtype: node.attrParams['dtype'] ?\n                    node.attrParams['dtype'].value :\n                    undefined\n            };\n        });\n    }\n    get outputs() {\n        return this._outputs.map(node => {\n            return {\n                name: node.name,\n                shape: node.attrParams['shape'] ?\n                    node.attrParams['shape'].value :\n                    undefined,\n                dtype: node.attrParams['dtype'] ?\n                    node.attrParams['dtype'].value :\n                    undefined\n            };\n        });\n    }\n    get inputNodes() {\n        return this._inputs.map(node => node.signatureKey || node.name);\n    }\n    get outputNodes() {\n        return this._outputs.map((node) => {\n            const name = node.signatureKey || node.name;\n            return node.defaultOutput ? (`${name}:${node.defaultOutput}`) : name;\n        });\n    }\n    get functions() {\n        return Object.keys(this._functions).reduce((map, key) => {\n            map[key] = this._functions[key].signature;\n            return map;\n        }, {});\n    }\n    /**\n     *\n     * @param graph Graph the model or function graph to be executed.\n     * @param parent When building function exector you need to set the parent\n     * executor. Since the weights and function executor maps are set at parant\n     * level, that function executor can access the function maps and weight maps\n     * through the parent.\n     */\n    constructor(graph, parent) {\n        this.graph = graph;\n        this.parent = parent;\n        this.compiledMap = new Map();\n        this.parseNodeNameCache = new Map();\n        this._weightMap = {};\n        this.SEPARATOR = ',';\n        this._functions = {};\n        this._functionExecutorMap = {};\n        this.keepIntermediateTensors = false;\n        this._outputs = graph.outputs;\n        this._inputs = graph.inputs;\n        this._initNodes = graph.initNodes;\n        this._signature = graph.signature;\n        this._functions = graph.functions;\n        // create sub-graph executors\n        if (graph.functions != null) {\n            Object.keys(graph.functions).forEach(name => {\n                this._functionExecutorMap[name] =\n                    new GraphExecutor(graph.functions[name], this);\n            });\n        }\n    }\n    getCompilationKey(inputs, outputs) {\n        const sortedInputs = inputs.map(node => node.name).sort();\n        const sortedOutputs = outputs.map(node => node.name).sort();\n        return sortedInputs.join(this.SEPARATOR) + '--' +\n            sortedOutputs.join(this.SEPARATOR);\n    }\n    /**\n     * Compiles the inference graph and returns the minimal set of nodes that are\n     * required for execution, in the correct execution order.\n     * @returns {Object} compilation The compile result.\n     * @returns {Node[]} compilation.orderedNodes Nodes in the correct execution\n     *     order.\n     * @returns {Map<string, Node[]>} compilation.nodeLiveUntilMap A map from node\n     *     to disposable nodes after its execution. That is, for a node `x`,\n     *     `nodeLiveUntilMap[x]` indicates all nodes whose intermediate\n     *     tensors should be disposed after `x` is executed.\n     */\n    compile(inputs, outputs) {\n        const executionInfo = getExecutionSubgraph(inputs, outputs, this.weightMap, this._initNodes);\n        const { missingInputs, dynamicNode, syncInputs } = executionInfo;\n        if (dynamicNode != null) {\n            throw new Error(`This execution contains the node '${dynamicNode.name}', which has ` +\n                `the dynamic op '${dynamicNode.op}'. Please use ` +\n                `model.executeAsync() instead. Alternatively, to avoid the ` +\n                `dynamic ops, specify the inputs [${syncInputs}]`);\n        }\n        if (missingInputs.length > 0) {\n            const outNames = outputs.map(n => n.name);\n            const inNames = Object.keys(inputs);\n            throw new Error(`Cannot compute the outputs [${outNames}] from the provided inputs ` +\n                `[${inNames}]. Missing the following inputs: [${missingInputs}]`);\n        }\n        const orderedNodes = getNodesInTopologicalOrder(this.graph, executionInfo);\n        const nodeLiveUntilMap = getNodeLiveUntilMap(orderedNodes);\n        return { orderedNodes, nodeLiveUntilMap };\n    }\n    cloneAndKeepTensor(tensor) {\n        if (tensor == null) {\n            return null;\n        }\n        const clone = tensor.clone();\n        // Keep the clone because`model.execute()` may be called within\n        // a `tidy()`, but the user may inspect these tensors after the\n        // tidy.\n        keep(clone);\n        return clone;\n    }\n    cloneTensorList(tensors) {\n        if (!tensors) {\n            return null;\n        }\n        const clonedTensor = tensors.map(tensor => {\n            return this.cloneAndKeepTensor(tensor);\n        });\n        return clonedTensor;\n    }\n    cloneTensorMap(tensorsMap) {\n        return Object.fromEntries(Object.entries(tensorsMap).map(([name, tensorsList]) => {\n            return [name, this.cloneTensorList(tensorsList)];\n        }));\n    }\n    /**\n     * Executes the inference for given input tensors.\n     * @param inputs Tensor map for the model inputs, keyed by the input node\n     * names.\n     * @param outputs Optional. output node name from the Tensorflow model, if\n     * no outputs are specified, the default outputs of the model would be used.\n     * You can inspect intermediate nodes of the model by adding them to the\n     * outputs array.\n     */\n    execute(inputs, outputs) {\n        // Dispose any tensors from a prior run to avoid leaking them.\n        this.disposeIntermediateTensors();\n        inputs = this.mapInputs(inputs);\n        const names = Object.keys(inputs).sort();\n        this.checkInputs(inputs);\n        this.checkInputShapeAndType(inputs);\n        outputs = this.mapOutputs(outputs);\n        this.checkOutputs(outputs);\n        const inputNodes = names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n        const outputNodeNames = outputs.map(name => parseNodeName(name)[0]);\n        const outputNodeNameSet = new Set(outputNodeNames);\n        let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n        // If no outputs are specified, then use the default outputs of the model.\n        if (outputNodes.length === 0) {\n            outputNodes = this._outputs;\n        }\n        const compilationKey = this.getCompilationKey(inputNodes, outputNodes);\n        // Do nothing if the compiled graph cache contains the input.\n        let compilation = this.compiledMap.get(compilationKey);\n        if (compilation == null) {\n            compilation = this.compile(inputs, outputNodes);\n            this.compiledMap.set(compilationKey, compilation);\n        }\n        // Keep tensors if KEEP_INTERMEDIATE_TENSORS is on.\n        try {\n            this.keepIntermediateTensors = env().getBool('KEEP_INTERMEDIATE_TENSORS');\n        }\n        catch (e) {\n            this.keepIntermediateTensors = false;\n            console.warn(e.message);\n        }\n        const tensorArrayMap = {};\n        const tensorListMap = {};\n        return tidy(() => {\n            const context = new ExecutionContext(this.weightMap, tensorArrayMap, tensorListMap, this.functionExecutorMap, this.parseNodeNameCache);\n            const tensorsMap = Object.assign({}, this.weightMap);\n            if (this.keepIntermediateTensors) {\n                this.clonedTensorsMap = this.cloneTensorMap(this.weightMap);\n            }\n            Object.keys(inputs).forEach(name => {\n                const [nodeName, index] = parseNodeName(name, context);\n                const tensors = [];\n                tensors[index] = inputs[name];\n                tensorsMap[nodeName] = tensors;\n                if (this.keepIntermediateTensors) {\n                    this.clonedTensorsMap[nodeName] = this.cloneTensorList(tensors);\n                }\n            });\n            const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n            const { orderedNodes, nodeLiveUntilMap } = compilation;\n            for (const node of orderedNodes) {\n                if (tensorsMap[node.name]) {\n                    continue;\n                }\n                const tensors = executeOp(node, tensorsMap, context, this._resourceManager);\n                if (util.isPromise(tensors)) {\n                    throw new Error(`The execution of the op '${node.op}' returned a promise. ` +\n                        `Please use model.executeAsync() instead.`);\n                }\n                tensorsMap[node.name] = tensors;\n                if (this.keepIntermediateTensors) {\n                    this.clonedTensorsMap[node.name] = this.cloneTensorList(tensors);\n                }\n                this.checkTensorForDisposalWithNodeLiveUntilInfo(node, tensorsMap, context, tensorsToKeep, outputNodeNameSet, nodeLiveUntilMap.get(node.name));\n            }\n            // dispose the context for the root executor\n            if (this.parent == null) {\n                context.dispose(tensorsToKeep);\n            }\n            return outputs.map(name => getTensor(name, tensorsMap, context));\n        });\n    }\n    getFrozenTensorIds(tensorMap) {\n        const ids = [].concat.apply([], Object.keys(tensorMap)\n            .map(key => tensorMap[key])\n            .map(tensors => tensors.map(tensor => tensor.id)));\n        return new Set(ids);\n    }\n    checkTensorForDisposal(nodeName, node, tensorMap, context, tensorsToKeep, outputNodeNameSet, intermediateTensorConsumerCount) {\n        // Skip output nodes and any control flow nodes, since its dependency is\n        // tricky to track correctly.\n        if (isControlFlow(node) || outputNodeNameSet.has(nodeName)) {\n            return;\n        }\n        for (const tensor of tensorMap[nodeName]) {\n            if (tensor == null) {\n                continue;\n            }\n            intermediateTensorConsumerCount[tensor.id] =\n                (intermediateTensorConsumerCount[tensor.id] || 0) +\n                    node.children.length;\n        }\n        for (const input of node.inputs) {\n            // Skip any control flow nodes, since its dependency is tricky to track\n            // correctly.\n            if (isControlFlow(input)) {\n                continue;\n            }\n            const tensors = getTensorsForCurrentContext(input.name, tensorMap, context);\n            if (tensors == null) {\n                continue;\n            }\n            for (const tensor of tensors) {\n                if (!tensor || tensor.kept || tensorsToKeep.has(tensor.id)) {\n                    continue;\n                }\n                // Only intermediate nodes' tensors have counts set, not marked as\n                // kept, and not in `tensorsToKeep`.\n                // Input and weight nodes' tensors should exist in `tensorsToKeep`.\n                // Output and control flow nodes' tensors should never have count set.\n                const count = intermediateTensorConsumerCount[tensor.id];\n                if (count === 1) {\n                    tensor.dispose();\n                    delete intermediateTensorConsumerCount[tensor.id];\n                }\n                else if (count != null) {\n                    intermediateTensorConsumerCount[tensor.id]--;\n                }\n            }\n        }\n    }\n    checkTensorForDisposalWithNodeLiveUntilInfo(node, tensorMap, context, tensorsToKeep, outputNodeNameSet, liveUntilNodes) {\n        function isNonDisposableNode(node) {\n            // Skip output nodes and any control flow nodes, since its dependency is\n            // tricky to track correctly.\n            return isControlFlow(node) || outputNodeNameSet.has(node.name);\n        }\n        if (isControlFlow(node) || liveUntilNodes == null) {\n            return;\n        }\n        for (const nodeToDispose of liveUntilNodes) {\n            if (isNonDisposableNode(nodeToDispose)) {\n                continue;\n            }\n            const tensors = getTensorsForCurrentContext(nodeToDispose.name, tensorMap, context);\n            for (const tensor of tensors) {\n                if (!tensor || tensor.kept || tensorsToKeep.has(tensor.id)) {\n                    continue;\n                }\n                tensor.dispose();\n            }\n        }\n    }\n    /**\n     * Executes the inference for given input tensors in Async fashion.\n     * @param inputs Tensor map for the model inputs, keyed by the input node\n     * names.\n     * @param outputs output node name from the Tensorflow model, if no outputs\n     * are specified, the default outputs of the model would be used. You can\n     * inspect intermediate nodes of the model by adding them to the outputs\n     * array.\n     */\n    async executeAsync(inputs, outputs) {\n        return this._executeAsync(inputs, outputs);\n    }\n    disposeIntermediateTensors() {\n        if (!this.clonedTensorsMap) {\n            return;\n        }\n        Object.values(this.clonedTensorsMap).forEach(tensorsList => {\n            for (const tensor of tensorsList) {\n                if (tensor && !tensor.isDisposed) {\n                    tensor.dispose();\n                }\n            }\n        });\n        this.clonedTensorsMap = null;\n    }\n    getIntermediateTensors() {\n        return this.clonedTensorsMap;\n    }\n    /**\n     * Executes the inference for given input tensors in Async fashion.\n     * @param inputs Tensor map for the model inputs, keyed by the input node\n     * names.\n     * @param outputs Optional. output node name from the Tensorflow model,\n     * if no outputs are specified, the default outputs of the model would be\n     * used. You can inspect intermediate nodes of the model by adding them to\n     * the outputs array.\n     * @param isFunctionExecution Optional. Flag for executing a function.\n     * @param tensorArrayMap Optional, global TensorArray map by id. Used for\n     * function execution.\n     * @param tensorArrayMap Optional global TensorList map by id. Used for\n     * function execution.\n     */\n    async _executeAsync(inputs, outputs, isFunctionExecution = false, tensorArrayMap = {}, tensorListMap = {}) {\n        // Dispose any tensors from a prior run to avoid leaking them.\n        this.disposeIntermediateTensors();\n        if (!isFunctionExecution) {\n            inputs = this.mapInputs(inputs);\n            this.checkInputs(inputs);\n            this.checkInputShapeAndType(inputs);\n            outputs = this.mapOutputs(outputs);\n            this.checkOutputs(outputs);\n        }\n        // Keep tensors if KEEP_INTERMEDIATE_TENSORS is on.\n        try {\n            this.keepIntermediateTensors = env().getBool('KEEP_INTERMEDIATE_TENSORS');\n        }\n        catch (e) {\n            this.keepIntermediateTensors = false;\n            console.warn(e.message);\n        }\n        const context = new ExecutionContext(this.weightMap, tensorArrayMap, tensorListMap, this.functionExecutorMap, this.parseNodeNameCache);\n        if (this.keepIntermediateTensors) {\n            this.clonedTensorsMap = this.cloneTensorMap(this.weightMap);\n        }\n        // Graph with control flow op requires runtime evaluation of the execution\n        // order, while without control flow the execution order is pre-determined\n        // in the compile method.\n        const tensorsMap = await this.executeWithControlFlow(inputs, context, outputs, isFunctionExecution);\n        const results = outputs.map(name => getTensor(name, tensorsMap, context));\n        // dispose all the intermediate tensors\n        const outputIds = results.map(t => t.id);\n        const inputIds = Object.keys(inputs).map(name => inputs[name].id);\n        const keepIds = new Set([...outputIds, ...inputIds, ...this.weightIds]);\n        Object.values(tensorsMap).forEach(tensorsList => {\n            tensorsList.forEach(tensor => {\n                if (tensor && !tensor.isDisposed && !keepIds.has(tensor.id)) {\n                    tensor.dispose();\n                }\n            });\n        });\n        // dispose the context for the root executor\n        if (this.parent == null) {\n            context.dispose(keepIds);\n        }\n        return results;\n    }\n    async executeFunctionAsync(inputs, tensorArrayMap, tensorListMap) {\n        const mappedInputs = inputs.reduce((map, tensor, index) => {\n            map[this.inputs[index].name] = tensor;\n            return map;\n        }, {});\n        return this._executeAsync(mappedInputs, this.outputNodes, true, tensorArrayMap, tensorListMap);\n    }\n    /**\n     * When there are control flow nodes in the graph, the graph execution use\n     * ExecutionContext to keep track of the frames and loop iterators.\n     * @param inputs placeholder tensors for the graph.\n     * @param context the execution context object for current execution.\n     * @param outputNames Optional. output node name from the Tensorflow model,\n     * if no outputs are specified, the default outputs of the model would be\n     * used. You can inspect intermediate nodes of the model by adding them to\n     * the outputs array.\n     * @param isFunctionExecution Flag for executing a function.\n     */\n    async executeWithControlFlow(inputs, context, outputNames, isFunctionExecution) {\n        const names = Object.keys(inputs);\n        const inputNodes = names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n        const outputNodeNames = outputNames.map(name => parseNodeName(name)[0]);\n        const outputNodeNameSet = new Set(outputNodeNames);\n        let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n        // If no outputs are specified, then use the default outputs of the model.\n        if (outputNodes.length === 0) {\n            outputNodes = this._outputs;\n        }\n        const { usedNodes, missingInputs, dynamicNode, syncInputs } = getExecutionSubgraph(inputs, outputNodes, this.weightMap, this._initNodes);\n        // First nodes to execute include inputNodes, weights, and initNodes.\n        const stack = [\n            ...inputNodes, ...this.graph.weights, ...(this._initNodes || [])\n        ].map(node => {\n            return { node, contexts: context.currentContext };\n        });\n        const tensorsMap = Object.assign({}, this.weightMap);\n        Object.keys(inputs).forEach(name => {\n            const [nodeName, index] = parseNodeName(name);\n            const tensors = [];\n            tensors[index] = inputs[name];\n            tensorsMap[nodeName] = tensors;\n        });\n        const intermediateTensorConsumerCount = {};\n        const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n        const added = {};\n        while (stack.length > 0) {\n            const promises = this.processStack(inputNodes, stack, context, tensorsMap, added, tensorsToKeep, outputNodeNameSet, intermediateTensorConsumerCount, usedNodes);\n            await Promise.all(promises);\n        }\n        if (dynamicNode == null && !isFunctionExecution) {\n            console.warn(`This model execution did not contain any nodes with control flow ` +\n                `or dynamic output shapes. You can use model.execute() instead.`);\n        }\n        const missingOutputs = outputNodes\n            .filter(node => !isControlFlow(node) &&\n            !getTensor(node.name, tensorsMap, context))\n            .map(node => node.name);\n        if (missingOutputs.length > 0) {\n            let alternativeMsg = '';\n            if (dynamicNode != null) {\n                alternativeMsg =\n                    `Alternatively, to avoid the dynamic ops, use model.execute() ` +\n                        `and specify the inputs [${syncInputs}]`;\n            }\n            throw new Error(`Cannot compute the outputs [${missingOutputs}] from the provided ` +\n                `inputs [${names}]. Consider providing the following inputs: ` +\n                `[${missingInputs}]. ${alternativeMsg}`);\n        }\n        return tensorsMap;\n    }\n    processStack(inputNodes, stack, context, tensorMap, added, tensorsToKeep, outputNodeNameSet, intermediateTensorConsumerCount, usedNodes) {\n        const promises = [];\n        while (stack.length > 0) {\n            const item = stack.pop();\n            context.currentContext = item.contexts;\n            let nodeName = '';\n            // The tensor of the Enter op with isConstant set should be set\n            // in the parent scope, so it will be available as constant for the\n            // whole loop.\n            if (item.node.op === 'Enter' &&\n                getParamValue('isConstant', item.node, tensorMap, context)) {\n                [nodeName] = getNodeNameAndIndex(item.node.name, context);\n            }\n            // only process nodes that are not in the tensorMap yet, this include\n            // inputNodes and internal initNodes.\n            if (tensorMap[item.node.name] == null) {\n                const tensors = executeOp(item.node, tensorMap, context, this._resourceManager);\n                if (!nodeName) {\n                    [nodeName] = getNodeNameAndIndex(item.node.name, context);\n                }\n                const currentContext = context.currentContext;\n                if (util.isPromise(tensors)) {\n                    promises.push(tensors.then(t => {\n                        tensorMap[nodeName] = t;\n                        if (this.keepIntermediateTensors) {\n                            this.clonedTensorsMap[nodeName] = this.cloneTensorList(t);\n                        }\n                        context.currentContext = currentContext;\n                        this.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNodeNameSet, intermediateTensorConsumerCount);\n                        this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);\n                        return t;\n                    }));\n                }\n                else {\n                    tensorMap[nodeName] = tensors;\n                    if (this.keepIntermediateTensors) {\n                        this.clonedTensorsMap[nodeName] = this.cloneTensorList(tensors);\n                    }\n                    this.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNodeNameSet, intermediateTensorConsumerCount);\n                    this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);\n                }\n            }\n            else {\n                this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);\n            }\n        }\n        return promises;\n    }\n    processChildNodes(node, stack, context, tensorMap, added, usedNodes) {\n        node.children.forEach((childNode) => {\n            const [nodeName,] = getNodeNameAndIndex(childNode.name, context);\n            if (added[nodeName] || !usedNodes.has(childNode.name)) {\n                return;\n            }\n            // Merge op can be pushed if any of its inputs has value.\n            if (childNode.op === 'Merge') {\n                if (childNode.inputNames.some(name => {\n                    return !!getTensor(name, tensorMap, context);\n                })) {\n                    added[nodeName] = true;\n                    stack.push({ contexts: context.currentContext, node: childNode });\n                }\n            }\n            else // Otherwise all inputs must to have value.\n             if (childNode.inputNames.every(name => {\n                return !!getTensor(name, tensorMap, context);\n            })) {\n                added[nodeName] = true;\n                stack.push({ contexts: context.currentContext, node: childNode });\n            }\n        });\n    }\n    /**\n     * Releases the memory used by the weight tensors.\n     */\n    dispose() {\n        Object.keys(this.weightMap)\n            .forEach(key => this.weightMap[key].forEach(tensor => tensor.dispose()));\n    }\n    checkInputShapeAndType(inputs) {\n        Object.keys(inputs).forEach(name => {\n            const input = inputs[name];\n            const [nodeName,] = parseNodeName(name);\n            const node = this.graph.nodes[nodeName];\n            if (node.attrParams['shape'] && node.attrParams['shape'].value) {\n                const shape = node.attrParams['shape'].value;\n                const match = shape.length === input.shape.length &&\n                    input.shape.every((dim, index) => shape[index] === -1 || shape[index] === dim);\n                util.assert(match, () => `The shape of dict['${node.name}'] provided in ` +\n                    `model.execute(dict) must be [${shape}], but was ` +\n                    `[${input.shape}]`);\n            }\n            if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {\n                util.assert(input.dtype === node.attrParams['dtype'].value, () => `The dtype of dict['${node.name}'] provided in ` +\n                    `model.execute(dict) must be ` +\n                    `${node.attrParams['dtype'].value}, but was ${input.dtype}`);\n            }\n        });\n    }\n    mapInputs(inputs) {\n        var _a, _b;\n        const result = {};\n        for (const inputName in inputs) {\n            const tensor = (_b = (_a = this._signature) === null || _a === void 0 ? void 0 : _a.inputs) === null || _b === void 0 ? void 0 : _b[inputName];\n            if (tensor != null) {\n                result[tensor.name] = inputs[inputName];\n            }\n            else {\n                result[inputName] = inputs[inputName];\n            }\n        }\n        return result;\n    }\n    checkInputs(inputs) {\n        const notInGraph = Object.keys(inputs).filter(name => {\n            const [nodeName] = parseNodeName(name);\n            return this.graph.nodes[nodeName] == null;\n        });\n        if (notInGraph.length > 0) {\n            throw new Error(`The dict provided in model.execute(dict) has ` +\n                `keys: [${notInGraph}] that are not part of graph`);\n        }\n    }\n    mapOutputs(outputs) {\n        return outputs.map(name => {\n            var _a, _b;\n            const tensor = (_b = (_a = this._signature) === null || _a === void 0 ? void 0 : _a.outputs) === null || _b === void 0 ? void 0 : _b[name];\n            if (tensor != null) {\n                return tensor.name;\n            }\n            return name;\n        }, {});\n    }\n    checkOutputs(outputs) {\n        outputs.forEach(name => {\n            const [normalizedName] = parseNodeName(name);\n            if (!this.graph.nodes[normalizedName]) {\n                throw new Error(`The output '${name}' is not found in the graph`);\n            }\n        });\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * Contains global resources of a model.\n */\nexport class ResourceManager {\n    constructor(hashTableNameToHandle = {}, hashTableMap = {}) {\n        this.hashTableNameToHandle = hashTableNameToHandle;\n        this.hashTableMap = hashTableMap;\n    }\n    /**\n     * Register a `HashTable` in the resource manager.\n     *\n     * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,\n     * where id is the table handle tensor's id.\n     *\n     * @param name Op node name that creates the `HashTable`.\n     * @param hashTable The `HashTable` to be added to resource manager.\n     */\n    addHashTable(name, hashTable) {\n        this.hashTableNameToHandle[name] = hashTable.handle;\n        this.hashTableMap[hashTable.id] = hashTable;\n    }\n    /**\n     * Get the table handle by node name.\n     * @param name Op node name that creates the `HashTable`. This name is also\n     *     used in the inputs list of lookup and import `HashTable` ops.\n     */\n    getHashTableHandleByName(name) {\n        return this.hashTableNameToHandle[name];\n    }\n    /**\n     * Get the actual `HashTable` by its handle tensor's id.\n     * @param id The id of the handle tensor.\n     */\n    getHashTableById(id) {\n        return this.hashTableMap[id];\n    }\n    /**\n     * Dispose `ResourceManager`, including its hashTables and tensors in them.\n     */\n    dispose() {\n        for (const key in this.hashTableMap) {\n            this.hashTableMap[key].clearAndClose();\n            delete this.hashTableMap[key];\n        }\n        for (const name in this.hashTableNameToHandle) {\n            this.hashTableNameToHandle[name].dispose();\n            delete this.hashTableNameToHandle[name];\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2VfbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29udmVydGVyL3NyYy9leGVjdXRvci9yZXNvdXJjZV9tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW1CQTs7R0FFRztBQUNILE1BQU0sT0FBTyxlQUFlO0lBQzFCLFlBQ2Esd0JBQXdDLEVBQUUsRUFDMUMsZUFBNkIsRUFBRTtRQUQvQiwwQkFBcUIsR0FBckIscUJBQXFCLENBQXFCO1FBQzFDLGlCQUFZLEdBQVosWUFBWSxDQUFtQjtJQUFHLENBQUM7SUFFaEQ7Ozs7Ozs7O09BUUc7SUFDSCxZQUFZLENBQUMsSUFBWSxFQUFFLFNBQW9CO1FBQzdDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDO1FBQ3BELElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQztJQUM5QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILHdCQUF3QixDQUFDLElBQVk7UUFDbkMsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVEOzs7T0FHRztJQUNILGdCQUFnQixDQUFDLEVBQVU7UUFDekIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRDs7T0FFRztJQUNILE9BQU87UUFDTCxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDbkMsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUN2QyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDL0I7UUFFRCxLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxxQkFBcUIsRUFBRTtZQUM3QyxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDM0MsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDekM7SUFDSCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5pbXBvcnQge0hhc2hUYWJsZU1hcCwgTmFtZWRUZW5zb3JNYXB9IGZyb20gJy4uL2RhdGEvdHlwZXMnO1xuaW1wb3J0IHtIYXNoVGFibGV9IGZyb20gJy4vaGFzaF90YWJsZSc7XG5cbi8qKlxuICogQ29udGFpbnMgZ2xvYmFsIHJlc291cmNlcyBvZiBhIG1vZGVsLlxuICovXG5leHBvcnQgY2xhc3MgUmVzb3VyY2VNYW5hZ2VyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgICByZWFkb25seSBoYXNoVGFibGVOYW1lVG9IYW5kbGU6IE5hbWVkVGVuc29yTWFwID0ge30sXG4gICAgICByZWFkb25seSBoYXNoVGFibGVNYXA6IEhhc2hUYWJsZU1hcCA9IHt9KSB7fVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIGBIYXNoVGFibGVgIGluIHRoZSByZXNvdXJjZSBtYW5hZ2VyLlxuICAgKlxuICAgKiBUaGUgYEhhc2hUYWJsZWAgY2FuIGJlIHJldHJpZXZlZCBieSBgcmVzb3VyY2VNYW5hZ2VyLmdldEhhc2hUYWJsZUJ5SWRgLFxuICAgKiB3aGVyZSBpZCBpcyB0aGUgdGFibGUgaGFuZGxlIHRlbnNvcidzIGlkLlxuICAgKlxuICAgKiBAcGFyYW0gbmFtZSBPcCBub2RlIG5hbWUgdGhhdCBjcmVhdGVzIHRoZSBgSGFzaFRhYmxlYC5cbiAgICogQHBhcmFtIGhhc2hUYWJsZSBUaGUgYEhhc2hUYWJsZWAgdG8gYmUgYWRkZWQgdG8gcmVzb3VyY2UgbWFuYWdlci5cbiAgICovXG4gIGFkZEhhc2hUYWJsZShuYW1lOiBzdHJpbmcsIGhhc2hUYWJsZTogSGFzaFRhYmxlKSB7XG4gICAgdGhpcy5oYXNoVGFibGVOYW1lVG9IYW5kbGVbbmFtZV0gPSBoYXNoVGFibGUuaGFuZGxlO1xuICAgIHRoaXMuaGFzaFRhYmxlTWFwW2hhc2hUYWJsZS5pZF0gPSBoYXNoVGFibGU7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSB0YWJsZSBoYW5kbGUgYnkgbm9kZSBuYW1lLlxuICAgKiBAcGFyYW0gbmFtZSBPcCBub2RlIG5hbWUgdGhhdCBjcmVhdGVzIHRoZSBgSGFzaFRhYmxlYC4gVGhpcyBuYW1lIGlzIGFsc29cbiAgICogICAgIHVzZWQgaW4gdGhlIGlucHV0cyBsaXN0IG9mIGxvb2t1cCBhbmQgaW1wb3J0IGBIYXNoVGFibGVgIG9wcy5cbiAgICovXG4gIGdldEhhc2hUYWJsZUhhbmRsZUJ5TmFtZShuYW1lOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5oYXNoVGFibGVOYW1lVG9IYW5kbGVbbmFtZV07XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBhY3R1YWwgYEhhc2hUYWJsZWAgYnkgaXRzIGhhbmRsZSB0ZW5zb3IncyBpZC5cbiAgICogQHBhcmFtIGlkIFRoZSBpZCBvZiB0aGUgaGFuZGxlIHRlbnNvci5cbiAgICovXG4gIGdldEhhc2hUYWJsZUJ5SWQoaWQ6IG51bWJlcik6IEhhc2hUYWJsZSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzaFRhYmxlTWFwW2lkXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwb3NlIGBSZXNvdXJjZU1hbmFnZXJgLCBpbmNsdWRpbmcgaXRzIGhhc2hUYWJsZXMgYW5kIHRlbnNvcnMgaW4gdGhlbS5cbiAgICovXG4gIGRpc3Bvc2UoKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5oYXNoVGFibGVNYXApIHtcbiAgICAgIHRoaXMuaGFzaFRhYmxlTWFwW2tleV0uY2xlYXJBbmRDbG9zZSgpO1xuICAgICAgZGVsZXRlIHRoaXMuaGFzaFRhYmxlTWFwW2tleV07XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBuYW1lIGluIHRoaXMuaGFzaFRhYmxlTmFtZVRvSGFuZGxlKSB7XG4gICAgICB0aGlzLmhhc2hUYWJsZU5hbWVUb0hhbmRsZVtuYW1lXS5kaXNwb3NlKCk7XG4gICAgICBkZWxldGUgdGhpcy5oYXNoVGFibGVOYW1lVG9IYW5kbGVbbmFtZV07XG4gICAgfVxuICB9XG59XG4iXX0=","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { dispose, io, Tensor, util } from '@tensorflow/tfjs-core';\nimport { OperationMapper } from '../operations/operation_mapper';\nimport { GraphExecutor } from './graph_executor';\nimport { ResourceManager } from './resource_manager';\n// tslint:disable-next-line: no-imports-from-dist\nimport { decodeWeightsStream } from '@tensorflow/tfjs-core/dist/io/io_utils';\nexport const TFHUB_SEARCH_PARAM = '?tfjs-format=file';\nexport const DEFAULT_MODEL_NAME = 'model.json';\n/**\n * A `tf.GraphModel` is a directed, acyclic graph built from a\n * SavedModel GraphDef and allows inference execution.\n *\n * A `tf.GraphModel` can only be created by loading from a model converted from\n * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using\n * the command line converter tool and loaded via `tf.loadGraphModel`.\n *\n * @doc {heading: 'Models', subheading: 'Classes'}\n */\nexport class GraphModel {\n    // Returns the version information for the tensorflow model GraphDef.\n    get modelVersion() {\n        return this.version;\n    }\n    get inputNodes() {\n        return this.executor.inputNodes;\n    }\n    get outputNodes() {\n        return this.executor.outputNodes;\n    }\n    get inputs() {\n        return this.executor.inputs;\n    }\n    get outputs() {\n        return this.executor.outputs;\n    }\n    get weights() {\n        return this.executor.weightMap;\n    }\n    get metadata() {\n        return this.artifacts.userDefinedMetadata;\n    }\n    get modelSignature() {\n        return this.signature;\n    }\n    get modelStructuredOutputKeys() {\n        return this.structuredOutputKeys;\n    }\n    /**\n     * @param modelUrl url for the model, or an `io.IOHandler`.\n     * @param weightManifestUrl url for the weight file generated by\n     * scripts/convert.py script.\n     * @param requestOption options for Request, which allows to send credentials\n     * and custom headers.\n     * @param onProgress Optional, progress callback function, fired periodically\n     * before the load is completed.\n     */\n    constructor(modelUrl, loadOptions = {}, tfio = io) {\n        this.modelUrl = modelUrl;\n        this.loadOptions = loadOptions;\n        this.version = 'n/a';\n        this.io = tfio;\n        if (loadOptions == null) {\n            this.loadOptions = {};\n        }\n        this.resourceManager = new ResourceManager();\n    }\n    findIOHandler() {\n        const path = this.modelUrl;\n        if (path.load != null) {\n            // Path is an IO Handler.\n            this.handler = path;\n        }\n        else if (this.loadOptions.requestInit != null) {\n            this.handler = this.io.browserHTTPRequest(path, this.loadOptions);\n        }\n        else {\n            const handlers = this.io.getLoadHandlers(path, this.loadOptions);\n            if (handlers.length === 0) {\n                // For backward compatibility: if no load handler can be found,\n                // assume it is a relative http path.\n                handlers.push(this.io.browserHTTPRequest(path, this.loadOptions));\n            }\n            else if (handlers.length > 1) {\n                throw new Error(`Found more than one (${handlers.length}) load handlers for ` +\n                    `URL '${[path]}'`);\n            }\n            this.handler = handlers[0];\n        }\n    }\n    /**\n     * Loads the model and weight files, construct the in memory weight map and\n     * compile the inference graph.\n     */\n    load() {\n        this.findIOHandler();\n        if (this.handler.load == null) {\n            throw new Error('Cannot proceed with model loading because the IOHandler provided ' +\n                'does not have the `load` method implemented.');\n        }\n        const loadResult = this.handler.load();\n        if (util.isPromise(loadResult)) {\n            return loadResult.then(artifacts => {\n                if (artifacts.getWeightStream == null) {\n                    return this.loadSync(artifacts);\n                }\n                return this.loadStreaming(artifacts);\n            });\n        }\n        return this.loadSync(loadResult);\n    }\n    /**\n     * Synchronously construct the in memory weight map and\n     * compile the inference graph.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n     */\n    loadSync(artifacts) {\n        const weightMap = this.io.decodeWeights(artifacts.weightData, artifacts.weightSpecs);\n        return this.loadWithWeightMap(artifacts, weightMap);\n    }\n    async loadStreaming(artifacts) {\n        if (artifacts.getWeightStream == null) {\n            throw new Error('Model artifacts missing streamWeights function');\n        }\n        const weightMap = await decodeWeightsStream(artifacts.getWeightStream(), artifacts.weightSpecs);\n        return this.loadWithWeightMap(artifacts, weightMap);\n    }\n    loadWithWeightMap(artifacts, weightMap) {\n        this.artifacts = artifacts;\n        const graph = this.artifacts.modelTopology;\n        let signature = this.artifacts.signature;\n        if (this.artifacts.userDefinedMetadata != null) {\n            const metadata = this.artifacts.userDefinedMetadata;\n            if (metadata.signature != null) {\n                signature = metadata.signature;\n            }\n            if (metadata.structuredOutputKeys != null) {\n                this.structuredOutputKeys = metadata.structuredOutputKeys;\n            }\n        }\n        this.signature = signature;\n        this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;\n        this.executor = new GraphExecutor(OperationMapper.Instance.transformGraph(graph, this.signature));\n        this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);\n        // Attach a model-level resourceManager to each executor to share resources,\n        // such as `HashTable`.\n        this.executor.resourceManager = this.resourceManager;\n        if (artifacts.modelInitializer != null &&\n            artifacts.modelInitializer.node != null) {\n            const initializer = OperationMapper.Instance.transformGraph(artifacts.modelInitializer);\n            this.initializer = new GraphExecutor(initializer);\n            this.initializer.weightMap = this.executor.weightMap;\n            // Attach a model-level resourceManager to the initializer, the\n            // hashTables created from when executing the initializer will be stored\n            // in the resourceManager.\n            this.initializer.resourceManager = this.resourceManager;\n            this.initializerSignature = artifacts.initializerSignature;\n        }\n        return true;\n    }\n    /**\n     * Save the configuration and/or weights of the GraphModel.\n     *\n     * An `IOHandler` is an object that has a `save` method of the proper\n     * signature defined. The `save` method manages the storing or\n     * transmission of serialized data (\"artifacts\") that represent the\n     * model's topology and weights onto or via a specific medium, such as\n     * file downloads, local storage, IndexedDB in the web browser and HTTP\n     * requests to a server. TensorFlow.js provides `IOHandler`\n     * implementations for a number of frequently used saving mediums, such as\n     * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n     * for more details.\n     *\n     * This method also allows you to refer to certain types of `IOHandler`s\n     * as URL-like string shortcuts, such as 'localstorage://' and\n     * 'indexeddb://'.\n     *\n     * Example 1: Save `model`'s topology and weights to browser [local\n     * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n     * then load it back.\n     *\n     * ```js\n     * const modelUrl =\n     *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n     * const model = await tf.loadGraphModel(modelUrl);\n     * const zeros = tf.zeros([1, 224, 224, 3]);\n     * model.predict(zeros).print();\n     *\n     * const saveResults = await model.save('localstorage://my-model-1');\n     *\n     * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');\n     * console.log('Prediction from loaded model:');\n     * model.predict(zeros).print();\n     * ```\n     *\n     * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n     * scheme-based string shortcut for `IOHandler`.\n     * @param config Options for saving the model.\n     * @returns A `Promise` of `SaveResult`, which summarizes the result of\n     * the saving, such as byte sizes of the saved artifacts for the model's\n     *   topology and weight values.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n     */\n    async save(handlerOrURL, config) {\n        if (typeof handlerOrURL === 'string') {\n            const handlers = this.io.getSaveHandlers(handlerOrURL);\n            if (handlers.length === 0) {\n                throw new Error(`Cannot find any save handlers for URL '${handlerOrURL}'`);\n            }\n            else if (handlers.length > 1) {\n                throw new Error(`Found more than one (${handlers.length}) save handlers for ` +\n                    `URL '${handlerOrURL}'`);\n            }\n            handlerOrURL = handlers[0];\n        }\n        if (handlerOrURL.save == null) {\n            throw new Error('GraphModel.save() cannot proceed because the IOHandler ' +\n                'provided does not have the `save` attribute defined.');\n        }\n        return handlerOrURL.save(this.artifacts);\n    }\n    addStructuredOutputNames(outputTensors) {\n        if (this.structuredOutputKeys) {\n            const outputTensorsArray = outputTensors instanceof Tensor ? [outputTensors] : outputTensors;\n            const outputTensorMap = {};\n            outputTensorsArray.forEach((outputTensor, i) => outputTensorMap[this.structuredOutputKeys[i]] =\n                outputTensor);\n            return outputTensorMap;\n        }\n        return outputTensors;\n    }\n    /**\n     * Execute the inference for the input tensors.\n     *\n     * @param input The input tensors, when there is single input for the model,\n     * inputs param should be a `tf.Tensor`. For models with multiple inputs,\n     * inputs params should be in either `tf.Tensor`[] if the input order is\n     * fixed, or otherwise NamedTensorMap format.\n     *\n     * For model with multiple inputs, we recommend you use NamedTensorMap as the\n     * input type, if you use `tf.Tensor`[], the order of the array needs to\n     * follow the\n     * order of inputNodes array. @see {@link GraphModel.inputNodes}\n     *\n     * You can also feed any intermediate nodes using the NamedTensorMap as the\n     * input type. For example, given the graph\n     *    InputNode => Intermediate => OutputNode,\n     * you can execute the subgraph Intermediate => OutputNode by calling\n     *    model.execute('IntermediateNode' : tf.tensor(...));\n     *\n     * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n     * state needs to be fed manually.\n     *\n     * For batch inference execution, the tensors for each input need to be\n     * concatenated together. For example with mobilenet, the required input shape\n     * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n     * If we are provide a batched data of 100 images, the input tensor should be\n     * in the shape of [100, 244, 244, 3].\n     *\n     * @param config Prediction configuration for specifying the batch size.\n     * Currently the batch size option is ignored for graph model.\n     *\n     * @returns Inference result tensors. If the model is converted and it\n     * originally had structured_outputs in tensorflow, then a NamedTensorMap\n     * will be returned matching the structured_outputs. If no structured_outputs\n     * are present, the output will be single `tf.Tensor` if the model has single\n     * output node, otherwise Tensor[].\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    predict(inputs, config) {\n        const outputTensors = this.execute(inputs, this.outputNodes);\n        return this.addStructuredOutputNames(outputTensors);\n    }\n    /**\n     * Execute the inference for the input tensors in async fashion, use this\n     * method when your model contains control flow ops.\n     *\n     * @param input The input tensors, when there is single input for the model,\n     * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\n     * inputs params should be in either `tf.Tensor`[] if the input order is\n     * fixed, or otherwise NamedTensorMap format.\n     *\n     * For model with multiple inputs, we recommend you use NamedTensorMap as the\n     * input type, if you use `tf.Tensor`[], the order of the array needs to\n     * follow the\n     * order of inputNodes array. @see {@link GraphModel.inputNodes}\n     *\n     * You can also feed any intermediate nodes using the NamedTensorMap as the\n     * input type. For example, given the graph\n     *    InputNode => Intermediate => OutputNode,\n     * you can execute the subgraph Intermediate => OutputNode by calling\n     *    model.execute('IntermediateNode' : tf.tensor(...));\n     *\n     * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n     * state needs to be fed manually.\n     *\n     * For batch inference execution, the tensors for each input need to be\n     * concatenated together. For example with mobilenet, the required input shape\n     * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n     * If we are provide a batched data of 100 images, the input tensor should be\n     * in the shape of [100, 244, 244, 3].\n     *\n     * @param config Prediction configuration for specifying the batch size.\n     * Currently the batch size option is ignored for graph model.\n     *\n     * @returns A Promise of inference result tensors. If the model is converted\n     * and it originally had structured_outputs in tensorflow, then a\n     * NamedTensorMap will be returned matching the structured_outputs. If no\n     * structured_outputs are present, the output will be single `tf.Tensor` if\n     * the model has single output node, otherwise Tensor[].\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    async predictAsync(inputs, config) {\n        const outputTensors = await this.executeAsync(inputs, this.outputNodes);\n        return this.addStructuredOutputNames(outputTensors);\n    }\n    normalizeInputs(inputs) {\n        var _a;\n        if (!(inputs instanceof Tensor) && !Array.isArray(inputs)) {\n            // The input is already a NamedTensorMap.\n            const signatureInputs = (_a = this.signature) === null || _a === void 0 ? void 0 : _a.inputs;\n            if (signatureInputs != null) {\n                for (const input in signatureInputs) {\n                    const tensor = signatureInputs[input];\n                    if (tensor.resourceId != null) {\n                        inputs[input] = this.resourceIdToCapturedInput[tensor.resourceId];\n                    }\n                }\n            }\n            return inputs;\n        }\n        inputs = Array.isArray(inputs) ? inputs : [inputs];\n        const numCapturedInputs = Object.keys(this.resourceIdToCapturedInput).length;\n        if (inputs.length + numCapturedInputs !== this.inputNodes.length) {\n            throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length -\n                numCapturedInputs} non-resource placeholders, while there are ${inputs.length} input tensors provided.`);\n        }\n        let inputIndex = 0;\n        return this.inputNodes.reduce((map, inputName) => {\n            var _a, _b, _c;\n            const resourceId = (_c = (_b = (_a = this.signature) === null || _a === void 0 ? void 0 : _a.inputs) === null || _b === void 0 ? void 0 : _b[inputName]) === null || _c === void 0 ? void 0 : _c.resourceId;\n            if (resourceId != null) {\n                map[inputName] = this.resourceIdToCapturedInput[resourceId];\n            }\n            else {\n                map[inputName] = inputs[inputIndex++];\n            }\n            return map;\n        }, {});\n    }\n    normalizeOutputs(outputs) {\n        outputs = outputs || this.outputNodes;\n        return !Array.isArray(outputs) ? [outputs] : outputs;\n    }\n    executeInitializerGraph() {\n        if (this.initializer == null) {\n            return [];\n        }\n        if (this.initializerSignature == null) {\n            return this.initializer.execute({}, []);\n        }\n        else {\n            return this.initializer.execute({}, Object.keys(this.initializerSignature.outputs));\n        }\n    }\n    async executeInitializerGraphAsync() {\n        if (this.initializer == null) {\n            return [];\n        }\n        if (this.initializerSignature == null) {\n            return this.initializer.executeAsync({}, []);\n        }\n        else {\n            return this.initializer.executeAsync({}, Object.keys(this.initializerSignature.outputs));\n        }\n    }\n    setResourceIdToCapturedInput(outputs) {\n        this.resourceIdToCapturedInput = {};\n        if (this.initializerSignature) {\n            const signatureOutputs = this.initializerSignature.outputs;\n            const outputNames = Object.keys(signatureOutputs);\n            for (let i = 0; i < outputNames.length; i++) {\n                const outputName = outputNames[i];\n                const tensorInfo = signatureOutputs[outputName];\n                this.resourceIdToCapturedInput[tensorInfo.resourceId] = outputs[i];\n            }\n        }\n    }\n    /**\n     * Executes inference for the model for given input tensors.\n     * @param inputs tensor, tensor array or tensor map of the inputs for the\n     * model, keyed by the input node names.\n     * @param outputs output node name from the TensorFlow model, if no\n     * outputs are specified, the default outputs of the model would be used.\n     * You can inspect intermediate nodes of the model by adding them to the\n     * outputs array.\n     *\n     * @returns A single tensor if provided with a single output or no outputs\n     * are provided and there is only one default output, otherwise return a\n     * tensor array. The order of the tensor array is the same as the outputs\n     * if provided, otherwise the order of outputNodes attribute of the model.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    execute(inputs, outputs) {\n        if (this.resourceIdToCapturedInput == null) {\n            this.setResourceIdToCapturedInput(this.executeInitializerGraph());\n        }\n        inputs = this.normalizeInputs(inputs);\n        outputs = this.normalizeOutputs(outputs);\n        const result = this.executor.execute(inputs, outputs);\n        return result.length > 1 ? result : result[0];\n    }\n    /**\n     * Executes inference for the model for given input tensors in async\n     * fashion, use this method when your model contains control flow ops.\n     * @param inputs tensor, tensor array or tensor map of the inputs for the\n     * model, keyed by the input node names.\n     * @param outputs output node name from the TensorFlow model, if no outputs\n     * are specified, the default outputs of the model would be used. You can\n     * inspect intermediate nodes of the model by adding them to the outputs\n     * array.\n     *\n     * @returns A Promise of single tensor if provided with a single output or\n     * no outputs are provided and there is only one default output, otherwise\n     * return a tensor map.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    async executeAsync(inputs, outputs) {\n        if (this.resourceIdToCapturedInput == null) {\n            this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync());\n        }\n        inputs = this.normalizeInputs(inputs);\n        outputs = this.normalizeOutputs(outputs);\n        const result = await this.executor.executeAsync(inputs, outputs);\n        return result.length > 1 ? result : result[0];\n    }\n    /**\n     * Get intermediate tensors for model debugging mode (flag\n     * KEEP_INTERMEDIATE_TENSORS is true).\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    getIntermediateTensors() {\n        return this.executor.getIntermediateTensors();\n    }\n    /**\n     * Dispose intermediate tensors for model debugging mode (flag\n     * KEEP_INTERMEDIATE_TENSORS is true).\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    disposeIntermediateTensors() {\n        this.executor.disposeIntermediateTensors();\n    }\n    convertTensorMapToTensorsMap(map) {\n        return Object.keys(map).reduce((newMap, key) => {\n            newMap[key] = [map[key]];\n            return newMap;\n        }, {});\n    }\n    /**\n     * Releases the memory used by the weight tensors and resourceManager.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    dispose() {\n        this.executor.dispose();\n        if (this.initializer) {\n            this.initializer.dispose();\n            if (this.resourceIdToCapturedInput) {\n                dispose(this.resourceIdToCapturedInput);\n            }\n        }\n        this.resourceManager.dispose();\n    }\n}\n/**\n * Load a graph model given a URL to the model definition.\n *\n * Example of loading MobileNetV2 from a URL and making a prediction with a\n * zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n * const model = await tf.loadGraphModel(modelUrl);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * Example of loading MobileNetV2 from a TF Hub URL and making a prediction\n * with a zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\n * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n * @param modelUrl The url or an `io.IOHandler` that loads the model.\n * @param options Options for the HTTP request, which allows to send\n *     credentials\n *    and custom headers.\n *\n * @doc {heading: 'Models', subheading: 'Loading'}\n */\nexport async function loadGraphModel(modelUrl, options = {}, tfio = io) {\n    if (modelUrl == null) {\n        throw new Error('modelUrl in loadGraphModel() cannot be null. Please provide a url ' +\n            'or an IOHandler that loads the model');\n    }\n    if (options == null) {\n        options = {};\n    }\n    if (options.fromTFHub && typeof modelUrl === 'string') {\n        modelUrl = getTFHubUrl(modelUrl);\n    }\n    const model = new GraphModel(modelUrl, options, tfio);\n    await model.load();\n    return model;\n}\n/**\n * Load a graph model given a synchronous IO handler with a 'load' method.\n *\n * @param modelSource The `io.IOHandlerSync` that loads the model, or the\n *     `io.ModelArtifacts` that encode the model, or a tuple of\n *     `[io.ModelJSON, ArrayBuffer]` of which the first element encodes the\n *      model and the second contains the weights.\n *\n * @doc {heading: 'Models', subheading: 'Loading'}\n */\nexport function loadGraphModelSync(modelSource) {\n    if (modelSource == null) {\n        throw new Error('modelUrl in loadGraphModelSync() cannot be null. Please provide ' +\n            'model artifacts or an IOHandler that loads the model');\n    }\n    let ioHandler;\n    if (modelSource instanceof Array) {\n        const [modelJSON, weights] = modelSource;\n        if (!modelJSON) {\n            throw new Error('modelJSON must be the first element of the array');\n        }\n        if (!weights || !(weights instanceof ArrayBuffer)) {\n            throw new Error('An ArrayBuffer of weights must be the second element of' +\n                ' the array');\n        }\n        if (!('modelTopology' in modelJSON)) {\n            throw new Error('Model JSON is missing \\'modelTopology\\'');\n        }\n        if (!('weightsManifest' in modelJSON)) {\n            throw new Error('Model JSON is missing \\'weightsManifest\\'');\n        }\n        const weightSpecs = io.getWeightSpecs(modelJSON.weightsManifest);\n        const modelArtifacts = io.getModelArtifactsForJSONSync(modelJSON, weightSpecs, weights);\n        ioHandler = io.fromMemorySync(modelArtifacts);\n    }\n    else if ('load' in modelSource) {\n        // Then modelSource is already an IOHandlerSync.\n        ioHandler = modelSource;\n    }\n    else if ('modelTopology' in modelSource && 'weightSpecs' in modelSource &&\n        'weightData' in modelSource) {\n        // modelSource is of type ModelArtifacts.\n        ioHandler = io.fromMemorySync(modelSource);\n    }\n    else {\n        throw new Error('Unknown model format');\n    }\n    const model = new GraphModel(ioHandler);\n    model.load();\n    return model;\n}\nfunction getTFHubUrl(modelUrl) {\n    if (!modelUrl.endsWith('/')) {\n        modelUrl = (modelUrl) + '/';\n    }\n    return `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;\n}\n//# sourceMappingURL=data:application/json;base64,","/** @license See the LICENSE file. */\n// This code is auto-generated, do not modify this file!\nconst version = '4.22.0';\nexport { version };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3RmanMtY29udmVydGVyL3NyYy92ZXJzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFDQUFxQztBQUVyQyx3REFBd0Q7QUFDeEQsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDO0FBQ3pCLE9BQU8sRUFBQyxPQUFPLEVBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAbGljZW5zZSBTZWUgdGhlIExJQ0VOU0UgZmlsZS4gKi9cblxuLy8gVGhpcyBjb2RlIGlzIGF1dG8tZ2VuZXJhdGVkLCBkbyBub3QgbW9kaWZ5IHRoaXMgZmlsZSFcbmNvbnN0IHZlcnNpb24gPSAnNC4yMi4wJztcbmV4cG9ydCB7dmVyc2lvbn07XG4iXX0="],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"mappings":"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"}